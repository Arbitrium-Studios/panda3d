1713075268
3 3
14 libpandabullet 4 fCJ_ 14 panda3d.bullet 
751
757 19 get_default_up_axis 0 1 0 19 get_default_up_axis 0 1 755 10
/**
 *
 */
39
BulletUpAxis get_default_up_axis(void);

758 18 get_bullet_version 0 1 0 18 get_bullet_version 0 1 756 60
/**
 * Returns the version of the linked Bullet library.
 */
29
int get_bullet_version(void);

759 5 empty 0 4 1509 19 BulletRayHit::empty 0 1 3 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
53
static inline BulletRayHit BulletRayHit::empty(void);

760 8 get_node 0 4 1509 22 BulletRayHit::get_node 0 1 4 10
/**
 *
 */
46
PandaNode *BulletRayHit::get_node(void) const;

761 11 get_hit_pos 0 4 1509 25 BulletRayHit::get_hit_pos 0 1 5 10
/**
 *
 */
46
LPoint3 BulletRayHit::get_hit_pos(void) const;

762 14 get_hit_normal 0 4 1509 28 BulletRayHit::get_hit_normal 0 1 6 10
/**
 *
 */
50
LVector3 BulletRayHit::get_hit_normal(void) const;

763 16 get_hit_fraction 0 4 1509 30 BulletRayHit::get_hit_fraction 0 1 7 10
/**
 *
 */
55
PN_stdfloat BulletRayHit::get_hit_fraction(void) const;

764 14 get_shape_part 0 4 1509 28 BulletRayHit::get_shape_part 0 1 8 10
/**
 *
 */
45
int BulletRayHit::get_shape_part(void) const;

765 18 get_triangle_index 0 4 1509 32 BulletRayHit::get_triangle_index 0 1 9 10
/**
 *
 */
49
int BulletRayHit::get_triangle_index(void) const;

766 12 BulletRayHit 0 260 1509 26 BulletRayHit::BulletRayHit 0 2 1 2 0
117
inline BulletRayHit::BulletRayHit(void) = default;
inline BulletRayHit::BulletRayHit(BulletRayHit const &) = default;

767 13 ~BulletRayHit 0 516 1509 27 BulletRayHit::~BulletRayHit 0 0 0
34
BulletRayHit::~BulletRayHit(void);

768 34 upcast_to_AllHitsRayResultCallback 0 12 1520 58 BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback 0 1 17 62
upcast from BulletAllHitsRayResult to AllHitsRayResultCallback
109
btCollisionWorld::AllHitsRayResultCallback *BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback(void);

769 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 8 0 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 0 64
downcast from AllHitsRayResultCallback to BulletAllHitsRayResult
134
BulletAllHitsRayResult *downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult(btCollisionWorld::AllHitsRayResultCallback *this);

770 20 upcast_to_MemoryBase 0 12 1520 44 BulletAllHitsRayResult::upcast_to_MemoryBase 0 1 18 48
upcast from BulletAllHitsRayResult to MemoryBase
63
MemoryBase *BulletAllHitsRayResult::upcast_to_MemoryBase(void);

771 34 downcast_to_BulletAllHitsRayResult 0 12 1510 46 MemoryBase::downcast_to_BulletAllHitsRayResult 0 0 50
downcast from MemoryBase to BulletAllHitsRayResult
77
BulletAllHitsRayResult *MemoryBase::downcast_to_BulletAllHitsRayResult(void);

772 5 empty 0 4 1520 29 BulletAllHitsRayResult::empty 0 1 10 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
73
static inline BulletAllHitsRayResult BulletAllHitsRayResult::empty(void);

773 12 get_from_pos 0 4 1520 36 BulletAllHitsRayResult::get_from_pos 0 1 11 10
/**
 *
 */
57
LPoint3 BulletAllHitsRayResult::get_from_pos(void) const;

774 10 get_to_pos 0 4 1520 34 BulletAllHitsRayResult::get_to_pos 0 1 12 10
/**
 *
 */
55
LPoint3 BulletAllHitsRayResult::get_to_pos(void) const;

775 8 has_hits 0 4 1520 32 BulletAllHitsRayResult::has_hits 0 1 13 10
/**
 *
 */
50
bool BulletAllHitsRayResult::has_hits(void) const;

776 24 get_closest_hit_fraction 0 4 1520 48 BulletAllHitsRayResult::get_closest_hit_fraction 0 1 14 10
/**
 *
 */
73
PN_stdfloat BulletAllHitsRayResult::get_closest_hit_fraction(void) const;

777 12 get_num_hits 0 4 1520 36 BulletAllHitsRayResult::get_num_hits 0 1 15 10
/**
 *
 */
53
int BulletAllHitsRayResult::get_num_hits(void) const;

778 7 get_hit 0 4 1520 31 BulletAllHitsRayResult::get_hit 0 1 16 10
/**
 *
 */
66
BulletRayHit const BulletAllHitsRayResult::get_hit(int idx) const;

779 23 ~BulletAllHitsRayResult 0 516 1520 47 BulletAllHitsRayResult::~BulletAllHitsRayResult 0 0 0
54
BulletAllHitsRayResult::~BulletAllHitsRayResult(void);

780 13 is_polyhedral 0 4 1523 26 BulletShape::is_polyhedral 0 1 19 10
/**
 *
 */
44
bool BulletShape::is_polyhedral(void) const;

781 9 is_convex 0 4 1523 22 BulletShape::is_convex 0 1 20 10
/**
 *
 */
40
bool BulletShape::is_convex(void) const;

782 12 is_convex_2d 0 4 1523 25 BulletShape::is_convex_2d 0 1 21 10
/**
 *
 */
43
bool BulletShape::is_convex_2d(void) const;

783 10 is_concave 0 4 1523 23 BulletShape::is_concave 0 1 22 10
/**
 *
 */
41
bool BulletShape::is_concave(void) const;

784 11 is_infinite 0 4 1523 24 BulletShape::is_infinite 0 1 23 10
/**
 *
 */
42
bool BulletShape::is_infinite(void) const;

785 13 is_non_moving 0 4 1523 26 BulletShape::is_non_moving 0 1 24 10
/**
 *
 */
44
bool BulletShape::is_non_moving(void) const;

786 12 is_soft_body 0 4 1523 25 BulletShape::is_soft_body 0 1 25 10
/**
 *
 */
43
bool BulletShape::is_soft_body(void) const;

787 10 set_margin 0 4 1523 23 BulletShape::set_margin 0 1 26 10
/**
 *
 */
49
void BulletShape::set_margin(PN_stdfloat margin);

788 8 get_name 0 4 1523 21 BulletShape::get_name 0 1 27 10
/**
 *
 */
46
char const *BulletShape::get_name(void) const;

789 10 get_margin 0 4 1523 23 BulletShape::get_margin 0 1 28 10
/**
 *
 */
48
PN_stdfloat BulletShape::get_margin(void) const;

790 16 get_shape_bounds 0 4 1523 29 BulletShape::get_shape_bounds 0 1 29 62
/**
 * Returns the current bounds of this collision shape.
 */
57
BoundingSphere BulletShape::get_shape_bounds(void) const;

791 14 get_class_type 0 4 1523 27 BulletShape::get_class_type 0 1 30 0
52
static TypeHandle BulletShape::get_class_type(void);

792 14 get_class_type 0 4 1530 49 BulletBaseCharacterControllerNode::get_class_type 0 1 31 0
74
static TypeHandle BulletBaseCharacterControllerNode::get_class_type(void);

793 34 ~BulletBaseCharacterControllerNode 0 516 1530 69 BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode 0 0 0
76
BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode(void);

794 9 add_shape 0 4 1531 25 BulletBodyNode::add_shape 0 1 32 21
// Shapes

/**
 *
 */
114
void BulletBodyNode::add_shape(BulletShape *shape, TransformState const *xform = TransformState::make_identity());

795 12 remove_shape 0 4 1531 28 BulletBodyNode::remove_shape 0 1 33 10
/**
 *
 */
54
void BulletBodyNode::remove_shape(BulletShape *shape);

796 14 get_num_shapes 0 4 1531 30 BulletBodyNode::get_num_shapes 0 1 34 10
/**
 *
 */
47
int BulletBodyNode::get_num_shapes(void) const;

797 9 get_shape 0 4 1531 25 BulletBodyNode::get_shape 0 1 35 10
/**
 *
 */
54
BulletShape *BulletBodyNode::get_shape(int idx) const;

798 13 get_shape_pos 0 4 1531 29 BulletBodyNode::get_shape_pos 0 1 36 10
/**
 *
 */
53
LPoint3 BulletBodyNode::get_shape_pos(int idx) const;

799 13 get_shape_mat 0 4 1531 29 BulletBodyNode::get_shape_mat 0 1 37 10
/**
 *
 */
54
LMatrix4 BulletBodyNode::get_shape_mat(int idx) const;

800 19 get_shape_transform 0 4 1531 35 BulletBodyNode::get_shape_transform 0 1 38 10
/**
 *
 */
84
ConstPointerTo< TransformState > BulletBodyNode::get_shape_transform(int idx) const;

801 16 get_shape_bounds 0 4 1531 32 BulletBodyNode::get_shape_bounds 0 1 39 81
/**
 * Returns the current bounds of all collision shapes owned by this body.
 */
60
BoundingSphere BulletBodyNode::get_shape_bounds(void) const;

802 32 add_shapes_from_collision_solids 0 4 1531 48 BulletBodyNode::add_shapes_from_collision_solids 0 2 40 41 339
/**
 * Add shapes from the specified collision node to this body.
 */

/**
 * Add shapes from the specified collision node to this body. Also apply the
 * given transform state to all solids. This is useful for example when the
 * collision node is rotated, is not centered to origin, or has several parent
 * transforms applied on it.
 */
195
void BulletBodyNode::add_shapes_from_collision_solids(CollisionNode *cnode);
void BulletBodyNode::add_shapes_from_collision_solids(CollisionNode *cnode, TransformState const *relative_transform);

803 9 is_static 0 4 1531 25 BulletBodyNode::is_static 0 1 42 60
// Static and kinematic

// Static and kinematic

/**
 *
 */
43
bool BulletBodyNode::is_static(void) const;

804 12 is_kinematic 0 4 1531 28 BulletBodyNode::is_kinematic 0 1 43 10
/**
 *
 */
46
bool BulletBodyNode::is_kinematic(void) const;

805 10 set_static 0 4 1531 26 BulletBodyNode::set_static 0 1 44 10
/**
 *
 */
51
inline void BulletBodyNode::set_static(bool value);

806 13 set_kinematic 0 4 1531 29 BulletBodyNode::set_kinematic 0 1 45 10
/**
 *
 */
54
inline void BulletBodyNode::set_kinematic(bool value);

807 21 set_into_collide_mask 0 4 1531 37 BulletBodyNode::set_into_collide_mask 0 1 46 23
// Contacts

/**
 *
 */
68
inline void BulletBodyNode::set_into_collide_mask(CollideMask mask);

808 17 notify_collisions 0 4 1531 33 BulletBodyNode::notify_collisions 0 1 47 10
/**
 *
 */
58
inline void BulletBodyNode::notify_collisions(bool value);

809 19 notifies_collisions 0 4 1531 35 BulletBodyNode::notifies_collisions 0 1 48 10
/**
 *
 */
60
inline bool BulletBodyNode::notifies_collisions(void) const;

810 22 set_collision_response 0 4 1531 38 BulletBodyNode::set_collision_response 0 1 49 10
/**
 *
 */
63
inline void BulletBodyNode::set_collision_response(bool value);

811 22 get_collision_response 0 4 1531 38 BulletBodyNode::get_collision_response 0 1 50 10
/**
 *
 */
63
inline bool BulletBodyNode::get_collision_response(void) const;

812 20 check_collision_with 0 4 1531 36 BulletBodyNode::check_collision_with 0 1 51 10
/**
 *
 */
59
bool BulletBodyNode::check_collision_with(PandaNode *node);

813 20 has_contact_response 0 4 1531 36 BulletBodyNode::has_contact_response 0 1 52 10
/**
 *
 */
54
bool BulletBodyNode::has_contact_response(void) const;

814 32 get_contact_processing_threshold 0 4 1531 48 BulletBodyNode::get_contact_processing_threshold 0 1 53 10
/**
 *
 */
73
PN_stdfloat BulletBodyNode::get_contact_processing_threshold(void) const;

815 32 set_contact_processing_threshold 0 4 1531 48 BulletBodyNode::set_contact_processing_threshold 0 1 54 106
/**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */
77
void BulletBodyNode::set_contact_processing_threshold(PN_stdfloat threshold);

816 9 is_active 0 4 1531 25 BulletBodyNode::is_active 0 1 55 44
// Deactivation

// Deactivation

/**
 *
 */
43
bool BulletBodyNode::is_active(void) const;

817 10 set_active 0 4 1531 26 BulletBodyNode::set_active 0 1 56 10
/**
 *
 */
65
void BulletBodyNode::set_active(bool active, bool force = false);

818 12 force_active 0 4 1531 28 BulletBodyNode::force_active 0 1 57 10
/**
 *
 */
47
void BulletBodyNode::force_active(bool active);

819 21 set_deactivation_time 0 4 1531 37 BulletBodyNode::set_deactivation_time 0 1 58 10
/**
 *
 */
59
void BulletBodyNode::set_deactivation_time(PN_stdfloat dt);

820 21 get_deactivation_time 0 4 1531 37 BulletBodyNode::get_deactivation_time 0 1 59 10
/**
 *
 */
62
PN_stdfloat BulletBodyNode::get_deactivation_time(void) const;

821 24 set_deactivation_enabled 0 4 1531 40 BulletBodyNode::set_deactivation_enabled 0 1 60 163
/**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */
60
void BulletBodyNode::set_deactivation_enabled(bool enabled);

822 23 is_deactivation_enabled 0 4 1531 39 BulletBodyNode::is_deactivation_enabled 0 1 61 10
/**
 *
 */
57
bool BulletBodyNode::is_deactivation_enabled(void) const;

823 17 set_debug_enabled 0 4 1531 33 BulletBodyNode::set_debug_enabled 0 1 62 180
// Debug Visualisation

// Debug Visualisation

/**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */
66
inline void BulletBodyNode::set_debug_enabled(bool const enabled);

824 16 is_debug_enabled 0 4 1531 32 BulletBodyNode::is_debug_enabled 0 1 63 141
/**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */
57
inline bool BulletBodyNode::is_debug_enabled(void) const;

825 15 get_restitution 0 4 1531 31 BulletBodyNode::get_restitution 0 1 64 68
// Friction and Restitution

// Friction and Restitution

/**
 *
 */
56
PN_stdfloat BulletBodyNode::get_restitution(void) const;

826 15 set_restitution 0 4 1531 31 BulletBodyNode::set_restitution 0 1 65 10
/**
 *
 */
62
void BulletBodyNode::set_restitution(PN_stdfloat restitution);

827 12 get_friction 0 4 1531 28 BulletBodyNode::get_friction 0 1 66 10
/**
 *
 */
53
PN_stdfloat BulletBodyNode::get_friction(void) const;

828 12 set_friction 0 4 1531 28 BulletBodyNode::set_friction 0 1 67 10
/**
 *
 */
56
void BulletBodyNode::set_friction(PN_stdfloat friction);

829 24 has_anisotropic_friction 0 4 1531 40 BulletBodyNode::has_anisotropic_friction 0 1 68 10
/**
 *
 */
58
bool BulletBodyNode::has_anisotropic_friction(void) const;

830 24 set_anisotropic_friction 0 4 1531 40 BulletBodyNode::set_anisotropic_friction 0 1 69 10
/**
 *
 */
73
void BulletBodyNode::set_anisotropic_friction(LVecBase3 const &friction);

831 24 get_anisotropic_friction 0 4 1531 40 BulletBodyNode::get_anisotropic_friction 0 1 70 10
/**
 *
 */
63
LVecBase3 BulletBodyNode::get_anisotropic_friction(void) const;

832 27 get_ccd_swept_sphere_radius 0 4 1531 43 BulletBodyNode::get_ccd_swept_sphere_radius 0 1 71 26
// CCD

// CCD

/**
 *
 */
68
PN_stdfloat BulletBodyNode::get_ccd_swept_sphere_radius(void) const;

833 24 get_ccd_motion_threshold 0 4 1531 40 BulletBodyNode::get_ccd_motion_threshold 0 1 72 10
/**
 *
 */
65
PN_stdfloat BulletBodyNode::get_ccd_motion_threshold(void) const;

834 27 set_ccd_swept_sphere_radius 0 4 1531 43 BulletBodyNode::set_ccd_swept_sphere_radius 0 1 73 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_swept_sphere_radius(PN_stdfloat radius);

835 24 set_ccd_motion_threshold 0 4 1531 40 BulletBodyNode::set_ccd_motion_threshold 0 1 74 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_motion_threshold(PN_stdfloat threshold);

836 19 set_transform_dirty 0 4 1531 35 BulletBodyNode::set_transform_dirty 0 1 75 228
// Special

/**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */
47
void BulletBodyNode::set_transform_dirty(void);

837 14 get_class_type 0 4 1531 30 BulletBodyNode::get_class_type 0 1 76 0
55
static TypeHandle BulletBodyNode::get_class_type(void);

838 14 BulletBoxShape 0 260 1538 30 BulletBoxShape::BulletBoxShape 0 2 77 78 62
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */
130
explicit BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents);
BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy);

839 31 get_half_extents_without_margin 0 4 1538 47 BulletBoxShape::get_half_extents_without_margin 0 1 79 10
/**
 *
 */
70
LVecBase3 BulletBoxShape::get_half_extents_without_margin(void) const;

840 28 get_half_extents_with_margin 0 4 1538 44 BulletBoxShape::get_half_extents_with_margin 0 1 80 10
/**
 *
 */
67
LVecBase3 BulletBoxShape::get_half_extents_with_margin(void) const;

841 15 make_from_solid 0 4 1538 31 BulletBoxShape::make_from_solid 0 1 81 10
/**
 *
 */
82
static BulletBoxShape *BulletBoxShape::make_from_solid(CollisionBox const *solid);

842 14 get_class_type 0 4 1538 30 BulletBoxShape::get_class_type 0 1 82 0
55
static TypeHandle BulletBoxShape::get_class_type(void);

843 18 BulletCapsuleShape 0 260 1539 38 BulletCapsuleShape::BulletCapsuleShape 0 2 83 84 62
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */
186
explicit BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
BulletCapsuleShape::BulletCapsuleShape(BulletCapsuleShape const &copy);

844 15 make_from_solid 0 4 1539 35 BulletCapsuleShape::make_from_solid 0 1 85 130
/**
 * Constructs a new BulletCapsuleShape using the information from a
 * CollisionCapsule from the builtin collision system.
 */
94
static BulletCapsuleShape *BulletCapsuleShape::make_from_solid(CollisionCapsule const *solid);

845 10 get_radius 0 4 1539 30 BulletCapsuleShape::get_radius 0 1 86 70
/**
 * Returns the radius that was used to construct this capsule.
 */
62
inline PN_stdfloat BulletCapsuleShape::get_radius(void) const;

846 15 get_half_height 0 4 1539 35 BulletCapsuleShape::get_half_height 0 1 87 81
/**
 * Returns half of get_height().
 * @deprecated see get_height() instead.
 */
67
inline PN_stdfloat BulletCapsuleShape::get_half_height(void) const;

847 10 get_height 0 4 1539 30 BulletCapsuleShape::get_height 0 0 70
/**
 * Returns the height that was used to construct this capsule.
 */
62
inline PN_stdfloat BulletCapsuleShape::get_height(void) const;

848 14 get_class_type 0 4 1539 34 BulletCapsuleShape::get_class_type 0 1 88 0
59
static TypeHandle BulletCapsuleShape::get_class_type(void);

849 29 BulletCharacterControllerNode 0 260 1540 60 BulletCharacterControllerNode::BulletCharacterControllerNode 0 1 89 10
/**
 *
 */
147
explicit BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character");

850 19 set_linear_movement 0 4 1540 50 BulletCharacterControllerNode::set_linear_movement 0 1 90 10
/**
 *
 */
97
void BulletCharacterControllerNode::set_linear_movement(LVector3 const &velocity, bool is_local);

851 20 set_angular_movement 0 4 1540 51 BulletCharacterControllerNode::set_angular_movement 0 1 91 10
/**
 *
 */
76
void BulletCharacterControllerNode::set_angular_movement(PN_stdfloat omega);

852 9 get_shape 0 4 1540 40 BulletCharacterControllerNode::get_shape 0 1 92 10
/**
 *
 */
66
BulletShape *BulletCharacterControllerNode::get_shape(void) const;

853 11 set_gravity 0 4 1540 42 BulletCharacterControllerNode::set_gravity 0 1 93 10
/**
 *
 */
69
void BulletCharacterControllerNode::set_gravity(PN_stdfloat gravity);

854 11 get_gravity 0 4 1540 42 BulletCharacterControllerNode::get_gravity 0 1 94 10
/**
 *
 */
67
PN_stdfloat BulletCharacterControllerNode::get_gravity(void) const;

855 14 set_fall_speed 0 4 1540 45 BulletCharacterControllerNode::set_fall_speed 0 1 95 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_fall_speed(PN_stdfloat fall_speed);

856 14 set_jump_speed 0 4 1540 45 BulletCharacterControllerNode::set_jump_speed 0 1 96 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_jump_speed(PN_stdfloat jump_speed);

857 19 set_max_jump_height 0 4 1540 50 BulletCharacterControllerNode::set_max_jump_height 0 1 97 10
/**
 *
 */
85
void BulletCharacterControllerNode::set_max_jump_height(PN_stdfloat max_jump_height);

858 13 set_max_slope 0 4 1540 44 BulletCharacterControllerNode::set_max_slope 0 1 98 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_max_slope(PN_stdfloat max_slope);

859 13 get_max_slope 0 4 1540 44 BulletCharacterControllerNode::get_max_slope 0 1 99 10
/**
 *
 */
69
PN_stdfloat BulletCharacterControllerNode::get_max_slope(void) const;

860 24 set_use_ghost_sweep_test 0 4 1540 55 BulletCharacterControllerNode::set_use_ghost_sweep_test 0 1 100 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_use_ghost_sweep_test(bool value);

861 12 is_on_ground 0 4 1540 43 BulletCharacterControllerNode::is_on_ground 0 1 101 10
/**
 *
 */
61
bool BulletCharacterControllerNode::is_on_ground(void) const;

862 8 can_jump 0 4 1540 39 BulletCharacterControllerNode::can_jump 0 1 102 10
/**
 *
 */
57
bool BulletCharacterControllerNode::can_jump(void) const;

863 7 do_jump 0 4 1540 38 BulletCharacterControllerNode::do_jump 0 1 103 10
/**
 *
 */
50
void BulletCharacterControllerNode::do_jump(void);

864 14 get_class_type 0 4 1540 45 BulletCharacterControllerNode::get_class_type 0 1 104 0
70
static TypeHandle BulletCharacterControllerNode::get_class_type(void);

865 34 upcast_to_ClosestRayResultCallback 0 12 1541 61 BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback 0 1 116 65
upcast from BulletClosestHitRayResult to ClosestRayResultCallback
112
btCollisionWorld::ClosestRayResultCallback *BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback(void);

866 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 8 0 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 0 67
downcast from ClosestRayResultCallback to BulletClosestHitRayResult
140
BulletClosestHitRayResult *downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult(btCollisionWorld::ClosestRayResultCallback *this);

867 20 upcast_to_MemoryBase 0 12 1541 47 BulletClosestHitRayResult::upcast_to_MemoryBase 0 1 117 51
upcast from BulletClosestHitRayResult to MemoryBase
66
MemoryBase *BulletClosestHitRayResult::upcast_to_MemoryBase(void);

868 37 downcast_to_BulletClosestHitRayResult 0 12 1510 49 MemoryBase::downcast_to_BulletClosestHitRayResult 0 0 53
downcast from MemoryBase to BulletClosestHitRayResult
83
BulletClosestHitRayResult *MemoryBase::downcast_to_BulletClosestHitRayResult(void);

869 5 empty 0 4 1541 32 BulletClosestHitRayResult::empty 0 1 106 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletClosestHitRayResult BulletClosestHitRayResult::empty(void);

870 12 get_from_pos 0 4 1541 39 BulletClosestHitRayResult::get_from_pos 0 1 107 10
/**
 *
 */
60
LPoint3 BulletClosestHitRayResult::get_from_pos(void) const;

871 10 get_to_pos 0 4 1541 37 BulletClosestHitRayResult::get_to_pos 0 1 108 10
/**
 *
 */
58
LPoint3 BulletClosestHitRayResult::get_to_pos(void) const;

872 7 has_hit 0 4 1541 34 BulletClosestHitRayResult::has_hit 0 1 109 10
/**
 *
 */
52
bool BulletClosestHitRayResult::has_hit(void) const;

873 8 get_node 0 4 1541 35 BulletClosestHitRayResult::get_node 0 1 110 10
/**
 *
 */
59
PandaNode *BulletClosestHitRayResult::get_node(void) const;

874 11 get_hit_pos 0 4 1541 38 BulletClosestHitRayResult::get_hit_pos 0 1 111 10
/**
 *
 */
59
LPoint3 BulletClosestHitRayResult::get_hit_pos(void) const;

875 14 get_hit_normal 0 4 1541 41 BulletClosestHitRayResult::get_hit_normal 0 1 112 10
/**
 *
 */
63
LVector3 BulletClosestHitRayResult::get_hit_normal(void) const;

876 16 get_hit_fraction 0 4 1541 43 BulletClosestHitRayResult::get_hit_fraction 0 1 113 10
/**
 *
 */
68
PN_stdfloat BulletClosestHitRayResult::get_hit_fraction(void) const;

877 14 get_shape_part 0 4 1541 41 BulletClosestHitRayResult::get_shape_part 0 1 114 10
/**
 *
 */
58
int BulletClosestHitRayResult::get_shape_part(void) const;

878 18 get_triangle_index 0 4 1541 45 BulletClosestHitRayResult::get_triangle_index 0 1 115 10
/**
 *
 */
62
int BulletClosestHitRayResult::get_triangle_index(void) const;

879 25 BulletClosestHitRayResult 0 260 1541 52 BulletClosestHitRayResult::BulletClosestHitRayResult 0 1 105 10
/**
 *
 */
105
inline BulletClosestHitRayResult::BulletClosestHitRayResult(BulletClosestHitRayResult const &) = default;

880 26 ~BulletClosestHitRayResult 0 516 1541 53 BulletClosestHitRayResult::~BulletClosestHitRayResult 0 0 0
60
BulletClosestHitRayResult::~BulletClosestHitRayResult(void);

881 37 upcast_to_ClosestConvexResultCallback 0 12 1543 66 BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback 0 1 127 70
upcast from BulletClosestHitSweepResult to ClosestConvexResultCallback
120
btCollisionWorld::ClosestConvexResultCallback *BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback(void);

882 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 8 0 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 0 72
downcast from ClosestConvexResultCallback to BulletClosestHitSweepResult
150
BulletClosestHitSweepResult *downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult(btCollisionWorld::ClosestConvexResultCallback *this);

883 20 upcast_to_MemoryBase 0 12 1543 49 BulletClosestHitSweepResult::upcast_to_MemoryBase 0 1 128 53
upcast from BulletClosestHitSweepResult to MemoryBase
68
MemoryBase *BulletClosestHitSweepResult::upcast_to_MemoryBase(void);

884 39 downcast_to_BulletClosestHitSweepResult 0 12 1510 51 MemoryBase::downcast_to_BulletClosestHitSweepResult 0 0 55
downcast from MemoryBase to BulletClosestHitSweepResult
87
BulletClosestHitSweepResult *MemoryBase::downcast_to_BulletClosestHitSweepResult(void);

885 5 empty 0 4 1543 34 BulletClosestHitSweepResult::empty 0 1 119 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
83
static inline BulletClosestHitSweepResult BulletClosestHitSweepResult::empty(void);

886 12 get_from_pos 0 4 1543 41 BulletClosestHitSweepResult::get_from_pos 0 1 120 10
/**
 *
 */
62
LPoint3 BulletClosestHitSweepResult::get_from_pos(void) const;

887 10 get_to_pos 0 4 1543 39 BulletClosestHitSweepResult::get_to_pos 0 1 121 10
/**
 *
 */
60
LPoint3 BulletClosestHitSweepResult::get_to_pos(void) const;

888 7 has_hit 0 4 1543 36 BulletClosestHitSweepResult::has_hit 0 1 122 10
/**
 *
 */
54
bool BulletClosestHitSweepResult::has_hit(void) const;

889 8 get_node 0 4 1543 37 BulletClosestHitSweepResult::get_node 0 1 123 10
/**
 *
 */
61
PandaNode *BulletClosestHitSweepResult::get_node(void) const;

890 11 get_hit_pos 0 4 1543 40 BulletClosestHitSweepResult::get_hit_pos 0 1 124 10
/**
 *
 */
61
LPoint3 BulletClosestHitSweepResult::get_hit_pos(void) const;

891 14 get_hit_normal 0 4 1543 43 BulletClosestHitSweepResult::get_hit_normal 0 1 125 10
/**
 *
 */
65
LVector3 BulletClosestHitSweepResult::get_hit_normal(void) const;

892 16 get_hit_fraction 0 4 1543 45 BulletClosestHitSweepResult::get_hit_fraction 0 1 126 10
/**
 *
 */
70
PN_stdfloat BulletClosestHitSweepResult::get_hit_fraction(void) const;

893 27 BulletClosestHitSweepResult 0 260 1543 56 BulletClosestHitSweepResult::BulletClosestHitSweepResult 0 1 118 10
/**
 *
 */
111
inline BulletClosestHitSweepResult::BulletClosestHitSweepResult(BulletClosestHitSweepResult const &) = default;

894 28 ~BulletClosestHitSweepResult 0 516 1543 57 BulletClosestHitSweepResult::~BulletClosestHitSweepResult 0 0 0
64
BulletClosestHitSweepResult::~BulletClosestHitSweepResult(void);

895 15 BulletConeShape 0 260 1545 32 BulletConeShape::BulletConeShape 0 2 129 130 62
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */
171
explicit BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
BulletConeShape::BulletConeShape(BulletConeShape const &copy);

896 10 get_radius 0 4 1545 27 BulletConeShape::get_radius 0 1 131 67
/**
 * Returns the radius that was passed into the constructor.
 */
59
inline PN_stdfloat BulletConeShape::get_radius(void) const;

897 10 get_height 0 4 1545 27 BulletConeShape::get_height 0 1 132 67
/**
 * Returns the height that was passed into the constructor.
 */
59
inline PN_stdfloat BulletConeShape::get_height(void) const;

898 14 get_class_type 0 4 1545 31 BulletConeShape::get_class_type 0 1 133 0
56
static TypeHandle BulletConeShape::get_class_type(void);

899 16 get_rigid_body_a 0 4 1546 34 BulletConstraint::get_rigid_body_a 0 1 134 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_a(void);

900 16 get_rigid_body_b 0 4 1546 34 BulletConstraint::get_rigid_body_b 0 1 135 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_b(void);

901 15 enable_feedback 0 4 1546 33 BulletConstraint::enable_feedback 0 1 136 10
/**
 *
 */
51
void BulletConstraint::enable_feedback(bool value);

902 19 set_debug_draw_size 0 4 1546 37 BulletConstraint::set_debug_draw_size 0 1 137 10
/**
 *
 */
61
void BulletConstraint::set_debug_draw_size(PN_stdfloat size);

903 19 get_debug_draw_size 0 4 1546 37 BulletConstraint::get_debug_draw_size 0 1 138 10
/**
 *
 */
56
PN_stdfloat BulletConstraint::get_debug_draw_size(void);

904 19 get_applied_impulse 0 4 1546 37 BulletConstraint::get_applied_impulse 0 1 139 10
/**
 *
 */
62
PN_stdfloat BulletConstraint::get_applied_impulse(void) const;

905 22 set_breaking_threshold 0 4 1546 40 BulletConstraint::set_breaking_threshold 0 1 140 212
/**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */
76
inline void BulletConstraint::set_breaking_threshold(PN_stdfloat threshold);

906 22 get_breaking_threshold 0 4 1546 40 BulletConstraint::get_breaking_threshold 0 1 141 73
/**
 * Returns the applied impluse limit for breaking the constraint.
 */
72
inline PN_stdfloat BulletConstraint::get_breaking_threshold(void) const;

907 11 set_enabled 0 4 1546 29 BulletConstraint::set_enabled 0 1 142 10
/**
 *
 */
56
inline void BulletConstraint::set_enabled(bool enabled);

908 10 is_enabled 0 4 1546 28 BulletConstraint::is_enabled 0 1 143 53
/**
 * Returns TRUE if the constraint is enabled.
 */
53
inline bool BulletConstraint::is_enabled(void) const;

909 9 set_param 0 4 1546 27 BulletConstraint::set_param 0 1 144 10
/**
 *
 */
106
void BulletConstraint::set_param(BulletConstraint::ConstraintParam num, PN_stdfloat value, int axis = -1);

910 9 get_param 0 4 1546 27 BulletConstraint::get_param 0 1 145 10
/**
 *
 */
94
PN_stdfloat BulletConstraint::get_param(BulletConstraint::ConstraintParam num, int axis = -1);

911 19 BulletRigidBodyNode 0 260 1550 40 BulletRigidBodyNode::BulletRigidBodyNode 0 1 147 138
/**
 *
 */

/**
 * Do not call the copy constructor directly; instead, use make_copy() or
 * copy_subgraph() to make a copy of a node.
 */
78
explicit BulletRigidBodyNode::BulletRigidBodyNode(char const *name = "rigid");

912 8 set_mass 0 4 1550 29 BulletRigidBodyNode::set_mass 0 1 148 295
// Mass & inertia

// Mass & inertia

/**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */
53
void BulletRigidBodyNode::set_mass(PN_stdfloat mass);

913 8 get_mass 0 4 1550 29 BulletRigidBodyNode::get_mass 0 1 149 128
/**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */
54
PN_stdfloat BulletRigidBodyNode::get_mass(void) const;

914 12 get_inv_mass 0 4 1550 33 BulletRigidBodyNode::get_inv_mass 0 1 150 52
/**
 * Returns the inverse mass of a rigid body.
 */
58
PN_stdfloat BulletRigidBodyNode::get_inv_mass(void) const;

915 11 set_inertia 0 4 1550 32 BulletRigidBodyNode::set_inertia 0 1 151 591
/**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */
64
void BulletRigidBodyNode::set_inertia(LVecBase3 const &inertia);

916 11 get_inertia 0 4 1550 32 BulletRigidBodyNode::get_inertia 0 1 152 174
/**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */
54
LVector3 BulletRigidBodyNode::get_inertia(void) const;

917 26 get_inv_inertia_diag_local 0 4 1550 47 BulletRigidBodyNode::get_inv_inertia_diag_local 0 1 153 10
/**
 *
 */
69
LVector3 BulletRigidBodyNode::get_inv_inertia_diag_local(void) const;

918 28 get_inv_inertia_tensor_world 0 4 1550 49 BulletRigidBodyNode::get_inv_inertia_tensor_world 0 1 154 10
/**
 *
 */
71
LMatrix3 BulletRigidBodyNode::get_inv_inertia_tensor_world(void) const;

919 19 get_linear_velocity 0 4 1550 40 BulletRigidBodyNode::get_linear_velocity 0 1 155 36
// Velocity

// Velocity

/**
 *
 */
62
LVector3 BulletRigidBodyNode::get_linear_velocity(void) const;

920 20 get_angular_velocity 0 4 1550 41 BulletRigidBodyNode::get_angular_velocity 0 1 156 10
/**
 *
 */
63
LVector3 BulletRigidBodyNode::get_angular_velocity(void) const;

921 19 set_linear_velocity 0 4 1550 40 BulletRigidBodyNode::set_linear_velocity 0 1 157 10
/**
 *
 */
72
void BulletRigidBodyNode::set_linear_velocity(LVector3 const &velocity);

922 20 set_angular_velocity 0 4 1550 41 BulletRigidBodyNode::set_angular_velocity 0 1 158 10
/**
 *
 */
73
void BulletRigidBodyNode::set_angular_velocity(LVector3 const &velocity);

923 18 get_linear_damping 0 4 1550 39 BulletRigidBodyNode::get_linear_damping 0 1 159 34
// Damping

// Damping

/**
 *
 */
64
PN_stdfloat BulletRigidBodyNode::get_linear_damping(void) const;

924 19 get_angular_damping 0 4 1550 40 BulletRigidBodyNode::get_angular_damping 0 1 160 10
/**
 *
 */
65
PN_stdfloat BulletRigidBodyNode::get_angular_damping(void) const;

925 18 set_linear_damping 0 4 1550 39 BulletRigidBodyNode::set_linear_damping 0 1 161 10
/**
 *
 */
64
void BulletRigidBodyNode::set_linear_damping(PN_stdfloat value);

926 19 set_angular_damping 0 4 1550 40 BulletRigidBodyNode::set_angular_damping 0 1 162 10
/**
 *
 */
65
void BulletRigidBodyNode::set_angular_damping(PN_stdfloat value);

927 12 clear_forces 0 4 1550 33 BulletRigidBodyNode::clear_forces 0 1 163 21
// Forces

/**
 *
 */
45
void BulletRigidBodyNode::clear_forces(void);

928 11 apply_force 0 4 1550 32 BulletRigidBodyNode::apply_force 0 1 164 10
/**
 *
 */
81
void BulletRigidBodyNode::apply_force(LVector3 const &force, LPoint3 const &pos);

929 19 apply_central_force 0 4 1550 40 BulletRigidBodyNode::apply_central_force 0 1 165 10
/**
 *
 */
69
void BulletRigidBodyNode::apply_central_force(LVector3 const &force);

930 13 apply_impulse 0 4 1550 34 BulletRigidBodyNode::apply_impulse 0 1 166 10
/**
 *
 */
85
void BulletRigidBodyNode::apply_impulse(LVector3 const &impulse, LPoint3 const &pos);

931 21 apply_central_impulse 0 4 1550 42 BulletRigidBodyNode::apply_central_impulse 0 1 167 10
/**
 *
 */
73
void BulletRigidBodyNode::apply_central_impulse(LVector3 const &impulse);

932 12 apply_torque 0 4 1550 33 BulletRigidBodyNode::apply_torque 0 1 168 10
/**
 *
 */
63
void BulletRigidBodyNode::apply_torque(LVector3 const &torque);

933 20 apply_torque_impulse 0 4 1550 41 BulletRigidBodyNode::apply_torque_impulse 0 1 169 10
/**
 *
 */
71
void BulletRigidBodyNode::apply_torque_impulse(LVector3 const &torque);

934 15 get_total_force 0 4 1550 36 BulletRigidBodyNode::get_total_force 0 1 170 10
/**
 *
 */
58
LVector3 BulletRigidBodyNode::get_total_force(void) const;

935 16 get_total_torque 0 4 1550 37 BulletRigidBodyNode::get_total_torque 0 1 171 10
/**
 *
 */
59
LVector3 BulletRigidBodyNode::get_total_torque(void) const;

936 26 get_linear_sleep_threshold 0 4 1550 47 BulletRigidBodyNode::get_linear_sleep_threshold 0 1 172 66
// Deactivation thresholds

// Deactivation thresholds

/**
 *
 */
72
PN_stdfloat BulletRigidBodyNode::get_linear_sleep_threshold(void) const;

937 27 get_angular_sleep_threshold 0 4 1550 48 BulletRigidBodyNode::get_angular_sleep_threshold 0 1 173 10
/**
 *
 */
73
PN_stdfloat BulletRigidBodyNode::get_angular_sleep_threshold(void) const;

938 26 set_linear_sleep_threshold 0 4 1550 47 BulletRigidBodyNode::set_linear_sleep_threshold 0 1 174 10
/**
 *
 */
76
void BulletRigidBodyNode::set_linear_sleep_threshold(PN_stdfloat threshold);

939 27 set_angular_sleep_threshold 0 4 1550 48 BulletRigidBodyNode::set_angular_sleep_threshold 0 1 175 10
/**
 *
 */
77
void BulletRigidBodyNode::set_angular_sleep_threshold(PN_stdfloat threshold);

940 11 set_gravity 0 4 1550 32 BulletRigidBodyNode::set_gravity 0 1 176 34
// Gravity

// Gravity

/**
 *
 */
63
void BulletRigidBodyNode::set_gravity(LVector3 const &gravity);

941 11 get_gravity 0 4 1550 32 BulletRigidBodyNode::get_gravity 0 1 177 10
/**
 *
 */
54
LVector3 BulletRigidBodyNode::get_gravity(void) const;

942 17 get_linear_factor 0 4 1550 38 BulletRigidBodyNode::get_linear_factor 0 1 178 54
// Restrict movement

// Restrict movement

/**
 *
 */
60
LVector3 BulletRigidBodyNode::get_linear_factor(void) const;

943 18 get_angular_factor 0 4 1550 39 BulletRigidBodyNode::get_angular_factor 0 1 179 10
/**
 *
 */
61
LVector3 BulletRigidBodyNode::get_angular_factor(void) const;

944 17 set_linear_factor 0 4 1550 38 BulletRigidBodyNode::set_linear_factor 0 1 180 10
/**
 *
 */
68
void BulletRigidBodyNode::set_linear_factor(LVector3 const &factor);

945 18 set_angular_factor 0 4 1550 39 BulletRigidBodyNode::set_angular_factor 0 1 181 10
/**
 *
 */
69
void BulletRigidBodyNode::set_angular_factor(LVector3 const &factor);

946 15 pick_dirty_flag 0 4 1550 36 BulletRigidBodyNode::pick_dirty_flag 0 1 182 135
// Special

/**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */
48
bool BulletRigidBodyNode::pick_dirty_flag(void);

947 14 get_class_type 0 4 1550 35 BulletRigidBodyNode::get_class_type 0 1 183 0
60
static TypeHandle BulletRigidBodyNode::get_class_type(void);

948 14 get_class_type 0 4 1546 32 BulletConstraint::get_class_type 0 1 146 0
57
static TypeHandle BulletConstraint::get_class_type(void);

949 25 BulletConeTwistConstraint 0 260 1553 52 BulletConeTwistConstraint::BulletConeTwistConstraint 0 2 184 185 22
/**
 *
 */

/**
 *
 */
323
explicit BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a);
explicit BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b);

950 9 set_limit 0 4 1553 36 BulletConeTwistConstraint::set_limit 0 2 186 187 22
/**
 *
 */

/**
 *
 */
272
void BulletConeTwistConstraint::set_limit(int index, PN_stdfloat value);
void BulletConeTwistConstraint::set_limit(PN_stdfloat swing1, PN_stdfloat swing2, PN_stdfloat twist, PN_stdfloat softness = 1.0, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

951 11 set_damping 0 4 1553 38 BulletConeTwistConstraint::set_damping 0 1 188 10
/**
 *
 */
65
void BulletConeTwistConstraint::set_damping(PN_stdfloat damping);

952 17 get_fix_threshold 0 4 1553 44 BulletConeTwistConstraint::get_fix_threshold 0 1 189 10
/**
 *
 */
69
PN_stdfloat BulletConeTwistConstraint::get_fix_threshold(void) const;

953 17 set_fix_threshold 0 4 1553 44 BulletConeTwistConstraint::set_fix_threshold 0 1 190 10
/**
 *
 */
73
void BulletConeTwistConstraint::set_fix_threshold(PN_stdfloat threshold);

954 12 enable_motor 0 4 1553 39 BulletConeTwistConstraint::enable_motor 0 1 191 10
/**
 *
 */
58
void BulletConeTwistConstraint::enable_motor(bool enable);

955 21 set_max_motor_impulse 0 4 1553 48 BulletConeTwistConstraint::set_max_motor_impulse 0 1 192 10
/**
 *
 */
79
void BulletConeTwistConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

956 32 set_max_motor_impulse_normalized 0 4 1553 59 BulletConeTwistConstraint::set_max_motor_impulse_normalized 0 1 193 10
/**
 *
 */
90
void BulletConeTwistConstraint::set_max_motor_impulse_normalized(PN_stdfloat max_impulse);

957 16 set_motor_target 0 4 1553 43 BulletConeTwistConstraint::set_motor_target 0 1 194 10
/**
 *
 */
74
void BulletConeTwistConstraint::set_motor_target(LQuaternion const &quat);

958 36 set_motor_target_in_constraint_space 0 4 1553 63 BulletConeTwistConstraint::set_motor_target_in_constraint_space 0 1 195 10
/**
 *
 */
94
void BulletConeTwistConstraint::set_motor_target_in_constraint_space(LQuaternion const &quat);

959 10 set_frames 0 4 1553 37 BulletConeTwistConstraint::set_frames 0 1 196 10
/**
 *
 */
99
void BulletConeTwistConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

960 11 get_frame_a 0 4 1553 38 BulletConeTwistConstraint::get_frame_a 0 1 197 10
/**
 *
 */
84
ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_a(void) const;

961 11 get_frame_b 0 4 1553 38 BulletConeTwistConstraint::get_frame_b 0 1 198 10
/**
 *
 */
84
ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_b(void) const;

962 14 get_class_type 0 4 1553 41 BulletConeTwistConstraint::get_class_type 0 1 199 0
66
static TypeHandle BulletConeTwistConstraint::get_class_type(void);

963 20 ~BulletManifoldPoint 0 516 1554 41 BulletManifoldPoint::~BulletManifoldPoint 0 0 0
58
BulletManifoldPoint::~BulletManifoldPoint(void) = default;

964 13 get_life_time 0 4 1554 34 BulletManifoldPoint::get_life_time 0 1 200 10
/**
 *
 */
51
int BulletManifoldPoint::get_life_time(void) const;

965 12 get_distance 0 4 1554 33 BulletManifoldPoint::get_distance 0 1 201 10
/**
 *
 */
58
PN_stdfloat BulletManifoldPoint::get_distance(void) const;

966 19 get_applied_impulse 0 4 1554 40 BulletManifoldPoint::get_applied_impulse 0 1 202 10
/**
 *
 */
65
PN_stdfloat BulletManifoldPoint::get_applied_impulse(void) const;

967 23 get_position_world_on_a 0 4 1554 44 BulletManifoldPoint::get_position_world_on_a 0 1 203 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_a(void) const;

968 23 get_position_world_on_b 0 4 1554 44 BulletManifoldPoint::get_position_world_on_b 0 1 204 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_b(void) const;

969 21 get_normal_world_on_b 0 4 1554 42 BulletManifoldPoint::get_normal_world_on_b 0 1 205 10
/**
 *
 */
64
LVector3 BulletManifoldPoint::get_normal_world_on_b(void) const;

970 17 get_local_point_a 0 4 1554 38 BulletManifoldPoint::get_local_point_a 0 1 206 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_a(void) const;

971 17 get_local_point_b 0 4 1554 38 BulletManifoldPoint::get_local_point_b 0 1 207 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_b(void) const;

972 12 get_part_id0 0 4 1554 33 BulletManifoldPoint::get_part_id0 0 1 208 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id0(void) const;

973 12 get_part_id1 0 4 1554 33 BulletManifoldPoint::get_part_id1 0 1 209 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id1(void) const;

974 10 get_index0 0 4 1554 31 BulletManifoldPoint::get_index0 0 1 210 10
/**
 *
 */
48
int BulletManifoldPoint::get_index0(void) const;

975 10 get_index1 0 4 1554 31 BulletManifoldPoint::get_index1 0 1 211 10
/**
 *
 */
48
int BulletManifoldPoint::get_index1(void) const;

976 32 set_lateral_friction_initialized 0 4 1554 53 BulletManifoldPoint::set_lateral_friction_initialized 0 1 212 10
/**
 *
 */
71
void BulletManifoldPoint::set_lateral_friction_initialized(bool value);

977 25 set_lateral_friction_dir1 0 4 1554 46 BulletManifoldPoint::set_lateral_friction_dir1 0 1 213 10
/**
 *
 */
74
void BulletManifoldPoint::set_lateral_friction_dir1(LVecBase3 const &dir);

978 25 set_lateral_friction_dir2 0 4 1554 46 BulletManifoldPoint::set_lateral_friction_dir2 0 1 214 10
/**
 *
 */
74
void BulletManifoldPoint::set_lateral_friction_dir2(LVecBase3 const &dir);

979 19 set_contact_motion1 0 4 1554 40 BulletManifoldPoint::set_contact_motion1 0 1 215 10
/**
 *
 */
65
void BulletManifoldPoint::set_contact_motion1(PN_stdfloat value);

980 19 set_contact_motion2 0 4 1554 40 BulletManifoldPoint::set_contact_motion2 0 1 216 10
/**
 *
 */
65
void BulletManifoldPoint::set_contact_motion2(PN_stdfloat value);

981 21 set_combined_friction 0 4 1554 42 BulletManifoldPoint::set_combined_friction 0 1 217 10
/**
 *
 */
67
void BulletManifoldPoint::set_combined_friction(PN_stdfloat value);

982 24 set_combined_restitution 0 4 1554 45 BulletManifoldPoint::set_combined_restitution 0 1 218 10
/**
 *
 */
70
void BulletManifoldPoint::set_combined_restitution(PN_stdfloat value);

983 19 set_applied_impulse 0 4 1554 40 BulletManifoldPoint::set_applied_impulse 0 1 219 10
/**
 *
 */
65
void BulletManifoldPoint::set_applied_impulse(PN_stdfloat value);

984 28 set_applied_impulse_lateral1 0 4 1554 49 BulletManifoldPoint::set_applied_impulse_lateral1 0 1 220 10
/**
 *
 */
74
void BulletManifoldPoint::set_applied_impulse_lateral1(PN_stdfloat value);

985 28 set_applied_impulse_lateral2 0 4 1554 49 BulletManifoldPoint::set_applied_impulse_lateral2 0 1 221 10
/**
 *
 */
74
void BulletManifoldPoint::set_applied_impulse_lateral2(PN_stdfloat value);

986 16 set_contact_cfm1 0 4 1554 37 BulletManifoldPoint::set_contact_cfm1 0 1 222 10
/**
 *
 */
62
void BulletManifoldPoint::set_contact_cfm1(PN_stdfloat value);

987 16 set_contact_cfm2 0 4 1554 37 BulletManifoldPoint::set_contact_cfm2 0 1 223 10
/**
 *
 */
62
void BulletManifoldPoint::set_contact_cfm2(PN_stdfloat value);

988 32 get_lateral_friction_initialized 0 4 1554 53 BulletManifoldPoint::get_lateral_friction_initialized 0 1 224 10
/**
 *
 */
71
bool BulletManifoldPoint::get_lateral_friction_initialized(void) const;

989 25 get_lateral_friction_dir1 0 4 1554 46 BulletManifoldPoint::get_lateral_friction_dir1 0 1 225 10
/**
 *
 */
68
LVector3 BulletManifoldPoint::get_lateral_friction_dir1(void) const;

990 25 get_lateral_friction_dir2 0 4 1554 46 BulletManifoldPoint::get_lateral_friction_dir2 0 1 226 10
/**
 *
 */
68
LVector3 BulletManifoldPoint::get_lateral_friction_dir2(void) const;

991 19 get_contact_motion1 0 4 1554 40 BulletManifoldPoint::get_contact_motion1 0 1 227 10
/**
 *
 */
65
PN_stdfloat BulletManifoldPoint::get_contact_motion1(void) const;

992 19 get_contact_motion2 0 4 1554 40 BulletManifoldPoint::get_contact_motion2 0 1 228 10
/**
 *
 */
65
PN_stdfloat BulletManifoldPoint::get_contact_motion2(void) const;

993 21 get_combined_friction 0 4 1554 42 BulletManifoldPoint::get_combined_friction 0 1 229 10
/**
 *
 */
67
PN_stdfloat BulletManifoldPoint::get_combined_friction(void) const;

994 24 get_combined_restitution 0 4 1554 45 BulletManifoldPoint::get_combined_restitution 0 1 230 10
/**
 *
 */
70
PN_stdfloat BulletManifoldPoint::get_combined_restitution(void) const;

995 28 get_applied_impulse_lateral1 0 4 1554 49 BulletManifoldPoint::get_applied_impulse_lateral1 0 1 231 10
/**
 *
 */
74
PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral1(void) const;

996 28 get_applied_impulse_lateral2 0 4 1554 49 BulletManifoldPoint::get_applied_impulse_lateral2 0 1 232 10
/**
 *
 */
74
PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral2(void) const;

997 16 get_contact_cfm1 0 4 1554 37 BulletManifoldPoint::get_contact_cfm1 0 1 233 10
/**
 *
 */
62
PN_stdfloat BulletManifoldPoint::get_contact_cfm1(void) const;

998 16 get_contact_cfm2 0 4 1554 37 BulletManifoldPoint::get_contact_cfm2 0 1 234 10
/**
 *
 */
62
PN_stdfloat BulletManifoldPoint::get_contact_cfm2(void) const;

999 25 BulletContactCallbackData 0 260 1555 52 BulletContactCallbackData::BulletContactCallbackData 0 1 235 10
/**
 *
 */
172
inline explicit BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1);

1000 12 get_manifold 0 4 1555 39 BulletContactCallbackData::get_manifold 0 1 236 10
/**
 *
 */
80
inline BulletManifoldPoint &BulletContactCallbackData::get_manifold(void) const;

1001 9 get_node0 0 4 1555 36 BulletContactCallbackData::get_node0 0 1 237 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node0(void) const;

1002 9 get_node1 0 4 1555 36 BulletContactCallbackData::get_node1 0 1 238 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node1(void) const;

1003 12 get_part_id0 0 4 1555 39 BulletContactCallbackData::get_part_id0 0 1 239 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id0(void) const;

1004 12 get_part_id1 0 4 1555 39 BulletContactCallbackData::get_part_id1 0 1 240 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id1(void) const;

1005 10 get_index0 0 4 1555 37 BulletContactCallbackData::get_index0 0 1 241 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index0(void) const;

1006 10 get_index1 0 4 1555 37 BulletContactCallbackData::get_index1 0 1 242 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index1(void) const;

1007 14 get_class_type 0 4 1555 41 BulletContactCallbackData::get_class_type 0 1 243 0
66
static TypeHandle BulletContactCallbackData::get_class_type(void);

1008 18 get_manifold_point 0 4 1557 33 BulletContact::get_manifold_point 0 1 244 10
/**
 *
 */
67
inline BulletManifoldPoint BulletContact::get_manifold_point(void);

1009 9 get_node0 0 4 1557 24 BulletContact::get_node0 0 1 245 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node0(void) const;

1010 9 get_node1 0 4 1557 24 BulletContact::get_node1 0 1 246 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node1(void) const;

1011 8 get_idx0 0 4 1557 23 BulletContact::get_idx0 0 1 247 10
/**
 *
 */
47
inline int BulletContact::get_idx0(void) const;

1012 8 get_idx1 0 4 1557 23 BulletContact::get_idx1 0 1 248 10
/**
 *
 */
47
inline int BulletContact::get_idx1(void) const;

1013 12 get_part_id0 0 4 1557 27 BulletContact::get_part_id0 0 1 249 10
/**
 *
 */
51
inline int BulletContact::get_part_id0(void) const;

1014 12 get_part_id1 0 4 1557 27 BulletContact::get_part_id1 0 1 250 10
/**
 *
 */
51
inline int BulletContact::get_part_id1(void) const;

1015 14 ~BulletContact 0 516 1557 29 BulletContact::~BulletContact 0 0 0
36
BulletContact::~BulletContact(void);

1016 31 upcast_to_ContactResultCallback 0 12 1558 52 BulletContactResult::upcast_to_ContactResultCallback 0 1 253 56
upcast from BulletContactResult to ContactResultCallback
100
btCollisionWorld::ContactResultCallback *BulletContactResult::upcast_to_ContactResultCallback(void);

1017 53 downcast_ContactResultCallback_to_BulletContactResult 0 8 0 53 downcast_ContactResultCallback_to_BulletContactResult 0 0 58
downcast from ContactResultCallback to BulletContactResult
122
BulletContactResult *downcast_ContactResultCallback_to_BulletContactResult(btCollisionWorld::ContactResultCallback *this);

1018 16 get_num_contacts 0 4 1558 37 BulletContactResult::get_num_contacts 0 1 251 10
/**
 *
 */
61
inline int BulletContactResult::get_num_contacts(void) const;

1019 11 get_contact 0 4 1558 32 BulletContactResult::get_contact 0 1 252 10
/**
 *
 */
63
inline BulletContact BulletContactResult::get_contact(int idx);

1020 20 ~BulletContactResult 0 516 1558 41 BulletContactResult::~BulletContactResult 0 0 0
48
BulletContactResult::~BulletContactResult(void);

1021 15 BulletDebugNode 0 260 1560 32 BulletDebugNode::BulletDebugNode 0 2 254 255 10
/**
 *
 */
146
explicit BulletDebugNode::BulletDebugNode(char const *name = "debug");
inline BulletDebugNode::BulletDebugNode(BulletDebugNode const &) = default;

1022 17 draw_mask_changed 0 6 1560 34 BulletDebugNode::draw_mask_changed 0 1 256 10
/**
 *
 */
54
virtual void BulletDebugNode::draw_mask_changed(void);

1023 14 show_wireframe 0 4 1560 31 BulletDebugNode::show_wireframe 0 1 257 64
/**
 * If true, displays collision shapes in wireframe mode.
 */
55
inline void BulletDebugNode::show_wireframe(bool show);

1024 16 show_constraints 0 4 1560 33 BulletDebugNode::show_constraints 0 1 258 102
/**
 * If true, display limits defined for constraints, e.g. a pivot axis or maximum
 * amplitude.
 */
57
inline void BulletDebugNode::show_constraints(bool show);

1025 19 show_bounding_boxes 0 4 1560 36 BulletDebugNode::show_bounding_boxes 0 1 259 69
/**
 * If true, displays axis aligned bounding boxes for objects.
 */
60
inline void BulletDebugNode::show_bounding_boxes(bool show);

1026 12 show_normals 0 4 1560 29 BulletDebugNode::show_normals 0 1 260 84
/**
 * If true, displays normal vectors for triangle mesh and heightfield faces.
 */
53
inline void BulletDebugNode::show_normals(bool show);

1027 18 get_show_wireframe 0 4 1560 35 BulletDebugNode::get_show_wireframe 0 1 261 10
/**
 *
 */
60
inline bool BulletDebugNode::get_show_wireframe(void) const;

1028 20 get_show_constraints 0 4 1560 37 BulletDebugNode::get_show_constraints 0 1 262 10
/**
 *
 */
62
inline bool BulletDebugNode::get_show_constraints(void) const;

1029 23 get_show_bounding_boxes 0 4 1560 40 BulletDebugNode::get_show_bounding_boxes 0 1 263 10
/**
 *
 */
65
inline bool BulletDebugNode::get_show_bounding_boxes(void) const;

1030 16 get_show_normals 0 4 1560 33 BulletDebugNode::get_show_normals 0 1 264 10
/**
 *
 */
58
inline bool BulletDebugNode::get_show_normals(void) const;

1031 14 get_class_type 0 4 1560 31 BulletDebugNode::get_class_type 0 1 265 0
56
static TypeHandle BulletDebugNode::get_class_type(void);

1032 15 BulletGhostNode 0 260 1561 32 BulletGhostNode::BulletGhostNode 0 1 266 138
/**
 *
 */

/**
 * Do not call the copy constructor directly; instead, use make_copy() or
 * copy_subgraph() to make a copy of a node.
 */
70
explicit BulletGhostNode::BulletGhostNode(char const *name = "ghost");

1033 25 get_num_overlapping_nodes 0 4 1561 42 BulletGhostNode::get_num_overlapping_nodes 0 1 267 58
// Overlapping

// Overlapping

// Overlapping

/**
 *
 */
59
int BulletGhostNode::get_num_overlapping_nodes(void) const;

1034 20 get_overlapping_node 0 4 1561 37 BulletGhostNode::get_overlapping_node 0 1 268 10
/**
 *
 */
64
PandaNode *BulletGhostNode::get_overlapping_node(int idx) const;

1035 14 get_class_type 0 4 1561 31 BulletGhostNode::get_class_type 0 1 269 0
56
static TypeHandle BulletGhostNode::get_class_type(void);

1036 26 ~BulletSoftBodyNodeElement 0 516 1562 53 BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement 0 0 10
/**
 *
 */
67
inline BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement(void);

1037 5 empty 0 4 1562 32 BulletSoftBodyNodeElement::empty 0 1 271 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletSoftBodyNodeElement BulletSoftBodyNodeElement::empty(void);

1038 7 get_pos 0 4 1562 34 BulletSoftBodyNodeElement::get_pos 0 1 272 10
/**
 *
 */
55
LPoint3 BulletSoftBodyNodeElement::get_pos(void) const;

1039 12 get_velocity 0 4 1562 39 BulletSoftBodyNodeElement::get_velocity 0 1 273 10
/**
 *
 */
61
LVector3 BulletSoftBodyNodeElement::get_velocity(void) const;

1040 10 get_normal 0 4 1562 37 BulletSoftBodyNodeElement::get_normal 0 1 274 10
/**
 *
 */
59
LVector3 BulletSoftBodyNodeElement::get_normal(void) const;

1041 12 get_inv_mass 0 4 1562 39 BulletSoftBodyNodeElement::get_inv_mass 0 1 275 10
/**
 *
 */
64
PN_stdfloat BulletSoftBodyNodeElement::get_inv_mass(void) const;

1042 8 get_area 0 4 1562 35 BulletSoftBodyNodeElement::get_area 0 1 276 10
/**
 *
 */
60
PN_stdfloat BulletSoftBodyNodeElement::get_area(void) const;

1043 11 is_attached 0 4 1562 38 BulletSoftBodyNodeElement::is_attached 0 1 277 10
/**
 *
 */
55
int BulletSoftBodyNodeElement::is_attached(void) const;

1044 25 BulletSoftBodyNodeElement 0 260 1562 52 BulletSoftBodyNodeElement::BulletSoftBodyNodeElement 0 1 270 10
/**
 *
 */
105
inline BulletSoftBodyNodeElement::BulletSoftBodyNodeElement(BulletSoftBodyNodeElement const &) = default;

1045 7 get_cfg 0 4 1563 27 BulletSoftBodyNode::get_cfg 0 1 278 10
/**
 *
 */
55
BulletSoftBodyConfig BulletSoftBodyNode::get_cfg(void);

1046 14 get_world_info 0 4 1563 34 BulletSoftBodyNode::get_world_info 0 1 279 10
/**
 *
 */
65
BulletSoftBodyWorldInfo BulletSoftBodyNode::get_world_info(void);

1047 28 generate_bending_constraints 0 4 1563 48 BulletSoftBodyNode::generate_bending_constraints 0 1 280 10
/**
 *
 */
112
void BulletSoftBodyNode::generate_bending_constraints(int distance, BulletSoftBodyMaterial *material = nullptr);

1048 21 randomize_constraints 0 4 1563 41 BulletSoftBodyNode::randomize_constraints 0 1 281 10
/**
 *
 */
53
void BulletSoftBodyNode::randomize_constraints(void);

1049 15 set_volume_mass 0 4 1563 35 BulletSoftBodyNode::set_volume_mass 0 1 282 36
// Mass, volume, density

/**
 *
 */
59
void BulletSoftBodyNode::set_volume_mass(PN_stdfloat mass);

1050 18 set_volume_density 0 4 1563 38 BulletSoftBodyNode::set_volume_density 0 1 283 10
/**
 *
 */
65
void BulletSoftBodyNode::set_volume_density(PN_stdfloat density);

1051 14 set_total_mass 0 4 1563 34 BulletSoftBodyNode::set_total_mass 0 1 284 10
/**
 *
 */
82
void BulletSoftBodyNode::set_total_mass(PN_stdfloat mass, bool fromfaces = false);

1052 17 set_total_density 0 4 1563 37 BulletSoftBodyNode::set_total_density 0 1 285 10
/**
 *
 */
64
void BulletSoftBodyNode::set_total_density(PN_stdfloat density);

1053 8 set_mass 0 4 1563 28 BulletSoftBodyNode::set_mass 0 1 286 10
/**
 *
 */
62
void BulletSoftBodyNode::set_mass(int node, PN_stdfloat mass);

1054 8 get_mass 0 4 1563 28 BulletSoftBodyNode::get_mass 0 1 287 10
/**
 *
 */
57
PN_stdfloat BulletSoftBodyNode::get_mass(int node) const;

1055 14 get_total_mass 0 4 1563 34 BulletSoftBodyNode::get_total_mass 0 1 288 10
/**
 *
 */
59
PN_stdfloat BulletSoftBodyNode::get_total_mass(void) const;

1056 10 get_volume 0 4 1563 30 BulletSoftBodyNode::get_volume 0 1 289 10
/**
 *
 */
55
PN_stdfloat BulletSoftBodyNode::get_volume(void) const;

1057 9 add_force 0 4 1563 29 BulletSoftBodyNode::add_force 0 2 290 291 32
// Force

/**
 *
 */

/**
 *
 */
127
void BulletSoftBodyNode::add_force(LVector3 const &force);
void BulletSoftBodyNode::add_force(LVector3 const &force, int node);

1058 12 set_velocity 0 4 1563 32 BulletSoftBodyNode::set_velocity 0 1 292 10
/**
 *
 */
64
void BulletSoftBodyNode::set_velocity(LVector3 const &velocity);

1059 12 add_velocity 0 4 1563 32 BulletSoftBodyNode::add_velocity 0 2 293 294 22
/**
 *
 */

/**
 *
 */
139
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity);
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity, int node);

1060 17 set_wind_velocity 0 4 1563 37 BulletSoftBodyNode::set_wind_velocity 0 1 295 10
/**
 *
 */
69
void BulletSoftBodyNode::set_wind_velocity(LVector3 const &velocity);

1061 17 get_wind_velocity 0 4 1563 37 BulletSoftBodyNode::get_wind_velocity 0 1 296 10
/**
 *
 */
59
LVector3 BulletSoftBodyNode::get_wind_velocity(void) const;

1062 8 set_pose 0 4 1563 28 BulletSoftBodyNode::set_pose 0 1 297 10
/**
 *
 */
61
void BulletSoftBodyNode::set_pose(bool bvolume, bool bframe);

1063 8 get_aabb 0 4 1563 28 BulletSoftBodyNode::get_aabb 0 1 298 10
/**
 *
 */
53
BoundingBox BulletSoftBodyNode::get_aabb(void) const;

1064 17 generate_clusters 0 4 1563 37 BulletSoftBodyNode::generate_clusters 0 1 299 22
// Cluster

/**
 *
 */
76
void BulletSoftBodyNode::generate_clusters(int k, int maxiterations = 8192);

1065 15 release_cluster 0 4 1563 35 BulletSoftBodyNode::release_cluster 0 1 300 10
/**
 *
 */
52
void BulletSoftBodyNode::release_cluster(int index);

1066 16 release_clusters 0 4 1563 36 BulletSoftBodyNode::release_clusters 0 1 301 10
/**
 *
 */
48
void BulletSoftBodyNode::release_clusters(void);

1067 16 get_num_clusters 0 4 1563 36 BulletSoftBodyNode::get_num_clusters 0 1 302 10
/**
 *
 */
53
int BulletSoftBodyNode::get_num_clusters(void) const;

1068 11 cluster_com 0 4 1563 31 BulletSoftBodyNode::cluster_com 0 1 303 10
/**
 *
 */
61
LVecBase3 BulletSoftBodyNode::cluster_com(int cluster) const;

1069 9 link_geom 0 4 1563 29 BulletSoftBodyNode::link_geom 0 1 304 24
// Rendering

/**
 *
 */
47
void BulletSoftBodyNode::link_geom(Geom *geom);

1070 11 unlink_geom 0 4 1563 31 BulletSoftBodyNode::unlink_geom 0 1 305 10
/**
 *
 */
43
void BulletSoftBodyNode::unlink_geom(void);

1071 10 link_curve 0 4 1563 30 BulletSoftBodyNode::link_curve 0 1 306 10
/**
 *
 */
64
void BulletSoftBodyNode::link_curve(NurbsCurveEvaluator *curve);

1072 12 unlink_curve 0 4 1563 32 BulletSoftBodyNode::unlink_curve 0 1 307 10
/**
 *
 */
44
void BulletSoftBodyNode::unlink_curve(void);

1073 12 link_surface 0 4 1563 32 BulletSoftBodyNode::link_surface 0 1 308 10
/**
 *
 */
70
void BulletSoftBodyNode::link_surface(NurbsSurfaceEvaluator *surface);

1074 14 unlink_surface 0 4 1563 34 BulletSoftBodyNode::unlink_surface 0 1 309 10
/**
 *
 */
46
void BulletSoftBodyNode::unlink_surface(void);

1075 13 append_anchor 0 4 1563 33 BulletSoftBodyNode::append_anchor 0 2 310 311 34
// Anchors

/**
 *
 */

/**
 *
 */
220
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false);
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false);

1076 19 append_linear_joint 0 4 1563 39 BulletSoftBodyNode::append_linear_joint 0 2 312 313 32
// Links

/**
 *
 */

/**
 *
 */
310
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);

1077 20 append_angular_joint 0 4 1563 40 BulletSoftBodyNode::append_angular_joint 0 1 314 10
/**
 *
 */
203
void BulletSoftBodyNode::append_angular_joint(BulletBodyNode *body, LVector3 const &axis, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0, BulletSoftBodyControl *control = nullptr);

1078 17 get_num_materials 0 4 1563 37 BulletSoftBodyNode::get_num_materials 0 1 315 52
// Materials

// Materials

// Materials

/**
 *
 */
54
int BulletSoftBodyNode::get_num_materials(void) const;

1079 12 get_material 0 4 1563 32 BulletSoftBodyNode::get_material 0 1 316 10
/**
 *
 */
71
BulletSoftBodyMaterial BulletSoftBodyNode::get_material(int idx) const;

1080 15 append_material 0 4 1563 35 BulletSoftBodyNode::append_material 0 1 317 10
/**
 *
 */
65
BulletSoftBodyMaterial BulletSoftBodyNode::append_material(void);

1081 13 get_num_nodes 0 4 1563 33 BulletSoftBodyNode::get_num_nodes 0 1 318 40
// Nodes

// Nodes

// Nodes

/**
 *
 */
50
int BulletSoftBodyNode::get_num_nodes(void) const;

1082 8 get_node 0 4 1563 28 BulletSoftBodyNode::get_node 0 1 319 10
/**
 *
 */
70
BulletSoftBodyNodeElement BulletSoftBodyNode::get_node(int idx) const;

1083 22 get_closest_node_index 0 4 1563 42 BulletSoftBodyNode::get_closest_node_index 0 1 320 212
/**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */
76
int BulletSoftBodyNode::get_closest_node_index(LVecBase3 point, bool local);

1084 9 make_rope 0 4 1563 29 BulletSoftBodyNode::make_rope 0 1 321 22
// Factory

/**
 *
 */
161
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_rope(BulletSoftBodyWorldInfo &info, LPoint3 const &from, LPoint3 const &to, int res, int fixeds);

1085 10 make_patch 0 4 1563 30 BulletSoftBodyNode::make_patch 0 1 322 10
/**
 *
 */
248
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_patch(BulletSoftBodyWorldInfo &info, LPoint3 const &corner00, LPoint3 const &corner10, LPoint3 const &corner01, LPoint3 const &corner11, int resx, int resy, int fixeds, bool gendiags);

1086 14 make_ellipsoid 0 4 1563 34 BulletSoftBodyNode::make_ellipsoid 0 1 323 10
/**
 *
 */
162
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_ellipsoid(BulletSoftBodyWorldInfo &info, LPoint3 const &center, LVecBase3 const &radius, int res);

1087 13 make_tri_mesh 0 4 1563 33 BulletSoftBodyNode::make_tri_mesh 0 2 324 325 22
/**
 *
 */

/**
 *
 */
334
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true);

1088 13 make_tet_mesh 0 4 1563 33 BulletSoftBodyNode::make_tet_mesh 0 2 326 327 22
/**
 *
 */

/**
 *
 */
325
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node);

1089 21 ~BulletSoftBodyConfig 0 516 1564 43 BulletSoftBodyConfig::~BulletSoftBodyConfig 0 0 10
/**
 *
 */
57
inline BulletSoftBodyConfig::~BulletSoftBodyConfig(void);

1090 25 clear_all_collision_flags 0 4 1564 47 BulletSoftBodyConfig::clear_all_collision_flags 0 1 330 10
/**
 *
 */
59
void BulletSoftBodyConfig::clear_all_collision_flags(void);

1091 18 set_collision_flag 0 4 1564 40 BulletSoftBodyConfig::set_collision_flag 0 1 331 10
/**
 *
 */
100
void BulletSoftBodyConfig::set_collision_flag(BulletSoftBodyConfig::CollisionFlag flag, bool value);

1092 18 get_collision_flag 0 4 1564 40 BulletSoftBodyConfig::get_collision_flag 0 1 332 10
/**
 *
 */
94
bool BulletSoftBodyConfig::get_collision_flag(BulletSoftBodyConfig::CollisionFlag flag) const;

1093 14 set_aero_model 0 4 1564 36 BulletSoftBodyConfig::set_aero_model 0 1 333 10
/**
 *
 */
81
void BulletSoftBodyConfig::set_aero_model(BulletSoftBodyConfig::AeroModel value);

1094 14 get_aero_model 0 4 1564 36 BulletSoftBodyConfig::get_aero_model 0 1 334 10
/**
 *
 */
81
BulletSoftBodyConfig::AeroModel BulletSoftBodyConfig::get_aero_model(void) const;

1095 32 set_velocities_correction_factor 0 4 1564 54 BulletSoftBodyConfig::set_velocities_correction_factor 0 1 335 36
/**
 * Setter for property kVCF.
 */
79
void BulletSoftBodyConfig::set_velocities_correction_factor(PN_stdfloat value);

1096 23 set_damping_coefficient 0 4 1564 45 BulletSoftBodyConfig::set_damping_coefficient 0 1 336 35
/**
 * Setter for property kDP.
 */
70
void BulletSoftBodyConfig::set_damping_coefficient(PN_stdfloat value);

1097 20 set_drag_coefficient 0 4 1564 42 BulletSoftBodyConfig::set_drag_coefficient 0 1 337 35
/**
 * Setter for property kDG.
 */
67
void BulletSoftBodyConfig::set_drag_coefficient(PN_stdfloat value);

1098 20 set_lift_coefficient 0 4 1564 42 BulletSoftBodyConfig::set_lift_coefficient 0 1 338 35
/**
 * Setter for property kLF.
 */
67
void BulletSoftBodyConfig::set_lift_coefficient(PN_stdfloat value);

1099 24 set_pressure_coefficient 0 4 1564 46 BulletSoftBodyConfig::set_pressure_coefficient 0 1 339 35
/**
 * Setter for property kPR.
 */
71
void BulletSoftBodyConfig::set_pressure_coefficient(PN_stdfloat value);

1100 35 set_volume_conservation_coefficient 0 4 1564 57 BulletSoftBodyConfig::set_volume_conservation_coefficient 0 1 340 35
/**
 * Setter for property kVC.
 */
82
void BulletSoftBodyConfig::set_volume_conservation_coefficient(PN_stdfloat value);

1101 32 set_dynamic_friction_coefficient 0 4 1564 54 BulletSoftBodyConfig::set_dynamic_friction_coefficient 0 1 341 35
/**
 * Setter for property kDF.
 */
79
void BulletSoftBodyConfig::set_dynamic_friction_coefficient(PN_stdfloat value);

1102 29 set_pose_matching_coefficient 0 4 1564 51 BulletSoftBodyConfig::set_pose_matching_coefficient 0 1 342 35
/**
 * Setter for property kMT.
 */
76
void BulletSoftBodyConfig::set_pose_matching_coefficient(PN_stdfloat value);

1103 27 set_rigid_contacts_hardness 0 4 1564 49 BulletSoftBodyConfig::set_rigid_contacts_hardness 0 1 343 36
/**
 * Setter for property kCHR.
 */
74
void BulletSoftBodyConfig::set_rigid_contacts_hardness(PN_stdfloat value);

1104 29 set_kinetic_contacts_hardness 0 4 1564 51 BulletSoftBodyConfig::set_kinetic_contacts_hardness 0 1 344 36
/**
 * Setter for property kKHR.
 */
76
void BulletSoftBodyConfig::set_kinetic_contacts_hardness(PN_stdfloat value);

1105 26 set_soft_contacts_hardness 0 4 1564 48 BulletSoftBodyConfig::set_soft_contacts_hardness 0 1 345 36
/**
 * Setter for property kSHR.
 */
73
void BulletSoftBodyConfig::set_soft_contacts_hardness(PN_stdfloat value);

1106 20 set_anchors_hardness 0 4 1564 42 BulletSoftBodyConfig::set_anchors_hardness 0 1 346 36
/**
 * Setter for property kAHR.
 */
67
void BulletSoftBodyConfig::set_anchors_hardness(PN_stdfloat value);

1107 26 set_soft_vs_rigid_hardness 0 4 1564 48 BulletSoftBodyConfig::set_soft_vs_rigid_hardness 0 1 347 40
/**
 * Setter for property kSRHR_CL.
 */
73
void BulletSoftBodyConfig::set_soft_vs_rigid_hardness(PN_stdfloat value);

1108 28 set_soft_vs_kinetic_hardness 0 4 1564 50 BulletSoftBodyConfig::set_soft_vs_kinetic_hardness 0 1 348 40
/**
 * Setter for property kSKHR_CL.
 */
75
void BulletSoftBodyConfig::set_soft_vs_kinetic_hardness(PN_stdfloat value);

1109 25 set_soft_vs_soft_hardness 0 4 1564 47 BulletSoftBodyConfig::set_soft_vs_soft_hardness 0 1 349 40
/**
 * Setter for property kSSHR_CL.
 */
72
void BulletSoftBodyConfig::set_soft_vs_soft_hardness(PN_stdfloat value);

1110 31 set_soft_vs_rigid_impulse_split 0 4 1564 53 BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split 0 1 350 43
/**
 * Setter for property kSR_SPLT_CL.
 */
78
void BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split(PN_stdfloat value);

1111 33 set_soft_vs_kinetic_impulse_split 0 4 1564 55 BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split 0 1 351 43
/**
 * Setter for property kSK_SPLT_CL.
 */
80
void BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split(PN_stdfloat value);

1112 30 set_soft_vs_soft_impulse_split 0 4 1564 52 BulletSoftBodyConfig::set_soft_vs_soft_impulse_split 0 1 352 43
/**
 * Setter for property kSS_SPLT_CL.
 */
77
void BulletSoftBodyConfig::set_soft_vs_soft_impulse_split(PN_stdfloat value);

1113 13 set_maxvolume 0 4 1564 35 BulletSoftBodyConfig::set_maxvolume 0 1 353 41
/**
 * Setter for property maxvolume.
 */
60
void BulletSoftBodyConfig::set_maxvolume(PN_stdfloat value);

1114 13 set_timescale 0 4 1564 35 BulletSoftBodyConfig::set_timescale 0 1 354 41
/**
 * Setter for property timescale.
 */
60
void BulletSoftBodyConfig::set_timescale(PN_stdfloat value);

1115 31 set_positions_solver_iterations 0 4 1564 53 BulletSoftBodyConfig::set_positions_solver_iterations 0 1 355 43
/**
 * Setter for property piterations.
 */
70
void BulletSoftBodyConfig::set_positions_solver_iterations(int value);

1116 32 set_velocities_solver_iterations 0 4 1564 54 BulletSoftBodyConfig::set_velocities_solver_iterations 0 1 356 43
/**
 * Setter for property viterations.
 */
71
void BulletSoftBodyConfig::set_velocities_solver_iterations(int value);

1117 27 set_drift_solver_iterations 0 4 1564 49 BulletSoftBodyConfig::set_drift_solver_iterations 0 1 357 43
/**
 * Setter for property diterations.
 */
66
void BulletSoftBodyConfig::set_drift_solver_iterations(int value);

1118 29 set_cluster_solver_iterations 0 4 1564 51 BulletSoftBodyConfig::set_cluster_solver_iterations 0 1 358 43
/**
 * Setter for property citerations.
 */
68
void BulletSoftBodyConfig::set_cluster_solver_iterations(int value);

1119 32 get_velocities_correction_factor 0 4 1564 54 BulletSoftBodyConfig::get_velocities_correction_factor 0 1 359 36
/**
 * Getter for property kVCF.
 */
79
PN_stdfloat BulletSoftBodyConfig::get_velocities_correction_factor(void) const;

1120 23 get_damping_coefficient 0 4 1564 45 BulletSoftBodyConfig::get_damping_coefficient 0 1 360 35
/**
 * Getter for property kDP.
 */
70
PN_stdfloat BulletSoftBodyConfig::get_damping_coefficient(void) const;

1121 20 get_drag_coefficient 0 4 1564 42 BulletSoftBodyConfig::get_drag_coefficient 0 1 361 35
/**
 * Getter for property kDG.
 */
67
PN_stdfloat BulletSoftBodyConfig::get_drag_coefficient(void) const;

1122 20 get_lift_coefficient 0 4 1564 42 BulletSoftBodyConfig::get_lift_coefficient 0 1 362 35
/**
 * Getter for property kLF.
 */
67
PN_stdfloat BulletSoftBodyConfig::get_lift_coefficient(void) const;

1123 24 get_pressure_coefficient 0 4 1564 46 BulletSoftBodyConfig::get_pressure_coefficient 0 1 363 35
/**
 * Getter for property kPR.
 */
71
PN_stdfloat BulletSoftBodyConfig::get_pressure_coefficient(void) const;

1124 35 get_volume_conservation_coefficient 0 4 1564 57 BulletSoftBodyConfig::get_volume_conservation_coefficient 0 1 364 35
/**
 * Getter for property kVC.
 */
82
PN_stdfloat BulletSoftBodyConfig::get_volume_conservation_coefficient(void) const;

1125 32 get_dynamic_friction_coefficient 0 4 1564 54 BulletSoftBodyConfig::get_dynamic_friction_coefficient 0 1 365 35
/**
 * Getter for property kDF.
 */
79
PN_stdfloat BulletSoftBodyConfig::get_dynamic_friction_coefficient(void) const;

1126 29 get_pose_matching_coefficient 0 4 1564 51 BulletSoftBodyConfig::get_pose_matching_coefficient 0 1 366 35
/**
 * Getter for property kMT.
 */
76
PN_stdfloat BulletSoftBodyConfig::get_pose_matching_coefficient(void) const;

1127 27 get_rigid_contacts_hardness 0 4 1564 49 BulletSoftBodyConfig::get_rigid_contacts_hardness 0 1 367 36
/**
 * Getter for property kCHR.
 */
74
PN_stdfloat BulletSoftBodyConfig::get_rigid_contacts_hardness(void) const;

1128 29 get_kinetic_contacts_hardness 0 4 1564 51 BulletSoftBodyConfig::get_kinetic_contacts_hardness 0 1 368 36
/**
 * Getter for property kKHR.
 */
76
PN_stdfloat BulletSoftBodyConfig::get_kinetic_contacts_hardness(void) const;

1129 26 get_soft_contacts_hardness 0 4 1564 48 BulletSoftBodyConfig::get_soft_contacts_hardness 0 1 369 36
/**
 * Getter for property kSHR.
 */
73
PN_stdfloat BulletSoftBodyConfig::get_soft_contacts_hardness(void) const;

1130 20 get_anchors_hardness 0 4 1564 42 BulletSoftBodyConfig::get_anchors_hardness 0 1 370 36
/**
 * Getter for property kAHR.
 */
67
PN_stdfloat BulletSoftBodyConfig::get_anchors_hardness(void) const;

1131 26 get_soft_vs_rigid_hardness 0 4 1564 48 BulletSoftBodyConfig::get_soft_vs_rigid_hardness 0 1 371 40
/**
 * Getter for property kSRHR_CL.
 */
73
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_hardness(void) const;

1132 28 get_soft_vs_kinetic_hardness 0 4 1564 50 BulletSoftBodyConfig::get_soft_vs_kinetic_hardness 0 1 372 40
/**
 * Getter for property kSKHR_CL.
 */
75
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_hardness(void) const;

1133 25 get_soft_vs_soft_hardness 0 4 1564 47 BulletSoftBodyConfig::get_soft_vs_soft_hardness 0 1 373 40
/**
 * Getter for property kSSHR_CL.
 */
72
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_hardness(void) const;

1134 31 get_soft_vs_rigid_impulse_split 0 4 1564 53 BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split 0 1 374 43
/**
 * Getter for property kSR_SPLT_CL.
 */
78
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split(void) const;

1135 33 get_soft_vs_kinetic_impulse_split 0 4 1564 55 BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split 0 1 375 43
/**
 * Getter for property kSK_SPLT_CL.
 */
80
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split(void) const;

1136 30 get_soft_vs_soft_impulse_split 0 4 1564 52 BulletSoftBodyConfig::get_soft_vs_soft_impulse_split 0 1 376 43
/**
 * Getter for property kSS_SPLT_CL.
 */
77
PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_impulse_split(void) const;

1137 13 get_maxvolume 0 4 1564 35 BulletSoftBodyConfig::get_maxvolume 0 1 377 41
/**
 * Getter for property maxvolume.
 */
60
PN_stdfloat BulletSoftBodyConfig::get_maxvolume(void) const;

1138 13 get_timescale 0 4 1564 35 BulletSoftBodyConfig::get_timescale 0 1 378 41
/**
 * Getter for property timescale.
 */
60
PN_stdfloat BulletSoftBodyConfig::get_timescale(void) const;

1139 31 get_positions_solver_iterations 0 4 1564 53 BulletSoftBodyConfig::get_positions_solver_iterations 0 1 379 43
/**
 * Getter for property piterations.
 */
70
int BulletSoftBodyConfig::get_positions_solver_iterations(void) const;

1140 32 get_velocities_solver_iterations 0 4 1564 54 BulletSoftBodyConfig::get_velocities_solver_iterations 0 1 380 43
/**
 * Getter for property viterations.
 */
71
int BulletSoftBodyConfig::get_velocities_solver_iterations(void) const;

1141 27 get_drift_solver_iterations 0 4 1564 49 BulletSoftBodyConfig::get_drift_solver_iterations 0 1 381 43
/**
 * Getter for property diterations.
 */
66
int BulletSoftBodyConfig::get_drift_solver_iterations(void) const;

1142 29 get_cluster_solver_iterations 0 4 1564 51 BulletSoftBodyConfig::get_cluster_solver_iterations 0 1 382 43
/**
 * Getter for property citerations.
 */
68
int BulletSoftBodyConfig::get_cluster_solver_iterations(void) const;

1143 20 BulletSoftBodyConfig 0 260 1564 42 BulletSoftBodyConfig::BulletSoftBodyConfig 0 1 329 10
/**
 *
 */
90
inline BulletSoftBodyConfig::BulletSoftBodyConfig(BulletSoftBodyConfig const &) = default;

1144 24 ~BulletSoftBodyWorldInfo 0 516 1567 49 BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo 0 0 10
/**
 *
 */
63
inline BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo(void);

1145 15 set_air_density 0 4 1567 40 BulletSoftBodyWorldInfo::set_air_density 0 1 384 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_air_density(PN_stdfloat density);

1146 17 set_water_density 0 4 1567 42 BulletSoftBodyWorldInfo::set_water_density 0 1 385 10
/**
 *
 */
69
void BulletSoftBodyWorldInfo::set_water_density(PN_stdfloat density);

1147 16 set_water_offset 0 4 1567 41 BulletSoftBodyWorldInfo::set_water_offset 0 1 386 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_water_offset(PN_stdfloat offset);

1148 16 set_water_normal 0 4 1567 41 BulletSoftBodyWorldInfo::set_water_normal 0 1 387 10
/**
 *
 */
71
void BulletSoftBodyWorldInfo::set_water_normal(LVector3 const &normal);

1149 11 set_gravity 0 4 1567 36 BulletSoftBodyWorldInfo::set_gravity 0 1 388 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_gravity(LVector3 const &gravity);

1150 15 get_air_density 0 4 1567 40 BulletSoftBodyWorldInfo::get_air_density 0 1 389 10
/**
 *
 */
65
PN_stdfloat BulletSoftBodyWorldInfo::get_air_density(void) const;

1151 17 get_water_density 0 4 1567 42 BulletSoftBodyWorldInfo::get_water_density 0 1 390 10
/**
 *
 */
67
PN_stdfloat BulletSoftBodyWorldInfo::get_water_density(void) const;

1152 16 get_water_offset 0 4 1567 41 BulletSoftBodyWorldInfo::get_water_offset 0 1 391 10
/**
 *
 */
66
PN_stdfloat BulletSoftBodyWorldInfo::get_water_offset(void) const;

1153 16 get_water_normal 0 4 1567 41 BulletSoftBodyWorldInfo::get_water_normal 0 1 392 10
/**
 *
 */
63
LVector3 BulletSoftBodyWorldInfo::get_water_normal(void) const;

1154 11 get_gravity 0 4 1567 36 BulletSoftBodyWorldInfo::get_gravity 0 1 393 10
/**
 *
 */
58
LVector3 BulletSoftBodyWorldInfo::get_gravity(void) const;

1155 15 garbage_collect 0 4 1567 40 BulletSoftBodyWorldInfo::garbage_collect 0 1 394 10
/**
 *
 */
66
void BulletSoftBodyWorldInfo::garbage_collect(int lifetime = 256);

1156 23 BulletSoftBodyWorldInfo 0 260 1567 48 BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo 0 1 383 10
/**
 *
 */
99
inline BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo(BulletSoftBodyWorldInfo const &) = default;

1157 23 ~BulletSoftBodyMaterial 0 516 1569 47 BulletSoftBodyMaterial::~BulletSoftBodyMaterial 0 0 10
/**
 *
 */
61
inline BulletSoftBodyMaterial::~BulletSoftBodyMaterial(void);

1158 5 empty 0 4 1569 29 BulletSoftBodyMaterial::empty 0 1 396 102
/**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */
73
static inline BulletSoftBodyMaterial BulletSoftBodyMaterial::empty(void);

1159 20 get_linear_stiffness 0 4 1569 44 BulletSoftBodyMaterial::get_linear_stiffness 0 1 397 42
/**
 * Getter for the property m_kLST.
 */
69
PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const;

1160 20 set_linear_stiffness 0 4 1569 44 BulletSoftBodyMaterial::set_linear_stiffness 0 1 398 42
/**
 * Setter for the property m_kLST.
 */
69
void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value);

1161 21 get_angular_stiffness 0 4 1569 45 BulletSoftBodyMaterial::get_angular_stiffness 0 1 399 42
/**
 * Getter for the property m_kAST.
 */
70
PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const;

1162 21 set_angular_stiffness 0 4 1569 45 BulletSoftBodyMaterial::set_angular_stiffness 0 1 400 42
/**
 * Setter for the property m_kAST.
 */
70
void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value);

1163 23 get_volume_preservation 0 4 1569 47 BulletSoftBodyMaterial::get_volume_preservation 0 1 401 42
/**
 * Getter for the property m_kVST.
 */
72
PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const;

1164 23 set_volume_preservation 0 4 1569 47 BulletSoftBodyMaterial::set_volume_preservation 0 1 402 42
/**
 * Setter for the property m_kVST.
 */
72
void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value);

1165 22 BulletSoftBodyMaterial 0 260 1569 46 BulletSoftBodyMaterial::BulletSoftBodyMaterial 0 1 395 10
/**
 *
 */
96
inline BulletSoftBodyMaterial::BulletSoftBodyMaterial(BulletSoftBodyMaterial const &) = default;

1166 14 get_class_type 0 4 1563 34 BulletSoftBodyNode::get_class_type 0 1 328 0
59
static TypeHandle BulletSoftBodyNode::get_class_type(void);

1167 24 set_suspension_stiffness 0 4 1570 45 BulletVehicleTuning::set_suspension_stiffness 0 1 403 10
/**
 *
 */
70
void BulletVehicleTuning::set_suspension_stiffness(PN_stdfloat value);

1168 26 set_suspension_compression 0 4 1570 47 BulletVehicleTuning::set_suspension_compression 0 1 404 10
/**
 *
 */
72
void BulletVehicleTuning::set_suspension_compression(PN_stdfloat value);

1169 22 set_suspension_damping 0 4 1570 43 BulletVehicleTuning::set_suspension_damping 0 1 405 10
/**
 *
 */
68
void BulletVehicleTuning::set_suspension_damping(PN_stdfloat value);

1170 28 set_max_suspension_travel_cm 0 4 1570 49 BulletVehicleTuning::set_max_suspension_travel_cm 0 1 406 10
/**
 *
 */
74
void BulletVehicleTuning::set_max_suspension_travel_cm(PN_stdfloat value);

1171 17 set_friction_slip 0 4 1570 38 BulletVehicleTuning::set_friction_slip 0 1 407 10
/**
 *
 */
63
void BulletVehicleTuning::set_friction_slip(PN_stdfloat value);

1172 24 set_max_suspension_force 0 4 1570 45 BulletVehicleTuning::set_max_suspension_force 0 1 408 10
/**
 *
 */
70
void BulletVehicleTuning::set_max_suspension_force(PN_stdfloat value);

1173 24 get_suspension_stiffness 0 4 1570 45 BulletVehicleTuning::get_suspension_stiffness 0 1 409 10
/**
 *
 */
70
PN_stdfloat BulletVehicleTuning::get_suspension_stiffness(void) const;

1174 26 get_suspension_compression 0 4 1570 47 BulletVehicleTuning::get_suspension_compression 0 1 410 10
/**
 *
 */
72
PN_stdfloat BulletVehicleTuning::get_suspension_compression(void) const;

1175 22 get_suspension_damping 0 4 1570 43 BulletVehicleTuning::get_suspension_damping 0 1 411 10
/**
 *
 */
68
PN_stdfloat BulletVehicleTuning::get_suspension_damping(void) const;

1176 28 get_max_suspension_travel_cm 0 4 1570 49 BulletVehicleTuning::get_max_suspension_travel_cm 0 1 412 10
/**
 *
 */
74
PN_stdfloat BulletVehicleTuning::get_max_suspension_travel_cm(void) const;

1177 17 get_friction_slip 0 4 1570 38 BulletVehicleTuning::get_friction_slip 0 1 413 10
/**
 *
 */
63
PN_stdfloat BulletVehicleTuning::get_friction_slip(void) const;

1178 24 get_max_suspension_force 0 4 1570 45 BulletVehicleTuning::get_max_suspension_force 0 1 414 10
/**
 *
 */
70
PN_stdfloat BulletVehicleTuning::get_max_suspension_force(void) const;

1179 13 BulletVehicle 0 260 1571 28 BulletVehicle::BulletVehicle 0 1 415 94
/**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */
79
BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis);

1180 21 set_coordinate_system 0 4 1571 36 BulletVehicle::set_coordinate_system 0 1 416 100
/**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */
59
void BulletVehicle::set_coordinate_system(BulletUpAxis up);

1181 18 set_steering_value 0 4 1571 33 BulletVehicle::set_steering_value 0 1 417 76
/**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */
70
void BulletVehicle::set_steering_value(PN_stdfloat steering, int idx);

1182 9 set_brake 0 4 1571 24 BulletVehicle::set_brake 0 1 418 61
/**
 * Applies braking force to the wheel with index idx.
 */
58
void BulletVehicle::set_brake(PN_stdfloat brake, int idx);

1183 17 set_pitch_control 0 4 1571 32 BulletVehicle::set_pitch_control 0 1 419 10
/**
 *
 */
57
void BulletVehicle::set_pitch_control(PN_stdfloat pitch);

1184 11 get_chassis 0 4 1571 26 BulletVehicle::get_chassis 0 1 420 82
/**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */
54
BulletRigidBodyNode *BulletVehicle::get_chassis(void);

1185 25 get_current_speed_km_hour 0 4 1571 40 BulletVehicle::get_current_speed_km_hour 0 1 421 106
/**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */
65
PN_stdfloat BulletVehicle::get_current_speed_km_hour(void) const;

1186 18 get_steering_value 0 4 1571 33 BulletVehicle::get_steering_value 0 1 422 77
/**
 * Returns the steering angle of the wheel with index idx in degrees.
 */
61
PN_stdfloat BulletVehicle::get_steering_value(int idx) const;

1187 18 get_forward_vector 0 4 1571 33 BulletVehicle::get_forward_vector 0 1 423 145
/**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */
55
LVector3 BulletVehicle::get_forward_vector(void) const;

1188 16 reset_suspension 0 4 1571 31 BulletVehicle::reset_suspension 0 1 424 43
/**
 * Resets the vehicle's suspension.
 */
43
void BulletVehicle::reset_suspension(void);

1189 18 apply_engine_force 0 4 1571 33 BulletVehicle::apply_engine_force 0 1 425 70
/**
 * Applies force at the wheel with index idx for acceleration.
 */
67
void BulletVehicle::apply_engine_force(PN_stdfloat force, int idx);

1190 12 create_wheel 0 4 1571 27 BulletVehicle::create_wheel 0 1 426 83
// Wheels

/**
 * Factory method for creating wheels for this vehicle instance.
 */
82
BulletWheel BulletVehicle::create_wheel(PN_stdfloat suspension_rest_length = 0.4);

1191 14 get_num_wheels 0 4 1571 29 BulletVehicle::get_num_wheels 0 1 427 57
/**
 * Returns the number of wheels this vehicle has.
 */
46
int BulletVehicle::get_num_wheels(void) const;

1192 9 get_wheel 0 4 1571 24 BulletVehicle::get_wheel 0 1 428 132
/**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */
52
BulletWheel BulletVehicle::get_wheel(int idx) const;

1193 10 get_tuning 0 4 1571 25 BulletVehicle::get_tuning 0 1 429 211
// Tuning

// Tuning

/**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */
60
inline BulletVehicleTuning &BulletVehicle::get_tuning(void);

1194 12 ~BulletWheel 0 516 1572 25 BulletWheel::~BulletWheel 0 0 10
/**
 *
 */
39
inline BulletWheel::~BulletWheel(void);

1195 24 set_suspension_stiffness 0 4 1572 37 BulletWheel::set_suspension_stiffness 0 1 432 50
/**
 * Sets how stiff the suspension shall be.
 */
62
void BulletWheel::set_suspension_stiffness(PN_stdfloat value);

1196 28 set_max_suspension_travel_cm 0 4 1572 41 BulletWheel::set_max_suspension_travel_cm 0 1 433 109
/**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */
66
void BulletWheel::set_max_suspension_travel_cm(PN_stdfloat value);

1197 17 set_friction_slip 0 4 1572 30 BulletWheel::set_friction_slip 0 1 434 45
/**
 * Sets the slipperyness of the tyre.
 */
55
void BulletWheel::set_friction_slip(PN_stdfloat value);

1198 24 set_max_suspension_force 0 4 1572 37 BulletWheel::set_max_suspension_force 0 1 435 66
/**
 * Sets the maximum suspension force the wheel can handle.
 */
62
void BulletWheel::set_max_suspension_force(PN_stdfloat value);

1199 30 set_wheels_damping_compression 0 4 1572 43 BulletWheel::set_wheels_damping_compression 0 1 436 79
/**
 * Sets the damping forces applied when the suspension gets compressed.
 */
68
void BulletWheel::set_wheels_damping_compression(PN_stdfloat value);

1200 29 set_wheels_damping_relaxation 0 4 1572 42 BulletWheel::set_wheels_damping_relaxation 0 1 437 71
/**
 * Sets the damping forces applied when the suspension relaxes.
 */
67
void BulletWheel::set_wheels_damping_relaxation(PN_stdfloat value);

1201 18 set_roll_influence 0 4 1572 31 BulletWheel::set_roll_influence 0 1 438 249
/**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */
56
void BulletWheel::set_roll_influence(PN_stdfloat value);

1202 16 set_wheel_radius 0 4 1572 29 BulletWheel::set_wheel_radius 0 1 439 33
/**
 * Sets the wheel radius.
 */
54
void BulletWheel::set_wheel_radius(PN_stdfloat value);

1203 12 set_steering 0 4 1572 25 BulletWheel::set_steering 0 1 440 124
/**
 * Sets the steering angle.
 *
 * @warning
 * As of 1.11, this method uses degrees.  Previous versions used radians.
 */
50
void BulletWheel::set_steering(PN_stdfloat value);

1204 12 set_rotation 0 4 1572 25 BulletWheel::set_rotation 0 1 441 10
/**
 *
 */
50
void BulletWheel::set_rotation(PN_stdfloat value);

1205 18 set_delta_rotation 0 4 1572 31 BulletWheel::set_delta_rotation 0 1 442 10
/**
 *
 */
56
void BulletWheel::set_delta_rotation(PN_stdfloat value);

1206 16 set_engine_force 0 4 1572 29 BulletWheel::set_engine_force 0 1 443 69
/**
 * Defines how much force should be used to rotate the wheel.
 */
54
void BulletWheel::set_engine_force(PN_stdfloat value);

1207 9 set_brake 0 4 1572 22 BulletWheel::set_brake 0 1 444 10
/**
 *
 */
47
void BulletWheel::set_brake(PN_stdfloat value);

1208 13 set_skid_info 0 4 1572 26 BulletWheel::set_skid_info 0 1 445 10
/**
 *
 */
51
void BulletWheel::set_skid_info(PN_stdfloat value);

1209 27 set_wheels_suspension_force 0 4 1572 40 BulletWheel::set_wheels_suspension_force 0 1 446 10
/**
 *
 */
65
void BulletWheel::set_wheels_suspension_force(PN_stdfloat value);

1210 32 set_suspension_relative_velocity 0 4 1572 45 BulletWheel::set_suspension_relative_velocity 0 1 447 10
/**
 *
 */
70
void BulletWheel::set_suspension_relative_velocity(PN_stdfloat value);

1211 35 set_clipped_inv_connection_point_cs 0 4 1572 48 BulletWheel::set_clipped_inv_connection_point_cs 0 1 448 10
/**
 *
 */
73
void BulletWheel::set_clipped_inv_connection_point_cs(PN_stdfloat value);

1212 31 set_chassis_connection_point_cs 0 4 1572 44 BulletWheel::set_chassis_connection_point_cs 0 1 449 70
/**
 * Sets the point where the wheel is connected to the chassis.
 */
70
void BulletWheel::set_chassis_connection_point_cs(LPoint3 const &pos);

1213 22 set_wheel_direction_cs 0 4 1572 35 BulletWheel::set_wheel_direction_cs 0 1 450 92
/**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */
62
void BulletWheel::set_wheel_direction_cs(LVector3 const &dir);

1214 17 set_wheel_axle_cs 0 4 1572 30 BulletWheel::set_wheel_axle_cs 0 1 451 51
/**
 * Determines the wheel axle normal vector.
 */
58
void BulletWheel::set_wheel_axle_cs(LVector3 const &axle);

1215 19 set_world_transform 0 4 1572 32 BulletWheel::set_world_transform 0 1 452 10
/**
 *
 */
59
void BulletWheel::set_world_transform(LMatrix4 const &mat);

1216 15 set_front_wheel 0 4 1572 28 BulletWheel::set_front_wheel 0 1 453 42
/**
 * Sets if the wheel is steerable.
 */
46
void BulletWheel::set_front_wheel(bool value);

1217 8 set_node 0 4 1572 21 BulletWheel::set_node 0 1 454 86
/**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */
44
void BulletWheel::set_node(PandaNode *node);

1218 26 get_suspension_rest_length 0 4 1572 39 BulletWheel::get_suspension_rest_length 0 1 455 83
/**
 * Returns the length of the suspension when the vehicle is standing still.
 */
64
PN_stdfloat BulletWheel::get_suspension_rest_length(void) const;

1219 24 get_suspension_stiffness 0 4 1572 37 BulletWheel::get_suspension_stiffness 0 1 456 51
/**
 * Returns the stiffness of the suspension.
 */
62
PN_stdfloat BulletWheel::get_suspension_stiffness(void) const;

1220 28 get_max_suspension_travel_cm 0 4 1572 41 BulletWheel::get_max_suspension_travel_cm 0 1 457 10
/**
 *
 */
66
PN_stdfloat BulletWheel::get_max_suspension_travel_cm(void) const;

1221 17 get_friction_slip 0 4 1572 30 BulletWheel::get_friction_slip 0 1 458 46
/**
 * Returns how slippery the tyres are.
 */
55
PN_stdfloat BulletWheel::get_friction_slip(void) const;

1222 24 get_max_suspension_force 0 4 1572 37 BulletWheel::get_max_suspension_force 0 1 459 72
/**
 * Returns the maximum force (weight) the suspension can handle.
 */
62
PN_stdfloat BulletWheel::get_max_suspension_force(void) const;

1223 30 get_wheels_damping_compression 0 4 1572 43 BulletWheel::get_wheels_damping_compression 0 1 460 70
/**
 * Returns the  damping applied to the compressing suspension.
 */
68
PN_stdfloat BulletWheel::get_wheels_damping_compression(void) const;

1224 29 get_wheels_damping_relaxation 0 4 1572 42 BulletWheel::get_wheels_damping_relaxation 0 1 461 66
/**
 * Returns the damping applied to the relaxing suspension.
 */
67
PN_stdfloat BulletWheel::get_wheels_damping_relaxation(void) const;

1225 18 get_roll_influence 0 4 1572 31 BulletWheel::get_roll_influence 0 1 462 90
/**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */
56
PN_stdfloat BulletWheel::get_roll_influence(void) const;

1226 16 get_wheel_radius 0 4 1572 29 BulletWheel::get_wheel_radius 0 1 463 36
/**
 * Returns the wheel radius.
 */
54
PN_stdfloat BulletWheel::get_wheel_radius(void) const;

1227 12 get_steering 0 4 1572 25 BulletWheel::get_steering 0 1 464 138
/**
 * Returns the steering angle in degrees.
 *
 * @warning
 * As of 1.11, this method uses degrees.  Previous versions used radians.
 */
50
PN_stdfloat BulletWheel::get_steering(void) const;

1228 12 get_rotation 0 4 1572 25 BulletWheel::get_rotation 0 1 465 10
/**
 *
 */
50
PN_stdfloat BulletWheel::get_rotation(void) const;

1229 18 get_delta_rotation 0 4 1572 31 BulletWheel::get_delta_rotation 0 1 466 10
/**
 *
 */
56
PN_stdfloat BulletWheel::get_delta_rotation(void) const;

1230 16 get_engine_force 0 4 1572 29 BulletWheel::get_engine_force 0 1 467 71
/**
 * Returns the amount of accelleration force currently applied.
 */
54
PN_stdfloat BulletWheel::get_engine_force(void) const;

1231 9 get_brake 0 4 1572 22 BulletWheel::get_brake 0 1 468 65
/**
 * Returns the amount of braking force currently applied.
 */
47
PN_stdfloat BulletWheel::get_brake(void) const;

1232 13 get_skid_info 0 4 1572 26 BulletWheel::get_skid_info 0 1 469 10
/**
 *
 */
51
PN_stdfloat BulletWheel::get_skid_info(void) const;

1233 27 get_wheels_suspension_force 0 4 1572 40 BulletWheel::get_wheels_suspension_force 0 1 470 10
/**
 *
 */
65
PN_stdfloat BulletWheel::get_wheels_suspension_force(void) const;

1234 32 get_suspension_relative_velocity 0 4 1572 45 BulletWheel::get_suspension_relative_velocity 0 1 471 10
/**
 *
 */
70
PN_stdfloat BulletWheel::get_suspension_relative_velocity(void) const;

1235 35 get_clipped_inv_connection_point_cs 0 4 1572 48 BulletWheel::get_clipped_inv_connection_point_cs 0 1 472 10
/**
 *
 */
73
PN_stdfloat BulletWheel::get_clipped_inv_connection_point_cs(void) const;

1236 31 get_chassis_connection_point_cs 0 4 1572 44 BulletWheel::get_chassis_connection_point_cs 0 1 473 73
/**
 * Returns the point where the wheel is connected to the chassis.
 */
65
LPoint3 BulletWheel::get_chassis_connection_point_cs(void) const;

1237 22 get_wheel_direction_cs 0 4 1572 35 BulletWheel::get_wheel_direction_cs 0 1 474 70
/**
 * Returns the wheel's forward vector relative to the chassis.
 */
57
LVector3 BulletWheel::get_wheel_direction_cs(void) const;

1238 17 get_wheel_axle_cs 0 4 1572 30 BulletWheel::get_wheel_axle_cs 0 1 475 55
/**
 * Returns the normal vector of the wheel axle.
 */
52
LVector3 BulletWheel::get_wheel_axle_cs(void) const;

1239 19 get_world_transform 0 4 1572 32 BulletWheel::get_world_transform 0 1 476 10
/**
 *
 */
54
LMatrix4 BulletWheel::get_world_transform(void) const;

1240 14 is_front_wheel 0 4 1572 27 BulletWheel::is_front_wheel 0 1 477 46
/**
 * Determines if a wheel is steerable.
 */
45
bool BulletWheel::is_front_wheel(void) const;

1241 8 get_node 0 4 1572 21 BulletWheel::get_node 0 1 478 142
/**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */
45
PandaNode *BulletWheel::get_node(void) const;

1242 16 get_raycast_info 0 4 1572 29 BulletWheel::get_raycast_info 0 1 479 10
/**
 *
 */
65
BulletWheelRaycastInfo BulletWheel::get_raycast_info(void) const;

1243 23 ~BulletWheelRaycastInfo 0 516 1573 47 BulletWheelRaycastInfo::~BulletWheelRaycastInfo 0 0 10
/**
 *
 */
61
inline BulletWheelRaycastInfo::~BulletWheelRaycastInfo(void);

1244 13 is_in_contact 0 4 1573 37 BulletWheelRaycastInfo::is_in_contact 0 1 481 10
/**
 *
 */
55
bool BulletWheelRaycastInfo::is_in_contact(void) const;

1245 21 get_suspension_length 0 4 1573 45 BulletWheelRaycastInfo::get_suspension_length 0 1 482 10
/**
 *
 */
70
PN_stdfloat BulletWheelRaycastInfo::get_suspension_length(void) const;

1246 21 get_contact_normal_ws 0 4 1573 45 BulletWheelRaycastInfo::get_contact_normal_ws 0 1 483 10
/**
 *
 */
67
LVector3 BulletWheelRaycastInfo::get_contact_normal_ws(void) const;

1247 22 get_wheel_direction_ws 0 4 1573 46 BulletWheelRaycastInfo::get_wheel_direction_ws 0 1 484 10
/**
 *
 */
68
LVector3 BulletWheelRaycastInfo::get_wheel_direction_ws(void) const;

1248 17 get_wheel_axle_ws 0 4 1573 41 BulletWheelRaycastInfo::get_wheel_axle_ws 0 1 485 10
/**
 *
 */
63
LVector3 BulletWheelRaycastInfo::get_wheel_axle_ws(void) const;

1249 20 get_contact_point_ws 0 4 1573 44 BulletWheelRaycastInfo::get_contact_point_ws 0 1 486 10
/**
 *
 */
65
LPoint3 BulletWheelRaycastInfo::get_contact_point_ws(void) const;

1250 17 get_hard_point_ws 0 4 1573 41 BulletWheelRaycastInfo::get_hard_point_ws 0 1 487 10
/**
 *
 */
62
LPoint3 BulletWheelRaycastInfo::get_hard_point_ws(void) const;

1251 17 get_ground_object 0 4 1573 41 BulletWheelRaycastInfo::get_ground_object 0 1 488 10
/**
 *
 */
65
PandaNode *BulletWheelRaycastInfo::get_ground_object(void) const;

1252 22 BulletWheelRaycastInfo 0 260 1573 46 BulletWheelRaycastInfo::BulletWheelRaycastInfo 0 1 480 10
/**
 *
 */
96
inline BulletWheelRaycastInfo::BulletWheelRaycastInfo(BulletWheelRaycastInfo const &) = default;

1253 11 BulletWheel 0 260 1572 24 BulletWheel::BulletWheel 0 1 431 10
/**
 *
 */
63
inline BulletWheel::BulletWheel(BulletWheel const &) = default;

1254 14 get_class_type 0 4 1571 29 BulletVehicle::get_class_type 0 1 430 0
54
static TypeHandle BulletVehicle::get_class_type(void);

1255 11 BulletWorld 0 260 1574 24 BulletWorld::BulletWorld 0 1 489 10
/**
 *
 */
31
BulletWorld::BulletWorld(void);

1256 11 set_gravity 0 4 1574 24 BulletWorld::set_gravity 0 2 490 491 22
/**
 *
 */

/**
 *
 */
134
void BulletWorld::set_gravity(LVector3 const &gravity);
void BulletWorld::set_gravity(PN_stdfloat gx, PN_stdfloat gy, PN_stdfloat gz);

1257 11 get_gravity 0 4 1574 24 BulletWorld::get_gravity 0 1 492 10
/**
 *
 */
52
LVector3 const BulletWorld::get_gravity(void) const;

1258 10 do_physics 0 4 1574 23 BulletWorld::do_physics 0 1 493 10
/**
 *
 */
103
int BulletWorld::do_physics(PN_stdfloat dt, int max_substeps = 1, PN_stdfloat stepsize = (1.0 / 60.0));

1259 14 get_world_info 0 4 1574 27 BulletWorld::get_world_info 0 1 494 10
/**
 *
 */
58
BulletSoftBodyWorldInfo BulletWorld::get_world_info(void);

1260 14 set_debug_node 0 4 1574 27 BulletWorld::set_debug_node 0 1 495 30
// Debug

// Debug

/**
 *
 */
56
void BulletWorld::set_debug_node(BulletDebugNode *node);

1261 16 clear_debug_node 0 4 1574 29 BulletWorld::clear_debug_node 0 1 496 75
/**
 * Removes a debug node that has been assigned to this BulletWorld.
 */
41
void BulletWorld::clear_debug_node(void);

1262 14 get_debug_node 0 4 1574 27 BulletWorld::get_debug_node 0 1 497 10
/**
 *
 */
64
inline BulletDebugNode *BulletWorld::get_debug_node(void) const;

1263 14 has_debug_node 0 4 1574 27 BulletWorld::has_debug_node 0 1 498 10
/**
 *
 */
52
inline bool BulletWorld::has_debug_node(void) const;

1264 6 attach 0 4 1574 19 BulletWorld::attach 0 1 499 27
// AttachRemove

/**
 *
 */
46
void BulletWorld::attach(TypedObject *object);

1265 6 remove 0 4 1574 19 BulletWorld::remove 0 1 500 10
/**
 *
 */
46
void BulletWorld::remove(TypedObject *object);

1266 17 attach_constraint 0 4 1574 30 BulletWorld::attach_constraint 0 1 501 156
/**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */
97
void BulletWorld::attach_constraint(BulletConstraint *constraint, bool linked_collision = false);

1267 14 get_num_ghosts 0 4 1574 27 BulletWorld::get_num_ghosts 0 1 502 61
// Ghost object

// Ghost object

// Ghost object

/**
 *
 */
44
int BulletWorld::get_num_ghosts(void) const;

1268 9 get_ghost 0 4 1574 22 BulletWorld::get_ghost 0 1 503 10
/**
 *
 */
55
BulletGhostNode *BulletWorld::get_ghost(int idx) const;

1269 20 get_num_rigid_bodies 0 4 1574 33 BulletWorld::get_num_rigid_bodies 0 1 504 55
// Rigid body

// Rigid body

// Rigid body

/**
 *
 */
50
int BulletWorld::get_num_rigid_bodies(void) const;

1270 14 get_rigid_body 0 4 1574 27 BulletWorld::get_rigid_body 0 1 505 10
/**
 *
 */
64
BulletRigidBodyNode *BulletWorld::get_rigid_body(int idx) const;

1271 19 get_num_soft_bodies 0 4 1574 32 BulletWorld::get_num_soft_bodies 0 1 506 52
// Soft body

// Soft body

// Soft body

/**
 *
 */
49
int BulletWorld::get_num_soft_bodies(void) const;

1272 13 get_soft_body 0 4 1574 26 BulletWorld::get_soft_body 0 1 507 10
/**
 *
 */
62
BulletSoftBodyNode *BulletWorld::get_soft_body(int idx) const;

1273 18 get_num_characters 0 4 1574 31 BulletWorld::get_num_characters 0 1 508 85
// Character controller

// Character controller

// Character controller

/**
 *
 */
48
int BulletWorld::get_num_characters(void) const;

1274 13 get_character 0 4 1574 26 BulletWorld::get_character 0 1 509 10
/**
 *
 */
77
BulletBaseCharacterControllerNode *BulletWorld::get_character(int idx) const;

1275 16 get_num_vehicles 0 4 1574 29 BulletWorld::get_num_vehicles 0 1 510 10
/**
 *
 */
46
int BulletWorld::get_num_vehicles(void) const;

1276 11 get_vehicle 0 4 1574 24 BulletWorld::get_vehicle 0 1 511 10
/**
 *
 */
55
BulletVehicle *BulletWorld::get_vehicle(int idx) const;

1277 19 get_num_constraints 0 4 1574 32 BulletWorld::get_num_constraints 0 1 512 55
// Constraint

// Constraint

// Constraint

/**
 *
 */
49
int BulletWorld::get_num_constraints(void) const;

1278 14 get_constraint 0 4 1574 27 BulletWorld::get_constraint 0 1 513 10
/**
 *
 */
61
BulletConstraint *BulletWorld::get_constraint(int idx) const;

1279 16 ray_test_closest 0 4 1574 29 BulletWorld::ray_test_closest 0 1 514 40
// Raycast and other queries

/**
 *
 */
159
BulletClosestHitRayResult BulletWorld::ray_test_closest(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const;

1280 12 ray_test_all 0 4 1574 25 BulletWorld::ray_test_all 0 1 515 10
/**
 *
 */
152
BulletAllHitsRayResult BulletWorld::ray_test_all(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const;

1281 18 sweep_test_closest 0 4 1574 31 BulletWorld::sweep_test_closest 0 1 516 203
/**
 * Performs a sweep test against all other shapes that match the given group
 * mask.  The provided shape must be a convex shape; it is an error to invoke
 * this method using a non-convex shape.
 */
226
BulletClosestHitSweepResult BulletWorld::sweep_test_closest(BulletShape *shape, TransformState const &from_ts, TransformState const &to_ts, CollideMask const &mask = CollideMask::all_on(), PN_stdfloat penetration = 0.0) const;

1282 12 contact_test 0 4 1574 25 BulletWorld::contact_test 0 1 517 386
/**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */
94
BulletContactResult BulletWorld::contact_test(PandaNode *node, bool use_filter = false) const;

1283 17 contact_test_pair 0 4 1574 30 BulletWorld::contact_test_pair 0 1 518 181
/**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */
93
BulletContactResult BulletWorld::contact_test_pair(PandaNode *node0, PandaNode *node1) const;

1284 11 filter_test 0 4 1574 24 BulletWorld::filter_test 0 1 519 105
/**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */
72
bool BulletWorld::filter_test(PandaNode *node0, PandaNode *node1) const;

1285 17 get_num_manifolds 0 4 1574 30 BulletWorld::get_num_manifolds 0 1 520 52
// Manifolds

// Manifolds

// Manifolds

/**
 *
 */
47
int BulletWorld::get_num_manifolds(void) const;

1286 12 get_manifold 0 4 1574 25 BulletWorld::get_manifold 0 1 521 10
/**
 *
 */
66
BulletPersistentManifold BulletWorld::get_manifold(int idx) const;

1287 24 set_group_collision_flag 0 4 1574 37 BulletWorld::set_group_collision_flag 0 1 522 34
// Collision filtering

/**
 *
 */
98
void BulletWorld::set_group_collision_flag(unsigned int group1, unsigned int group2, bool enable);

1288 24 get_group_collision_flag 0 4 1574 37 BulletWorld::get_group_collision_flag 0 1 523 10
/**
 *
 */
91
bool BulletWorld::get_group_collision_flag(unsigned int group1, unsigned int group2) const;

1289 26 set_force_update_all_aabbs 0 4 1574 39 BulletWorld::set_force_update_all_aabbs 0 1 524 10
/**
 *
 */
57
void BulletWorld::set_force_update_all_aabbs(bool force);

1290 26 get_force_update_all_aabbs 0 4 1574 39 BulletWorld::get_force_update_all_aabbs 0 1 525 10
/**
 *
 */
57
bool BulletWorld::get_force_update_all_aabbs(void) const;

1291 26 set_contact_added_callback 0 4 1574 39 BulletWorld::set_contact_added_callback 0 1 526 24
// Callbacks

/**
 *
 */
66
void BulletWorld::set_contact_added_callback(CallbackObject *obj);

1292 28 clear_contact_added_callback 0 4 1574 41 BulletWorld::clear_contact_added_callback 0 1 527 10
/**
 *
 */
53
void BulletWorld::clear_contact_added_callback(void);

1293 17 set_tick_callback 0 4 1574 30 BulletWorld::set_tick_callback 0 1 528 10
/**
 *
 */
82
void BulletWorld::set_tick_callback(CallbackObject *obj, bool is_pretick = false);

1294 19 clear_tick_callback 0 4 1574 32 BulletWorld::clear_tick_callback 0 1 529 10
/**
 *
 */
44
void BulletWorld::clear_tick_callback(void);

1295 19 set_filter_callback 0 4 1574 32 BulletWorld::set_filter_callback 0 1 530 10
/**
 *
 */
59
void BulletWorld::set_filter_callback(CallbackObject *obj);

1296 21 clear_filter_callback 0 4 1574 34 BulletWorld::clear_filter_callback 0 1 531 10
/**
 *
 */
46
void BulletWorld::clear_filter_callback(void);

1297 25 ~BulletPersistentManifold 0 516 1583 51 BulletPersistentManifold::~BulletPersistentManifold 0 0 10
/**
 *
 */
65
inline BulletPersistentManifold::~BulletPersistentManifold(void);

1298 9 get_node0 0 4 1583 35 BulletPersistentManifold::get_node0 0 1 545 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node0(void);

1299 9 get_node1 0 4 1583 35 BulletPersistentManifold::get_node1 0 1 546 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node1(void);

1300 23 get_num_manifold_points 0 4 1583 49 BulletPersistentManifold::get_num_manifold_points 0 1 547 10
/**
 *
 */
66
int BulletPersistentManifold::get_num_manifold_points(void) const;

1301 18 get_manifold_point 0 4 1583 44 BulletPersistentManifold::get_manifold_point 0 1 548 10
/**
 *
 */
80
BulletManifoldPoint BulletPersistentManifold::get_manifold_point(int idx) const;

1302 30 get_contact_breaking_threshold 0 4 1583 56 BulletPersistentManifold::get_contact_breaking_threshold 0 1 549 10
/**
 *
 */
81
PN_stdfloat BulletPersistentManifold::get_contact_breaking_threshold(void) const;

1303 32 get_contact_processing_threshold 0 4 1583 58 BulletPersistentManifold::get_contact_processing_threshold 0 1 550 10
/**
 *
 */
83
PN_stdfloat BulletPersistentManifold::get_contact_processing_threshold(void) const;

1304 14 clear_manifold 0 4 1583 40 BulletPersistentManifold::clear_manifold 0 1 551 10
/**
 *
 */
52
void BulletPersistentManifold::clear_manifold(void);

1305 24 BulletPersistentManifold 0 260 1583 50 BulletPersistentManifold::BulletPersistentManifold 0 1 544 10
/**
 *
 */
102
inline BulletPersistentManifold::BulletPersistentManifold(BulletPersistentManifold const &) = default;

1306 12 attach_ghost 0 4 1574 25 BulletWorld::attach_ghost 0 1 532 98
// Deprecated methods, will be removed soon

/**
 * @deprecated Please use BulletWorld::attach
 */
54
void BulletWorld::attach_ghost(BulletGhostNode *node);

1307 12 remove_ghost 0 4 1574 25 BulletWorld::remove_ghost 0 1 533 53
/**
 * @deprecated Please use BulletWorld::remove
 */
54
void BulletWorld::remove_ghost(BulletGhostNode *node);

1308 17 attach_rigid_body 0 4 1574 30 BulletWorld::attach_rigid_body 0 1 534 53
/**
 * @deprecated Please use BulletWorld::attach
 */
63
void BulletWorld::attach_rigid_body(BulletRigidBodyNode *node);

1309 17 remove_rigid_body 0 4 1574 30 BulletWorld::remove_rigid_body 0 1 535 53
/**
 * @deprecated Please use BulletWorld::remove
 */
63
void BulletWorld::remove_rigid_body(BulletRigidBodyNode *node);

1310 16 attach_soft_body 0 4 1574 29 BulletWorld::attach_soft_body 0 1 536 53
/**
 * @deprecated Please use BulletWorld::attach
 */
61
void BulletWorld::attach_soft_body(BulletSoftBodyNode *node);

1311 16 remove_soft_body 0 4 1574 29 BulletWorld::remove_soft_body 0 1 537 53
/**
 * @deprecated Please use BulletWorld::remove
 */
61
void BulletWorld::remove_soft_body(BulletSoftBodyNode *node);

1312 16 attach_character 0 4 1574 29 BulletWorld::attach_character 0 1 538 53
/**
 * @deprecated Please use BulletWorld::attach
 */
76
void BulletWorld::attach_character(BulletBaseCharacterControllerNode *node);

1313 16 remove_character 0 4 1574 29 BulletWorld::remove_character 0 1 539 53
/**
 * @deprecated Please use BulletWorld::remove
 */
76
void BulletWorld::remove_character(BulletBaseCharacterControllerNode *node);

1314 14 attach_vehicle 0 4 1574 27 BulletWorld::attach_vehicle 0 1 540 53
/**
 * @deprecated Please use BulletWorld::attach
 */
57
void BulletWorld::attach_vehicle(BulletVehicle *vehicle);

1315 14 remove_vehicle 0 4 1574 27 BulletWorld::remove_vehicle 0 1 541 53
/**
 * @deprecated Please use BulletWorld::remove
 */
57
void BulletWorld::remove_vehicle(BulletVehicle *vehicle);

1316 17 remove_constraint 0 4 1574 30 BulletWorld::remove_constraint 0 1 542 53
/**
 * @deprecated Please use BulletWorld::remove
 */
66
void BulletWorld::remove_constraint(BulletConstraint *constraint);

1317 14 get_class_type 0 4 1574 27 BulletWorld::get_class_type 0 1 543 0
52
static TypeHandle BulletWorld::get_class_type(void);

1318 21 BulletConvexHullShape 0 260 1584 44 BulletConvexHullShape::BulletConvexHullShape 0 2 552 553 22
/**
 *
 */

/**
 *
 */
132
BulletConvexHullShape::BulletConvexHullShape(void);
BulletConvexHullShape::BulletConvexHullShape(BulletConvexHullShape const &copy);

1319 9 add_point 0 4 1584 32 BulletConvexHullShape::add_point 0 1 554 10
/**
 *
 */
56
void BulletConvexHullShape::add_point(LPoint3 const &p);

1320 9 add_array 0 4 1584 32 BulletConvexHullShape::add_array 0 1 555 10
/**
 *
 */
67
void BulletConvexHullShape::add_array(PTA_LVecBase3 const &points);

1321 8 add_geom 0 4 1584 31 BulletConvexHullShape::add_geom 0 1 556 10
/**
 *
 */
115
void BulletConvexHullShape::add_geom(Geom const *geom, TransformState const *ts = TransformState::make_identity());

1322 14 get_class_type 0 4 1584 37 BulletConvexHullShape::get_class_type 0 1 557 0
62
static TypeHandle BulletConvexHullShape::get_class_type(void);

1323 27 BulletConvexPointCloudShape 0 260 1585 56 BulletConvexPointCloudShape::BulletConvexPointCloudShape 0 3 558 559 560 74
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
347
explicit BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale = LVecBase3(1.0));
explicit BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale = LVecBase3(1.0));
BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy);

1324 14 get_num_points 0 4 1585 43 BulletConvexPointCloudShape::get_num_points 0 1 561 10
/**
 *
 */
60
int BulletConvexPointCloudShape::get_num_points(void) const;

1325 14 get_class_type 0 4 1585 43 BulletConvexPointCloudShape::get_class_type 0 1 562 0
68
static TypeHandle BulletConvexPointCloudShape::get_class_type(void);

1326 19 BulletCylinderShape 0 260 1586 40 BulletCylinderShape::BulletCylinderShape 0 3 563 564 565 74
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
298
explicit BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
explicit BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up);
BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy);

1327 10 get_radius 0 4 1586 31 BulletCylinderShape::get_radius 0 1 566 10
/**
 *
 */
56
PN_stdfloat BulletCylinderShape::get_radius(void) const;

1328 31 get_half_extents_without_margin 0 4 1586 52 BulletCylinderShape::get_half_extents_without_margin 0 1 567 10
/**
 *
 */
75
LVecBase3 BulletCylinderShape::get_half_extents_without_margin(void) const;

1329 28 get_half_extents_with_margin 0 4 1586 49 BulletCylinderShape::get_half_extents_with_margin 0 1 568 10
/**
 *
 */
72
LVecBase3 BulletCylinderShape::get_half_extents_with_margin(void) const;

1330 14 get_class_type 0 4 1586 35 BulletCylinderShape::get_class_type 0 1 569 0
60
static TypeHandle BulletCylinderShape::get_class_type(void);

1331 24 BulletFilterCallbackData 0 260 1587 50 BulletFilterCallbackData::BulletFilterCallbackData 0 1 570 10
/**
 *
 */
94
inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1);

1332 10 get_node_0 0 4 1587 36 BulletFilterCallbackData::get_node_0 0 1 571 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_0(void) const;

1333 10 get_node_1 0 4 1587 36 BulletFilterCallbackData::get_node_1 0 1 572 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_1(void) const;

1334 11 set_collide 0 4 1587 37 BulletFilterCallbackData::set_collide 0 1 573 10
/**
 *
 */
64
inline void BulletFilterCallbackData::set_collide(bool collide);

1335 11 get_collide 0 4 1587 37 BulletFilterCallbackData::get_collide 0 1 574 10
/**
 *
 */
62
inline bool BulletFilterCallbackData::get_collide(void) const;

1336 14 get_class_type 0 4 1587 40 BulletFilterCallbackData::get_class_type 0 1 575 0
65
static TypeHandle BulletFilterCallbackData::get_class_type(void);

1337 25 ~BulletFilterCallbackData 0 516 1587 51 BulletFilterCallbackData::~BulletFilterCallbackData 0 0 0
58
BulletFilterCallbackData::~BulletFilterCallbackData(void);

1338 26 BulletRotationalLimitMotor 0 260 1588 54 BulletRotationalLimitMotor::BulletRotationalLimitMotor 0 1 576 22
/**
 *
 */

/**
 *
 */
95
BulletRotationalLimitMotor::BulletRotationalLimitMotor(BulletRotationalLimitMotor const &copy);

1339 27 ~BulletRotationalLimitMotor 0 516 1588 55 BulletRotationalLimitMotor::~BulletRotationalLimitMotor 0 0 10
/**
 *
 */
69
inline BulletRotationalLimitMotor::~BulletRotationalLimitMotor(void);

1340 17 set_motor_enabled 0 4 1588 45 BulletRotationalLimitMotor::set_motor_enabled 0 1 577 10
/**
 *
 */
64
void BulletRotationalLimitMotor::set_motor_enabled(bool enable);

1341 13 set_low_limit 0 4 1588 41 BulletRotationalLimitMotor::set_low_limit 0 1 578 10
/**
 *
 */
66
void BulletRotationalLimitMotor::set_low_limit(PN_stdfloat limit);

1342 14 set_high_limit 0 4 1588 42 BulletRotationalLimitMotor::set_high_limit 0 1 579 10
/**
 *
 */
67
void BulletRotationalLimitMotor::set_high_limit(PN_stdfloat limit);

1343 19 set_target_velocity 0 4 1588 47 BulletRotationalLimitMotor::set_target_velocity 0 1 580 10
/**
 *
 */
75
void BulletRotationalLimitMotor::set_target_velocity(PN_stdfloat velocity);

1344 19 set_max_motor_force 0 4 1588 47 BulletRotationalLimitMotor::set_max_motor_force 0 1 581 10
/**
 *
 */
72
void BulletRotationalLimitMotor::set_max_motor_force(PN_stdfloat force);

1345 19 set_max_limit_force 0 4 1588 47 BulletRotationalLimitMotor::set_max_limit_force 0 1 582 10
/**
 *
 */
72
void BulletRotationalLimitMotor::set_max_limit_force(PN_stdfloat force);

1346 11 set_damping 0 4 1588 39 BulletRotationalLimitMotor::set_damping 0 1 583 10
/**
 *
 */
66
void BulletRotationalLimitMotor::set_damping(PN_stdfloat damping);

1347 12 set_softness 0 4 1588 40 BulletRotationalLimitMotor::set_softness 0 1 584 10
/**
 *
 */
68
void BulletRotationalLimitMotor::set_softness(PN_stdfloat softness);

1348 10 set_bounce 0 4 1588 38 BulletRotationalLimitMotor::set_bounce 0 1 585 10
/**
 *
 */
64
void BulletRotationalLimitMotor::set_bounce(PN_stdfloat bounce);

1349 14 set_normal_cfm 0 4 1588 42 BulletRotationalLimitMotor::set_normal_cfm 0 1 586 10
/**
 *
 */
65
void BulletRotationalLimitMotor::set_normal_cfm(PN_stdfloat cfm);

1350 12 set_stop_cfm 0 4 1588 40 BulletRotationalLimitMotor::set_stop_cfm 0 1 587 10
/**
 *
 */
63
void BulletRotationalLimitMotor::set_stop_cfm(PN_stdfloat cfm);

1351 12 set_stop_erp 0 4 1588 40 BulletRotationalLimitMotor::set_stop_erp 0 1 588 10
/**
 *
 */
63
void BulletRotationalLimitMotor::set_stop_erp(PN_stdfloat erp);

1352 10 is_limited 0 4 1588 38 BulletRotationalLimitMotor::is_limited 0 1 589 10
/**
 *
 */
56
bool BulletRotationalLimitMotor::is_limited(void) const;

1353 17 get_motor_enabled 0 4 1588 45 BulletRotationalLimitMotor::get_motor_enabled 0 1 590 10
/**
 *
 */
63
bool BulletRotationalLimitMotor::get_motor_enabled(void) const;

1354 17 get_current_limit 0 4 1588 45 BulletRotationalLimitMotor::get_current_limit 0 1 591 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
62
int BulletRotationalLimitMotor::get_current_limit(void) const;

1355 17 get_current_error 0 4 1588 45 BulletRotationalLimitMotor::get_current_error 0 1 592 10
/**
 *
 */
70
PN_stdfloat BulletRotationalLimitMotor::get_current_error(void) const;

1356 20 get_current_position 0 4 1588 48 BulletRotationalLimitMotor::get_current_position 0 1 593 10
/**
 *
 */
73
PN_stdfloat BulletRotationalLimitMotor::get_current_position(void) const;

1357 23 get_accumulated_impulse 0 4 1588 51 BulletRotationalLimitMotor::get_accumulated_impulse 0 1 594 10
/**
 *
 */
76
PN_stdfloat BulletRotationalLimitMotor::get_accumulated_impulse(void) const;

1358 29 BulletTranslationalLimitMotor 0 260 1589 60 BulletTranslationalLimitMotor::BulletTranslationalLimitMotor 0 1 595 22
/**
 *
 */

/**
 *
 */
104
BulletTranslationalLimitMotor::BulletTranslationalLimitMotor(BulletTranslationalLimitMotor const &copy);

1359 30 ~BulletTranslationalLimitMotor 0 516 1589 61 BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor 0 0 10
/**
 *
 */
75
inline BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor(void);

1360 17 set_motor_enabled 0 4 1589 48 BulletTranslationalLimitMotor::set_motor_enabled 0 1 596 10
/**
 *
 */
77
void BulletTranslationalLimitMotor::set_motor_enabled(int axis, bool enable);

1361 13 set_low_limit 0 4 1589 44 BulletTranslationalLimitMotor::set_low_limit 0 1 597 10
/**
 *
 */
74
void BulletTranslationalLimitMotor::set_low_limit(LVecBase3 const &limit);

1362 14 set_high_limit 0 4 1589 45 BulletTranslationalLimitMotor::set_high_limit 0 1 598 10
/**
 *
 */
75
void BulletTranslationalLimitMotor::set_high_limit(LVecBase3 const &limit);

1363 19 set_target_velocity 0 4 1589 50 BulletTranslationalLimitMotor::set_target_velocity 0 1 599 10
/**
 *
 */
83
void BulletTranslationalLimitMotor::set_target_velocity(LVecBase3 const &velocity);

1364 19 set_max_motor_force 0 4 1589 50 BulletTranslationalLimitMotor::set_max_motor_force 0 1 600 10
/**
 *
 */
80
void BulletTranslationalLimitMotor::set_max_motor_force(LVecBase3 const &force);

1365 11 set_damping 0 4 1589 42 BulletTranslationalLimitMotor::set_damping 0 1 601 10
/**
 *
 */
69
void BulletTranslationalLimitMotor::set_damping(PN_stdfloat damping);

1366 12 set_softness 0 4 1589 43 BulletTranslationalLimitMotor::set_softness 0 1 602 10
/**
 *
 */
71
void BulletTranslationalLimitMotor::set_softness(PN_stdfloat softness);

1367 15 set_restitution 0 4 1589 46 BulletTranslationalLimitMotor::set_restitution 0 1 603 10
/**
 *
 */
77
void BulletTranslationalLimitMotor::set_restitution(PN_stdfloat restitution);

1368 14 set_normal_cfm 0 4 1589 45 BulletTranslationalLimitMotor::set_normal_cfm 0 1 604 10
/**
 *
 */
73
void BulletTranslationalLimitMotor::set_normal_cfm(LVecBase3 const &cfm);

1369 12 set_stop_erp 0 4 1589 43 BulletTranslationalLimitMotor::set_stop_erp 0 1 605 10
/**
 *
 */
71
void BulletTranslationalLimitMotor::set_stop_erp(LVecBase3 const &erp);

1370 12 set_stop_cfm 0 4 1589 43 BulletTranslationalLimitMotor::set_stop_cfm 0 1 606 10
/**
 *
 */
71
void BulletTranslationalLimitMotor::set_stop_cfm(LVecBase3 const &cfm);

1371 10 is_limited 0 4 1589 41 BulletTranslationalLimitMotor::is_limited 0 1 607 10
/**
 *
 */
63
bool BulletTranslationalLimitMotor::is_limited(int axis) const;

1372 17 get_motor_enabled 0 4 1589 48 BulletTranslationalLimitMotor::get_motor_enabled 0 1 608 10
/**
 *
 */
70
bool BulletTranslationalLimitMotor::get_motor_enabled(int axis) const;

1373 17 get_current_limit 0 4 1589 48 BulletTranslationalLimitMotor::get_current_limit 0 1 609 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
69
int BulletTranslationalLimitMotor::get_current_limit(int axis) const;

1374 17 get_current_error 0 4 1589 48 BulletTranslationalLimitMotor::get_current_error 0 1 610 10
/**
 *
 */
70
LVector3 BulletTranslationalLimitMotor::get_current_error(void) const;

1375 16 get_current_diff 0 4 1589 47 BulletTranslationalLimitMotor::get_current_diff 0 1 611 10
/**
 *
 */
68
LPoint3 BulletTranslationalLimitMotor::get_current_diff(void) const;

1376 23 get_accumulated_impulse 0 4 1589 54 BulletTranslationalLimitMotor::get_accumulated_impulse 0 1 612 10
/**
 *
 */
76
LVector3 BulletTranslationalLimitMotor::get_accumulated_impulse(void) const;

1377 23 BulletGenericConstraint 0 260 1590 48 BulletGenericConstraint::BulletGenericConstraint 0 2 613 614 22
/**
 *
 */

/**
 *
 */
351
explicit BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a);
explicit BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1378 8 get_axis 0 4 1590 33 BulletGenericConstraint::get_axis 0 1 615 23
// Geometry

/**
 *
 */
59
LVector3 BulletGenericConstraint::get_axis(int axis) const;

1379 9 get_pivot 0 4 1590 34 BulletGenericConstraint::get_pivot 0 1 616 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_pivot(int axis) const;

1380 9 get_angle 0 4 1590 34 BulletGenericConstraint::get_angle 0 1 617 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_angle(int axis) const;

1381 16 set_linear_limit 0 4 1590 41 BulletGenericConstraint::set_linear_limit 0 1 618 20
// Limit

/**
 *
 */
92
void BulletGenericConstraint::set_linear_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1382 17 set_angular_limit 0 4 1590 42 BulletGenericConstraint::set_angular_limit 0 1 619 10
/**
 *
 */
93
void BulletGenericConstraint::set_angular_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1383 26 get_rotational_limit_motor 0 4 1590 51 BulletGenericConstraint::get_rotational_limit_motor 0 1 620 21
// Motors

/**
 *
 */
89
BulletRotationalLimitMotor BulletGenericConstraint::get_rotational_limit_motor(int axis);

1384 29 get_translational_limit_motor 0 4 1590 54 BulletGenericConstraint::get_translational_limit_motor 0 1 621 10
/**
 *
 */
91
BulletTranslationalLimitMotor BulletGenericConstraint::get_translational_limit_motor(void);

1385 10 set_frames 0 4 1590 35 BulletGenericConstraint::set_frames 0 1 622 21
// Frames

/**
 *
 */
97
void BulletGenericConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1386 11 get_frame_a 0 4 1590 36 BulletGenericConstraint::get_frame_a 0 1 623 10
/**
 *
 */
82
ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_a(void) const;

1387 11 get_frame_b 0 4 1590 36 BulletGenericConstraint::get_frame_b 0 1 624 10
/**
 *
 */
82
ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_b(void) const;

1388 14 get_class_type 0 4 1590 39 BulletGenericConstraint::get_class_type 0 1 625 0
64
static TypeHandle BulletGenericConstraint::get_class_type(void);

1389 22 BulletHeightfieldShape 0 260 1591 46 BulletHeightfieldShape::BulletHeightfieldShape 0 3 626 627 628 579
/**
 * Only used by make_from_bam
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */

/**
 *
 */
334
explicit BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
explicit BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
BulletHeightfieldShape::BulletHeightfieldShape(BulletHeightfieldShape const &copy);

1390 27 set_use_diamond_subdivision 0 4 1591 51 BulletHeightfieldShape::set_use_diamond_subdivision 0 1 629 10
/**
 *
 */
75
void BulletHeightfieldShape::set_use_diamond_subdivision(bool flag = true);

1391 14 get_class_type 0 4 1591 38 BulletHeightfieldShape::get_class_type 0 1 630 0
63
static TypeHandle BulletHeightfieldShape::get_class_type(void);

1392 21 from_collision_solids 0 4 1592 35 BulletHelper::from_collision_solids 0 1 633 31
// Collision shapes

/**
 *
 */
96
static NodePathCollection BulletHelper::from_collision_solids(NodePath &np, bool clear = false);

1393 12 get_sb_index 0 4 1592 26 BulletHelper::get_sb_index 0 1 634 48
// Internal names

// Internal names

/**
 *
 */
73
static inline PointerTo< InternalName > BulletHelper::get_sb_index(void);

1394 11 get_sb_flip 0 4 1592 25 BulletHelper::get_sb_flip 0 1 635 10
/**
 *
 */
72
static inline PointerTo< InternalName > BulletHelper::get_sb_flip(void);

1395 19 add_sb_index_column 0 4 1592 33 BulletHelper::add_sb_index_column 0 1 636 31
// Geom vertex data

/**
 *
 */
108
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_index_column(GeomVertexFormat const *format);

1396 18 add_sb_flip_column 0 4 1592 32 BulletHelper::add_sb_flip_column 0 1 637 10
/**
 *
 */
107
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_flip_column(GeomVertexFormat const *format);

1397 20 make_geom_from_faces 0 4 1592 34 BulletHelper::make_geom_from_faces 0 1 638 25
// Geom utils

/**
 *
 */
152
static PointerTo< Geom > BulletHelper::make_geom_from_faces(BulletSoftBodyNode *node, GeomVertexFormat const *format = nullptr, bool two_sided = false);

1398 20 make_geom_from_links 0 4 1592 34 BulletHelper::make_geom_from_links 0 1 639 10
/**
 *
 */
128
static PointerTo< Geom > BulletHelper::make_geom_from_links(BulletSoftBodyNode *node, GeomVertexFormat const *format = nullptr);

1399 24 make_texcoords_for_patch 0 4 1592 38 BulletHelper::make_texcoords_for_patch 0 1 640 10
/**
 *
 */
83
static void BulletHelper::make_texcoords_for_patch(Geom *geom, int resx, int resy);

1400 12 BulletHelper 0 260 1592 26 BulletHelper::BulletHelper 0 2 631 632 0
117
inline BulletHelper::BulletHelper(void) = default;
inline BulletHelper::BulletHelper(BulletHelper const &) = default;

1401 13 ~BulletHelper 0 516 1592 27 BulletHelper::~BulletHelper 0 0 0
34
BulletHelper::~BulletHelper(void);

1402 21 BulletHingeConstraint 0 260 1594 44 BulletHingeConstraint::BulletHingeConstraint 0 4 641 642 643 644 709
/**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */

/**
 * Constructs a hinge constraint which connects two rigid bodies.
 */

/**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */

/**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */
761
explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a = false);
explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false);
explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a = false);
explicit BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a = false);

1403 15 get_hinge_angle 0 4 1594 38 BulletHingeConstraint::get_hinge_angle 0 1 645 66
/**
 * Returns the angle between node_a and node_b in degrees.
 */
57
PN_stdfloat BulletHingeConstraint::get_hinge_angle(void);

1404 15 get_lower_limit 0 4 1594 38 BulletHingeConstraint::get_lower_limit 0 1 646 54
/**
 * Returns the lower angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_lower_limit(void) const;

1405 15 get_upper_limit 0 4 1594 38 BulletHingeConstraint::get_upper_limit 0 1 647 54
/**
 * Returns the upper angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_upper_limit(void) const;

1406 16 get_angular_only 0 4 1594 39 BulletHingeConstraint::get_angular_only 0 1 648 10
/**
 *
 */
57
bool BulletHingeConstraint::get_angular_only(void) const;

1407 16 set_angular_only 0 4 1594 39 BulletHingeConstraint::set_angular_only 0 1 649 10
/**
 *
 */
57
void BulletHingeConstraint::set_angular_only(bool value);

1408 9 set_limit 0 4 1594 32 BulletHingeConstraint::set_limit 0 1 650 65
/**
 * Sets the lower and upper rotational limits in degrees.
 */
171
void BulletHingeConstraint::set_limit(PN_stdfloat low, PN_stdfloat high, PN_stdfloat softness = 0.9, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

1409 8 set_axis 0 4 1594 31 BulletHingeConstraint::set_axis 0 1 651 63
/**
 * Sets the hinge's rotation axis in world coordinates.
 */
59
void BulletHingeConstraint::set_axis(LVector3 const &axis);

1410 20 enable_angular_motor 0 4 1594 43 BulletHingeConstraint::enable_angular_motor 0 1 652 261
/**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */
116
void BulletHingeConstraint::enable_angular_motor(bool enable, PN_stdfloat target_velocity, PN_stdfloat max_impulse);

1411 12 enable_motor 0 4 1594 35 BulletHingeConstraint::enable_motor 0 1 653 10
/**
 *
 */
54
void BulletHingeConstraint::enable_motor(bool enable);

1412 21 set_max_motor_impulse 0 4 1594 44 BulletHingeConstraint::set_max_motor_impulse 0 1 654 96
/**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */
75
void BulletHingeConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

1413 16 set_motor_target 0 4 1594 39 BulletHingeConstraint::set_motor_target 0 2 655 656 22
/**
 *
 */

/**
 *
 */
174
void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt);
void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt);

1414 10 set_frames 0 4 1594 33 BulletHingeConstraint::set_frames 0 1 657 10
/**
 *
 */
95
void BulletHingeConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1415 11 get_frame_a 0 4 1594 34 BulletHingeConstraint::get_frame_a 0 1 658 10
/**
 *
 */
80
ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_a(void) const;

1416 11 get_frame_b 0 4 1594 34 BulletHingeConstraint::get_frame_b 0 1 659 10
/**
 *
 */
80
ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_b(void) const;

1417 14 get_class_type 0 4 1594 37 BulletHingeConstraint::get_class_type 0 1 660 0
62
static TypeHandle BulletHingeConstraint::get_class_type(void);

1418 23 BulletMinkowskiSumShape 0 260 1595 48 BulletMinkowskiSumShape::BulletMinkowskiSumShape 0 2 661 662 62
/**
 * Only used by make_from_bam.
 */

/**
 *
 */

/**
 *
 */
201
explicit BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b);
BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletMinkowskiSumShape const &copy);

1419 15 set_transform_a 0 4 1595 40 BulletMinkowskiSumShape::set_transform_a 0 1 663 10
/**
 *
 */
72
void BulletMinkowskiSumShape::set_transform_a(TransformState const *ts);

1420 15 set_transform_b 0 4 1595 40 BulletMinkowskiSumShape::set_transform_b 0 1 664 10
/**
 *
 */
72
void BulletMinkowskiSumShape::set_transform_b(TransformState const *ts);

1421 15 get_transform_a 0 4 1595 40 BulletMinkowskiSumShape::get_transform_a 0 1 665 10
/**
 *
 */
86
ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_a(void) const;

1422 15 get_transform_b 0 4 1595 40 BulletMinkowskiSumShape::get_transform_b 0 1 666 10
/**
 *
 */
86
ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_b(void) const;

1423 11 get_shape_a 0 4 1595 36 BulletMinkowskiSumShape::get_shape_a 0 1 667 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_a(void) const;

1424 11 get_shape_b 0 4 1595 36 BulletMinkowskiSumShape::get_shape_b 0 1 668 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_b(void) const;

1425 14 get_class_type 0 4 1595 39 BulletMinkowskiSumShape::get_class_type 0 1 669 0
64
static TypeHandle BulletMinkowskiSumShape::get_class_type(void);

1426 22 BulletMultiSphereShape 0 260 1598 46 BulletMultiSphereShape::BulletMultiSphereShape 0 2 670 671 22
/**
 *
 */

/**
 *
 */
196
explicit BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii);
BulletMultiSphereShape::BulletMultiSphereShape(BulletMultiSphereShape const &copy);

1427 10 operator = 0 4 1598 34 BulletMultiSphereShape::operator = 0 1 672 0
76
void BulletMultiSphereShape::operator =(BulletMultiSphereShape const &copy);

1428 16 get_sphere_count 0 4 1598 40 BulletMultiSphereShape::get_sphere_count 0 1 673 10
/**
 *
 */
57
int BulletMultiSphereShape::get_sphere_count(void) const;

1429 14 get_sphere_pos 0 4 1598 38 BulletMultiSphereShape::get_sphere_pos 0 1 674 10
/**
 *
 */
64
LPoint3 BulletMultiSphereShape::get_sphere_pos(int index) const;

1430 17 get_sphere_radius 0 4 1598 41 BulletMultiSphereShape::get_sphere_radius 0 1 675 10
/**
 *
 */
71
PN_stdfloat BulletMultiSphereShape::get_sphere_radius(int index) const;

1431 14 get_class_type 0 4 1598 38 BulletMultiSphereShape::get_class_type 0 1 676 0
63
static TypeHandle BulletMultiSphereShape::get_class_type(void);

1432 16 BulletPlaneShape 0 260 1599 34 BulletPlaneShape::BulletPlaneShape 0 3 677 678 679 81
/**
 * Creates a plane shape from a plane definition.
 */

/**
 *
 */

/**
 *
 */
215
explicit BulletPlaneShape::BulletPlaneShape(LPlane plane);
explicit BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant);
BulletPlaneShape::BulletPlaneShape(BulletPlaneShape const &copy);

1433 9 get_plane 0 4 1599 27 BulletPlaneShape::get_plane 0 1 680 10
/**
 *
 */
47
LPlane BulletPlaneShape::get_plane(void) const;

1434 16 get_plane_normal 0 4 1599 34 BulletPlaneShape::get_plane_normal 0 1 681 10
/**
 *
 */
56
LVector3 BulletPlaneShape::get_plane_normal(void) const;

1435 18 get_plane_constant 0 4 1599 36 BulletPlaneShape::get_plane_constant 0 1 682 10
/**
 *
 */
61
PN_stdfloat BulletPlaneShape::get_plane_constant(void) const;

1436 15 make_from_solid 0 4 1599 33 BulletPlaneShape::make_from_solid 0 1 683 10
/**
 *
 */
88
static BulletPlaneShape *BulletPlaneShape::make_from_solid(CollisionPlane const *solid);

1437 14 get_class_type 0 4 1599 32 BulletPlaneShape::get_class_type 0 1 684 0
57
static TypeHandle BulletPlaneShape::get_class_type(void);

1438 22 BulletSliderConstraint 0 260 1602 46 BulletSliderConstraint::BulletSliderConstraint 0 2 685 686 22
/**
 *
 */

/**
 *
 */
346
explicit BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a);
explicit BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1439 14 get_linear_pos 0 4 1602 38 BulletSliderConstraint::get_linear_pos 0 1 687 10
/**
 *
 */
63
PN_stdfloat BulletSliderConstraint::get_linear_pos(void) const;

1440 15 get_angular_pos 0 4 1602 39 BulletSliderConstraint::get_angular_pos 0 1 688 10
/**
 *
 */
64
PN_stdfloat BulletSliderConstraint::get_angular_pos(void) const;

1441 22 get_lower_linear_limit 0 4 1602 46 BulletSliderConstraint::get_lower_linear_limit 0 1 689 32
// Limits

// Limits

/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_lower_linear_limit(void) const;

1442 22 get_upper_linear_limit 0 4 1602 46 BulletSliderConstraint::get_upper_linear_limit 0 1 690 10
/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_upper_linear_limit(void) const;

1443 23 get_lower_angular_limit 0 4 1602 47 BulletSliderConstraint::get_lower_angular_limit 0 1 691 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_lower_angular_limit(void) const;

1444 23 get_upper_angular_limit 0 4 1602 47 BulletSliderConstraint::get_upper_angular_limit 0 1 692 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_upper_angular_limit(void) const;

1445 22 set_lower_linear_limit 0 4 1602 46 BulletSliderConstraint::set_lower_linear_limit 0 1 693 10
/**
 *
 */
71
void BulletSliderConstraint::set_lower_linear_limit(PN_stdfloat value);

1446 22 set_upper_linear_limit 0 4 1602 46 BulletSliderConstraint::set_upper_linear_limit 0 1 694 10
/**
 *
 */
71
void BulletSliderConstraint::set_upper_linear_limit(PN_stdfloat value);

1447 23 set_lower_angular_limit 0 4 1602 47 BulletSliderConstraint::set_lower_angular_limit 0 1 695 10
/**
 *
 */
72
void BulletSliderConstraint::set_lower_angular_limit(PN_stdfloat value);

1448 23 set_upper_angular_limit 0 4 1602 47 BulletSliderConstraint::set_upper_angular_limit 0 1 696 10
/**
 *
 */
72
void BulletSliderConstraint::set_upper_angular_limit(PN_stdfloat value);

1449 24 set_powered_linear_motor 0 4 1602 48 BulletSliderConstraint::set_powered_linear_motor 0 1 697 44
// Linear motor

// Linear motor

/**
 *
 */
63
void BulletSliderConstraint::set_powered_linear_motor(bool on);

1450 32 set_target_linear_motor_velocity 0 4 1602 56 BulletSliderConstraint::set_target_linear_motor_velocity 0 1 698 10
/**
 *
 */
91
void BulletSliderConstraint::set_target_linear_motor_velocity(PN_stdfloat target_velocity);

1451 26 set_max_linear_motor_force 0 4 1602 50 BulletSliderConstraint::set_max_linear_motor_force 0 1 699 10
/**
 *
 */
79
void BulletSliderConstraint::set_max_linear_motor_force(PN_stdfloat max_force);

1452 24 get_powered_linear_motor 0 4 1602 48 BulletSliderConstraint::get_powered_linear_motor 0 1 700 10
/**
 *
 */
66
bool BulletSliderConstraint::get_powered_linear_motor(void) const;

1453 32 get_target_linear_motor_velocity 0 4 1602 56 BulletSliderConstraint::get_target_linear_motor_velocity 0 1 701 10
/**
 *
 */
81
PN_stdfloat BulletSliderConstraint::get_target_linear_motor_velocity(void) const;

1454 26 get_max_linear_motor_force 0 4 1602 50 BulletSliderConstraint::get_max_linear_motor_force 0 1 702 10
/**
 *
 */
75
PN_stdfloat BulletSliderConstraint::get_max_linear_motor_force(void) const;

1455 25 set_powered_angular_motor 0 4 1602 49 BulletSliderConstraint::set_powered_angular_motor 0 1 703 46
// Angular motor

// Angular motor

/**
 *
 */
64
void BulletSliderConstraint::set_powered_angular_motor(bool on);

1456 33 set_target_angular_motor_velocity 0 4 1602 57 BulletSliderConstraint::set_target_angular_motor_velocity 0 1 704 10
/**
 *
 */
92
void BulletSliderConstraint::set_target_angular_motor_velocity(PN_stdfloat target_velocity);

1457 27 set_max_angular_motor_force 0 4 1602 51 BulletSliderConstraint::set_max_angular_motor_force 0 1 705 10
/**
 *
 */
80
void BulletSliderConstraint::set_max_angular_motor_force(PN_stdfloat max_force);

1458 25 get_powered_angular_motor 0 4 1602 49 BulletSliderConstraint::get_powered_angular_motor 0 1 706 10
/**
 *
 */
67
bool BulletSliderConstraint::get_powered_angular_motor(void) const;

1459 33 get_target_angular_motor_velocity 0 4 1602 57 BulletSliderConstraint::get_target_angular_motor_velocity 0 1 707 10
/**
 *
 */
82
PN_stdfloat BulletSliderConstraint::get_target_angular_motor_velocity(void) const;

1460 27 get_max_angular_motor_force 0 4 1602 51 BulletSliderConstraint::get_max_angular_motor_force 0 1 708 10
/**
 *
 */
76
PN_stdfloat BulletSliderConstraint::get_max_angular_motor_force(void) const;

1461 10 set_frames 0 4 1602 34 BulletSliderConstraint::set_frames 0 1 709 21
// Frames

/**
 *
 */
96
void BulletSliderConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1462 11 get_frame_a 0 4 1602 35 BulletSliderConstraint::get_frame_a 0 1 710 10
/**
 *
 */
81
ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_a(void) const;

1463 11 get_frame_b 0 4 1602 35 BulletSliderConstraint::get_frame_b 0 1 711 10
/**
 *
 */
81
ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_b(void) const;

1464 14 get_class_type 0 4 1602 38 BulletSliderConstraint::get_class_type 0 1 712 0
63
static TypeHandle BulletSliderConstraint::get_class_type(void);

1465 18 upcast_to_IControl 0 12 1603 41 BulletSoftBodyControl::upcast_to_IControl 0 1 719 45
upcast from BulletSoftBodyControl to IControl
78
btSoftBody::AJoint::IControl *BulletSoftBodyControl::upcast_to_IControl(void);

1466 42 downcast_IControl_to_BulletSoftBodyControl 0 8 0 42 downcast_IControl_to_BulletSoftBodyControl 0 0 47
downcast from IControl to BulletSoftBodyControl
102
BulletSoftBodyControl *downcast_IControl_to_BulletSoftBodyControl(btSoftBody::AJoint::IControl *this);

1467 21 BulletSoftBodyControl 0 260 1603 44 BulletSoftBodyControl::BulletSoftBodyControl 0 2 713 714 10
/**
 *
 */
145
BulletSoftBodyControl::BulletSoftBodyControl(void);
inline BulletSoftBodyControl::BulletSoftBodyControl(BulletSoftBodyControl const &) = default;

1468 22 ~BulletSoftBodyControl 0 518 1603 45 BulletSoftBodyControl::~BulletSoftBodyControl 0 0 10
/**
 *
 */
60
virtual BulletSoftBodyControl::~BulletSoftBodyControl(void);

1469 8 set_goal 0 4 1603 31 BulletSoftBodyControl::set_goal 0 1 715 20
// Motor

/**
 *
 */
62
inline void BulletSoftBodyControl::set_goal(PN_stdfloat goal);

1470 14 set_max_torque 0 4 1603 37 BulletSoftBodyControl::set_max_torque 0 1 716 10
/**
 *
 */
73
inline void BulletSoftBodyControl::set_max_torque(PN_stdfloat maxtorque);

1471 9 set_angle 0 4 1603 32 BulletSoftBodyControl::set_angle 0 1 717 20
// Steer

/**
 *
 */
64
inline void BulletSoftBodyControl::set_angle(PN_stdfloat angle);

1472 8 set_sign 0 4 1603 31 BulletSoftBodyControl::set_sign 0 1 718 10
/**
 *
 */
62
inline void BulletSoftBodyControl::set_sign(PN_stdfloat sign);

1473 8 get_body 0 4 1607 29 BulletSoftBodyShape::get_body 0 1 720 10
/**
 *
 */
62
BulletSoftBodyNode *BulletSoftBodyShape::get_body(void) const;

1474 14 get_class_type 0 4 1607 35 BulletSoftBodyShape::get_class_type 0 1 721 0
60
static TypeHandle BulletSoftBodyShape::get_class_type(void);

1475 17 BulletSphereShape 0 260 1608 36 BulletSphereShape::BulletSphereShape 0 2 722 723 22
/**
 *
 */

/**
 *
 */
135
explicit BulletSphereShape::BulletSphereShape(PN_stdfloat radius);
BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy);

1476 10 get_radius 0 4 1608 29 BulletSphereShape::get_radius 0 1 724 69
/**
 * Returns the radius that was used to construct this sphere.
 */
61
inline PN_stdfloat BulletSphereShape::get_radius(void) const;

1477 15 make_from_solid 0 4 1608 34 BulletSphereShape::make_from_solid 0 1 725 10
/**
 *
 */
91
static BulletSphereShape *BulletSphereShape::make_from_solid(CollisionSphere const *solid);

1478 14 get_class_type 0 4 1608 33 BulletSphereShape::get_class_type 0 1 726 0
58
static TypeHandle BulletSphereShape::get_class_type(void);

1479 25 BulletSphericalConstraint 0 260 1609 52 BulletSphericalConstraint::BulletSphericalConstraint 0 2 727 728 22
/**
 *
 */

/**
 *
 */
302
explicit BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a);
explicit BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b);

1480 11 set_pivot_a 0 4 1609 38 BulletSphericalConstraint::set_pivot_a 0 1 729 32
// Pivots

// Pivots

/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_a(LPoint3 const &pivot_a);

1481 11 set_pivot_b 0 4 1609 38 BulletSphericalConstraint::set_pivot_b 0 1 730 10
/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_b(LPoint3 const &pivot_b);

1482 14 get_pivot_in_a 0 4 1609 41 BulletSphericalConstraint::get_pivot_in_a 0 1 731 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_a(void) const;

1483 14 get_pivot_in_b 0 4 1609 41 BulletSphericalConstraint::get_pivot_in_b 0 1 732 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_b(void) const;

1484 14 get_class_type 0 4 1609 41 BulletSphericalConstraint::get_class_type 0 1 733 0
66
static TypeHandle BulletSphericalConstraint::get_class_type(void);

1485 22 BulletTickCallbackData 0 260 1610 46 BulletTickCallbackData::BulletTickCallbackData 0 1 734 10
/**
 *
 */
82
inline explicit BulletTickCallbackData::BulletTickCallbackData(btScalar timestep);

1486 12 get_timestep 0 4 1610 36 BulletTickCallbackData::get_timestep 0 1 735 10
/**
 *
 */
68
inline PN_stdfloat BulletTickCallbackData::get_timestep(void) const;

1487 14 get_class_type 0 4 1610 38 BulletTickCallbackData::get_class_type 0 1 736 0
63
static TypeHandle BulletTickCallbackData::get_class_type(void);

1488 23 ~BulletTickCallbackData 0 516 1610 47 BulletTickCallbackData::~BulletTickCallbackData 0 0 0
54
BulletTickCallbackData::~BulletTickCallbackData(void);

1489 18 BulletTriangleMesh 0 260 1611 38 BulletTriangleMesh::BulletTriangleMesh 0 1 737 10
/**
 *
 */
45
BulletTriangleMesh::BulletTriangleMesh(void);

1490 12 add_triangle 0 4 1611 32 BulletTriangleMesh::add_triangle 0 1 738 347
/**
 * Adds a triangle with the indicated coordinates.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
135
void BulletTriangleMesh::add_triangle(LPoint3 const &p0, LPoint3 const &p1, LPoint3 const &p2, bool remove_duplicate_vertices = false);

1491 9 add_array 0 4 1611 29 BulletTriangleMesh::add_array 0 1 739 452
/**
 * Adds triangle information from an array of points and indices referring to
 * these points.  This is more efficient than adding triangles one at a time.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
128
void BulletTriangleMesh::add_array(PTA_LVecBase3 const &points, PTA_int const &indices, bool remove_duplicate_vertices = false);

1492 8 add_geom 0 4 1611 28 BulletTriangleMesh::add_geom 0 1 740 461
/**
 * Adds the geometry from the indicated Geom from the triangle mesh.  This is
 * a one-time copy operation, and future updates to the Geom will not be
 * reflected.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */
152
void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices = false, TransformState const *ts = TransformState::make_identity());

1493 20 set_welding_distance 0 4 1611 40 BulletTriangleMesh::set_welding_distance 0 1 741 254
/**
 * Sets the square of the distance at which vertices will be merged
 * together when adding geometry with remove_duplicate_vertices set to true.
 *
 * The default is 0, meaning vertices will only be merged if they have the
 * exact same position.
 */
68
void BulletTriangleMesh::set_welding_distance(PN_stdfloat distance);

1494 11 preallocate 0 4 1611 31 BulletTriangleMesh::preallocate 0 1 742 239
/**
 * Used to reserve memory in anticipation of the given amount of vertices and
 * indices being added to the triangle mesh.  This is useful if you are about
 * to call add_triangle() many times, to prevent unnecessary reallocations.
 */
69
void BulletTriangleMesh::preallocate(int num_verts, int num_indices);

1495 17 get_num_triangles 0 4 1611 37 BulletTriangleMesh::get_num_triangles 0 1 743 65
/**
 * Returns the number of triangles in this triangle mesh.
 */
62
std::size_t BulletTriangleMesh::get_num_triangles(void) const;

1496 20 get_welding_distance 0 4 1611 40 BulletTriangleMesh::get_welding_distance 0 1 744 110
/**
 * Returns the value previously set with set_welding_distance(), or the
 * value of 0 if none was set.
 */
65
PN_stdfloat BulletTriangleMesh::get_welding_distance(void) const;

1497 6 output 0 6 1611 26 BulletTriangleMesh::output 0 1 745 10
/**
 *
 */
65
virtual void BulletTriangleMesh::output(std::ostream &out) const;

1498 5 write 0 6 1611 25 BulletTriangleMesh::write 0 1 746 10
/**
 *
 */
82
virtual void BulletTriangleMesh::write(std::ostream &out, int indent_level) const;

1499 16 get_num_vertices 0 4 1611 36 BulletTriangleMesh::get_num_vertices 0 1 748 64
/**
 * Returns the number of vertices in this triangle mesh.
 */
61
std::size_t BulletTriangleMesh::get_num_vertices(void) const;

1500 10 get_vertex 0 4 1611 30 BulletTriangleMesh::get_vertex 0 0 56
/**
 * Returns the vertex at the given vertex index.
 */
64
LPoint3 BulletTriangleMesh::get_vertex(std::size_t index) const;

1501 12 get_triangle 0 4 1611 32 BulletTriangleMesh::get_triangle 0 0 73
/**
 * Returns the vertex indices making up the given triangle index.
 */
69
LVecBase3i BulletTriangleMesh::get_triangle(std::size_t index) const;

1502 14 get_class_type 0 4 1611 34 BulletTriangleMesh::get_class_type 0 1 747 0
59
static TypeHandle BulletTriangleMesh::get_class_type(void);

1503 23 BulletTriangleMeshShape 0 260 1613 48 BulletTriangleMeshShape::BulletTriangleMeshShape 0 2 749 750 207
/**
 * Only used by make_from_bam.
 */

/**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 * Assumes the lock(bullet global lock) is held by the caller
 */

/**
 *
 */
224
explicit BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true);
BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMeshShape const &copy);

1504 10 refit_tree 0 4 1613 35 BulletTriangleMeshShape::refit_tree 0 1 751 10
/**
 *
 */
91
void BulletTriangleMeshShape::refit_tree(LPoint3 const &aabb_min, LPoint3 const &aabb_max);

1505 9 is_static 0 4 1613 34 BulletTriangleMeshShape::is_static 0 1 752 10
/**
 *
 */
59
inline bool BulletTriangleMeshShape::is_static(void) const;

1506 10 is_dynamic 0 4 1613 35 BulletTriangleMeshShape::is_dynamic 0 1 753 10
/**
 *
 */
60
inline bool BulletTriangleMeshShape::is_dynamic(void) const;

1507 14 get_class_type 0 4 1613 39 BulletTriangleMeshShape::get_class_type 0 1 754 0
64
static TypeHandle BulletTriangleMeshShape::get_class_type(void);

756
1 0 0 7 28 1614 767 0 0 0 
2 0 0 15 28 1614 767 0 0 1 6 param0 0 1615  
3 0 0 7 6 1614 767 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
4 0 0 7 7 1511 0 0 10 /**
 *
 */ 1 4 this 3 1615  
5 0 0 7 8 1617 0 0 10 /**
 *
 */ 1 4 this 3 1615  
6 0 0 7 9 1618 0 0 10 /**
 *
 */ 1 4 this 3 1615  
7 0 0 6 10 1517 0 0 10 /**
 *
 */ 1 4 this 3 1615  
8 0 0 6 11 1519 0 0 10 /**
 *
 */ 1 4 this 3 1615  
9 0 0 6 12 1519 0 0 10 /**
 *
 */ 1 4 this 3 1615  
10 0 0 7 37 1619 779 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
11 0 0 7 38 1617 0 0 10 /**
 *
 */ 1 4 this 3 1620  
12 0 0 7 39 1617 0 0 10 /**
 *
 */ 1 4 this 3 1620  
13 0 0 6 40 1525 0 0 10 /**
 *
 */ 1 4 this 3 1620  
14 0 0 6 41 1517 0 0 10 /**
 *
 */ 1 4 this 3 1620  
15 0 0 6 42 1519 0 0 10 /**
 *
 */ 1 4 this 3 1620  
16 0 0 7 43 1615 0 0 10 /**
 *
 */ 2 4 this 3 1620  3 idx 1 1519  
17 0 0 6 33 1622 0 0 0 1 4 this 3 1619  
18 0 0 6 35 1623 0 0 0 1 4 this 3 1619  
19 0 0 6 52 1525 0 0 10 /**
 *
 */ 1 4 this 3 1596  
20 0 0 6 53 1525 0 0 10 /**
 *
 */ 1 4 this 3 1596  
21 0 0 6 54 1525 0 0 10 /**
 *
 */ 1 4 this 3 1596  
22 0 0 6 55 1525 0 0 10 /**
 *
 */ 1 4 this 3 1596  
23 0 0 6 56 1525 0 0 10 /**
 *
 */ 1 4 this 3 1596  
24 0 0 6 57 1525 0 0 10 /**
 *
 */ 1 4 this 3 1596  
25 0 0 6 58 1525 0 0 10 /**
 *
 */ 1 4 this 3 1596  
26 0 0 4 59 1624 0 0 10 /**
 *
 */ 2 4 this 3 1532  6 margin 1 1517  
27 0 0 6 60 1625 0 0 10 /**
 *
 */ 1 4 this 3 1596  
28 0 0 6 61 1517 0 0 10 /**
 *
 */ 1 4 this 3 1596  
29 0 0 7 62 1626 0 0 62 /**
 * Returns the current bounds of this collision shape.
 */ 1 4 this 3 1596  
30 0 0 7 78 1628 0 0 0 0 
31 0 0 7 80 1628 0 0 0 0 
32 0 0 4 83 1624 0 0 9 // Shapes 3 4 this 3 1629  5 shape 1 1532  5 xform 5 1630  
33 0 0 4 84 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  5 shape 1 1532  
34 0 0 6 85 1519 0 0 10 /**
 *
 */ 1 4 this 3 1633  
35 0 0 7 86 1532 0 0 10 /**
 *
 */ 2 4 this 3 1633  3 idx 1 1519  
36 0 0 7 88 1617 0 0 10 /**
 *
 */ 2 4 this 3 1633  3 idx 1 1519  
37 0 0 7 89 1635 0 0 10 /**
 *
 */ 2 4 this 3 1633  3 idx 1 1519  
38 0 0 7 90 1630 0 0 10 /**
 *
 */ 2 4 this 3 1633  3 idx 1 1519  
39 0 0 7 91 1626 0 0 81 /**
 * Returns the current bounds of all collision shapes owned by this body.
 */ 1 4 this 3 1633  
40 0 0 4 92 1624 0 0 69 /**
 * Add shapes from the specified collision node to this body.
 */ 2 4 this 3 1629  5 cnode 1 1636  
41 0 0 4 92 1624 0 0 268 /**
 * Add shapes from the specified collision node to this body. Also apply the
 * given transform state to all solids. This is useful for example when the
 * collision node is rotated, is not centered to origin, or has several parent
 * transforms applied on it.
 */ 3 4 this 3 1629  5 cnode 1 1636  18 relative_transform 1 1630  
42 0 0 6 93 1525 0 0 23 // Static and kinematic 1 4 this 3 1633  
43 0 0 6 94 1525 0 0 10 /**
 *
 */ 1 4 this 3 1633  
44 0 0 4 95 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  5 value 1 1525  
45 0 0 4 96 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  5 value 1 1525  
46 0 0 4 97 1624 0 0 11 // Contacts 2 4 this 3 1629  4 mask 1 1638  
47 0 0 4 98 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  5 value 1 1525  
48 0 0 6 99 1525 0 0 10 /**
 *
 */ 1 4 this 3 1633  
49 0 0 4 100 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  5 value 1 1525  
50 0 0 6 101 1525 0 0 10 /**
 *
 */ 1 4 this 3 1633  
51 0 0 6 102 1525 0 0 10 /**
 *
 */ 2 4 this 3 1629  4 node 1 1511  
52 0 0 6 103 1525 0 0 10 /**
 *
 */ 1 4 this 3 1633  
53 0 0 6 104 1517 0 0 10 /**
 *
 */ 1 4 this 3 1633  
54 0 0 4 105 1624 0 0 106 /**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */ 2 4 this 3 1629  9 threshold 1 1517  
55 0 0 6 106 1525 0 0 15 // Deactivation 1 4 this 3 1633  
56 0 0 4 107 1624 0 0 10 /**
 *
 */ 3 4 this 3 1629  6 active 1 1525  5 force 5 1525  
57 0 0 4 108 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  6 active 1 1525  
58 0 0 4 109 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  2 dt 1 1517  
59 0 0 6 110 1517 0 0 10 /**
 *
 */ 1 4 this 3 1633  
60 0 0 4 111 1624 0 0 163 /**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */ 2 4 this 3 1629  7 enabled 1 1525  
61 0 0 6 112 1525 0 0 10 /**
 *
 */ 1 4 this 3 1633  
62 0 0 4 113 1624 0 0 132 /**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */ 2 4 this 3 1629  7 enabled 1 1642  
63 0 0 6 114 1525 0 0 141 /**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */ 1 4 this 3 1633  
64 0 0 6 115 1517 0 0 27 // Friction and Restitution 1 4 this 3 1633  
65 0 0 4 116 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  11 restitution 1 1517  
66 0 0 6 117 1517 0 0 10 /**
 *
 */ 1 4 this 3 1633  
67 0 0 4 118 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  8 friction 1 1517  
68 0 0 6 119 1525 0 0 10 /**
 *
 */ 1 4 this 3 1633  
69 0 0 4 120 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  8 friction 1 1643  
70 0 0 7 121 1645 0 0 10 /**
 *
 */ 1 4 this 3 1633  
71 0 0 6 122 1517 0 0 10 /**
 *
 */ 1 4 this 3 1633  
72 0 0 6 123 1517 0 0 10 /**
 *
 */ 1 4 this 3 1633  
73 0 0 4 124 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  6 radius 1 1517  
74 0 0 4 125 1624 0 0 10 /**
 *
 */ 2 4 this 3 1629  9 threshold 1 1517  
75 0 0 4 126 1624 0 0 216 /**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */ 1 4 this 3 1629  
76 0 0 7 153 1628 0 0 0 0 
77 0 0 15 155 1648 0 0 10 /**
 *
 */ 1 4 copy 1 1646  
78 0 0 7 155 1648 0 0 10 /**
 *
 */ 1 11 halfExtents 1 1643  
79 0 0 7 156 1645 0 0 10 /**
 *
 */ 1 4 this 3 1646  
80 0 0 7 157 1645 0 0 10 /**
 *
 */ 1 4 this 3 1646  
81 0 0 7 158 1648 0 0 10 /**
 *
 */ 1 5 solid 1 1649  
82 0 0 7 161 1628 0 0 0 0 
83 0 0 15 163 1654 0 0 10 /**
 *
 */ 1 4 copy 1 1652  
84 0 0 7 163 1654 0 0 10 /**
 *
 */ 3 6 radius 1 1517  6 height 1 1517  2 up 5 1508  
85 0 0 7 164 1654 0 0 130 /**
 * Constructs a new BulletCapsuleShape using the information from a
 * CollisionCapsule from the builtin collision system.
 */ 1 5 solid 1 1655  
86 0 0 6 165 1517 0 0 70 /**
 * Returns the radius that was used to construct this capsule.
 */ 1 4 this 3 1652  
87 0 0 6 166 1517 0 0 81 /**
 * Returns half of get_height().
 * @deprecated see get_height() instead.
 */ 1 4 this 3 1652  
88 0 0 7 170 1628 0 0 0 0 
89 0 0 7 172 1658 793 0 10 /**
 *
 */ 3 5 shape 1 1532  11 step_height 1 1517  4 name 5 1625  
90 0 0 4 173 1624 0 0 10 /**
 *
 */ 3 4 this 3 1658  8 velocity 1 1659  8 is_local 1 1525  
91 0 0 4 174 1624 0 0 10 /**
 *
 */ 2 4 this 3 1658  5 omega 1 1517  
92 0 0 7 175 1532 0 0 10 /**
 *
 */ 1 4 this 3 1661  
93 0 0 4 176 1624 0 0 10 /**
 *
 */ 2 4 this 3 1658  7 gravity 1 1517  
94 0 0 6 177 1517 0 0 10 /**
 *
 */ 1 4 this 3 1661  
95 0 0 4 178 1624 0 0 10 /**
 *
 */ 2 4 this 3 1658  10 fall_speed 1 1517  
96 0 0 4 179 1624 0 0 10 /**
 *
 */ 2 4 this 3 1658  10 jump_speed 1 1517  
97 0 0 4 180 1624 0 0 10 /**
 *
 */ 2 4 this 3 1658  15 max_jump_height 1 1517  
98 0 0 4 181 1624 0 0 10 /**
 *
 */ 2 4 this 3 1658  9 max_slope 1 1517  
99 0 0 6 182 1517 0 0 10 /**
 *
 */ 1 4 this 3 1661  
100 0 0 4 183 1624 0 0 10 /**
 *
 */ 2 4 this 3 1658  5 value 1 1525  
101 0 0 6 184 1525 0 0 10 /**
 *
 */ 1 4 this 3 1661  
102 0 0 6 185 1525 0 0 10 /**
 *
 */ 1 4 this 3 1661  
103 0 0 4 186 1624 0 0 10 /**
 *
 */ 1 4 this 3 1658  
104 0 0 7 191 1628 0 0 0 0 
105 0 0 15 216 1665 880 0 0 1 6 param0 0 1663  
106 0 0 7 198 1665 880 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
107 0 0 7 199 1617 0 0 10 /**
 *
 */ 1 4 this 3 1663  
108 0 0 7 200 1617 0 0 10 /**
 *
 */ 1 4 this 3 1663  
109 0 0 6 201 1525 0 0 10 /**
 *
 */ 1 4 this 3 1663  
110 0 0 7 202 1511 0 0 10 /**
 *
 */ 1 4 this 3 1663  
111 0 0 7 203 1617 0 0 10 /**
 *
 */ 1 4 this 3 1663  
112 0 0 7 204 1618 0 0 10 /**
 *
 */ 1 4 this 3 1663  
113 0 0 6 205 1517 0 0 10 /**
 *
 */ 1 4 this 3 1663  
114 0 0 6 206 1519 0 0 10 /**
 *
 */ 1 4 this 3 1663  
115 0 0 6 207 1519 0 0 10 /**
 *
 */ 1 4 this 3 1663  
116 0 0 6 194 1666 0 0 0 1 4 this 3 1665  
117 0 0 6 196 1623 0 0 0 1 4 this 3 1665  
118 0 0 15 238 1669 894 0 0 1 6 param0 0 1667  
119 0 0 7 224 1669 894 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
120 0 0 7 225 1617 0 0 10 /**
 *
 */ 1 4 this 3 1667  
121 0 0 7 226 1617 0 0 10 /**
 *
 */ 1 4 this 3 1667  
122 0 0 6 227 1525 0 0 10 /**
 *
 */ 1 4 this 3 1667  
123 0 0 7 228 1511 0 0 10 /**
 *
 */ 1 4 this 3 1667  
124 0 0 7 229 1617 0 0 10 /**
 *
 */ 1 4 this 3 1667  
125 0 0 7 230 1618 0 0 10 /**
 *
 */ 1 4 this 3 1667  
126 0 0 6 231 1517 0 0 10 /**
 *
 */ 1 4 this 3 1667  
127 0 0 6 220 1670 0 0 0 1 4 this 3 1669  
128 0 0 6 222 1623 0 0 0 1 4 this 3 1669  
129 0 0 15 241 1673 0 0 10 /**
 *
 */ 1 4 copy 1 1671  
130 0 0 7 241 1673 0 0 10 /**
 *
 */ 3 6 radius 1 1517  6 height 1 1517  2 up 5 1508  
131 0 0 6 242 1517 0 0 67 /**
 * Returns the radius that was passed into the constructor.
 */ 1 4 this 3 1671  
132 0 0 6 243 1517 0 0 67 /**
 * Returns the height that was passed into the constructor.
 */ 1 4 this 3 1671  
133 0 0 7 246 1628 0 0 0 0 
134 0 0 7 249 1549 0 0 10 /**
 *
 */ 1 4 this 3 1582  
135 0 0 7 250 1549 0 0 10 /**
 *
 */ 1 4 this 3 1582  
136 0 0 4 251 1624 0 0 10 /**
 *
 */ 2 4 this 3 1582  5 value 1 1525  
137 0 0 4 252 1624 0 0 10 /**
 *
 */ 2 4 this 3 1582  4 size 1 1517  
138 0 0 6 253 1517 0 0 10 /**
 *
 */ 1 4 this 3 1582  
139 0 0 6 254 1517 0 0 10 /**
 *
 */ 1 4 this 3 1674  
140 0 0 4 255 1624 0 0 212 /**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */ 2 4 this 3 1582  9 threshold 1 1517  
141 0 0 6 256 1517 0 0 73 /**
 * Returns the applied impluse limit for breaking the constraint.
 */ 1 4 this 3 1674  
142 0 0 4 257 1624 0 0 10 /**
 *
 */ 2 4 this 3 1582  7 enabled 1 1525  
143 0 0 6 258 1525 0 0 53 /**
 * Returns TRUE if the constraint is enabled.
 */ 1 4 this 3 1674  
144 0 0 4 260 1624 0 0 10 /**
 *
 */ 4 4 this 3 1582  3 num 1 1548  5 value 1 1517  4 axis 5 1519  
145 0 0 6 261 1517 0 0 10 /**
 *
 */ 3 4 this 3 1582  3 num 1 1548  4 axis 5 1519  
146 0 0 7 325 1628 0 0 0 0 
147 0 0 7 265 1549 0 0 10 /**
 *
 */ 1 4 name 5 1625  
148 0 0 4 266 1624 0 0 257 /**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */ 2 4 this 3 1549  4 mass 1 1517  
149 0 0 6 267 1517 0 0 128 /**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */ 1 4 this 3 1676  
150 0 0 6 268 1517 0 0 52 /**
 * Returns the inverse mass of a rigid body.
 */ 1 4 this 3 1676  
151 0 0 4 269 1624 0 0 591 /**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */ 2 4 this 3 1549  7 inertia 1 1643  
152 0 0 7 270 1618 0 0 174 /**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */ 1 4 this 3 1676  
153 0 0 7 271 1618 0 0 10 /**
 *
 */ 1 4 this 3 1676  
154 0 0 7 272 1678 0 0 10 /**
 *
 */ 1 4 this 3 1676  
155 0 0 7 273 1618 0 0 11 // Velocity 1 4 this 3 1676  
156 0 0 7 274 1618 0 0 10 /**
 *
 */ 1 4 this 3 1676  
157 0 0 4 275 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  8 velocity 1 1659  
158 0 0 4 276 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  8 velocity 1 1659  
159 0 0 6 277 1517 0 0 10 // Damping 1 4 this 3 1676  
160 0 0 6 278 1517 0 0 10 /**
 *
 */ 1 4 this 3 1676  
161 0 0 4 279 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  5 value 1 1517  
162 0 0 4 280 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  5 value 1 1517  
163 0 0 4 281 1624 0 0 9 // Forces 1 4 this 3 1549  
164 0 0 4 282 1624 0 0 10 /**
 *
 */ 3 4 this 3 1549  5 force 1 1659  3 pos 1 1679  
165 0 0 4 283 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  5 force 1 1659  
166 0 0 4 284 1624 0 0 10 /**
 *
 */ 3 4 this 3 1549  7 impulse 1 1659  3 pos 1 1679  
167 0 0 4 285 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  7 impulse 1 1659  
168 0 0 4 286 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  6 torque 1 1659  
169 0 0 4 287 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  6 torque 1 1659  
170 0 0 7 288 1618 0 0 10 /**
 *
 */ 1 4 this 3 1676  
171 0 0 7 289 1618 0 0 10 /**
 *
 */ 1 4 this 3 1676  
172 0 0 6 290 1517 0 0 26 // Deactivation thresholds 1 4 this 3 1676  
173 0 0 6 291 1517 0 0 10 /**
 *
 */ 1 4 this 3 1676  
174 0 0 4 292 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  9 threshold 1 1517  
175 0 0 4 293 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  9 threshold 1 1517  
176 0 0 4 294 1624 0 0 10 // Gravity 2 4 this 3 1549  7 gravity 1 1659  
177 0 0 7 295 1618 0 0 10 /**
 *
 */ 1 4 this 3 1676  
178 0 0 7 296 1618 0 0 20 // Restrict movement 1 4 this 3 1676  
179 0 0 7 297 1618 0 0 10 /**
 *
 */ 1 4 this 3 1676  
180 0 0 4 298 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  6 factor 1 1659  
181 0 0 4 299 1624 0 0 10 /**
 *
 */ 2 4 this 3 1549  6 factor 1 1659  
182 0 0 6 300 1525 0 0 123 /**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */ 1 4 this 3 1549  
183 0 0 7 319 1628 0 0 0 0 
184 0 0 7 327 1681 0 0 10 /**
 *
 */ 4 6 node_a 1 1676  6 node_b 1 1676  7 frame_a 1 1630  7 frame_b 1 1630  
185 0 0 7 327 1681 0 0 10 /**
 *
 */ 2 6 node_a 1 1676  7 frame_a 1 1630  
186 0 0 4 328 1624 0 0 10 /**
 *
 */ 7 4 this 3 1681  6 swing1 1 1517  6 swing2 1 1517  5 twist 1 1517  8 softness 5 1517  4 bias 5 1517  10 relaxation 5 1517  
187 0 0 4 328 1624 0 0 10 /**
 *
 */ 3 4 this 3 1681  5 index 1 1519  5 value 1 1517  
188 0 0 4 329 1624 0 0 10 /**
 *
 */ 2 4 this 3 1681  7 damping 1 1517  
189 0 0 6 330 1517 0 0 10 /**
 *
 */ 1 4 this 3 1682  
190 0 0 4 331 1624 0 0 10 /**
 *
 */ 2 4 this 3 1681  9 threshold 1 1517  
191 0 0 4 332 1624 0 0 10 /**
 *
 */ 2 4 this 3 1681  6 enable 1 1525  
192 0 0 4 333 1624 0 0 10 /**
 *
 */ 2 4 this 3 1681  11 max_impulse 1 1517  
193 0 0 4 334 1624 0 0 10 /**
 *
 */ 2 4 this 3 1681  11 max_impulse 1 1517  
194 0 0 4 335 1624 0 0 10 /**
 *
 */ 2 4 this 3 1681  4 quat 1 1684  
195 0 0 4 336 1624 0 0 10 /**
 *
 */ 2 4 this 3 1681  4 quat 1 1684  
196 0 0 4 337 1624 0 0 10 /**
 *
 */ 3 4 this 3 1681  4 ts_a 1 1630  4 ts_b 1 1630  
197 0 0 7 338 1630 0 0 10 /**
 *
 */ 1 4 this 3 1682  
198 0 0 7 339 1630 0 0 10 /**
 *
 */ 1 4 this 3 1682  
199 0 0 7 343 1628 0 0 0 0 
200 0 0 6 346 1519 0 0 10 /**
 *
 */ 1 4 this 3 1688  
201 0 0 6 347 1517 0 0 10 /**
 *
 */ 1 4 this 3 1688  
202 0 0 6 348 1517 0 0 10 /**
 *
 */ 1 4 this 3 1688  
203 0 0 7 349 1617 0 0 10 /**
 *
 */ 1 4 this 3 1688  
204 0 0 7 350 1617 0 0 10 /**
 *
 */ 1 4 this 3 1688  
205 0 0 7 351 1618 0 0 10 /**
 *
 */ 1 4 this 3 1688  
206 0 0 7 352 1617 0 0 10 /**
 *
 */ 1 4 this 3 1688  
207 0 0 7 353 1617 0 0 10 /**
 *
 */ 1 4 this 3 1688  
208 0 0 6 354 1519 0 0 10 /**
 *
 */ 1 4 this 3 1688  
209 0 0 6 355 1519 0 0 10 /**
 *
 */ 1 4 this 3 1688  
210 0 0 6 356 1519 0 0 10 /**
 *
 */ 1 4 this 3 1688  
211 0 0 6 357 1519 0 0 10 /**
 *
 */ 1 4 this 3 1688  
212 0 0 4 358 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  5 value 1 1525  
213 0 0 4 359 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  3 dir 1 1643  
214 0 0 4 360 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  3 dir 1 1643  
215 0 0 4 361 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  5 value 1 1517  
216 0 0 4 362 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  5 value 1 1517  
217 0 0 4 363 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  5 value 1 1517  
218 0 0 4 364 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  5 value 1 1517  
219 0 0 4 365 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  5 value 1 1517  
220 0 0 4 366 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  5 value 1 1517  
221 0 0 4 367 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  5 value 1 1517  
222 0 0 4 368 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  5 value 1 1517  
223 0 0 4 369 1624 0 0 10 /**
 *
 */ 2 4 this 3 1690  5 value 1 1517  
224 0 0 6 370 1525 0 0 10 /**
 *
 */ 1 4 this 3 1688  
225 0 0 7 371 1618 0 0 10 /**
 *
 */ 1 4 this 3 1688  
226 0 0 7 372 1618 0 0 10 /**
 *
 */ 1 4 this 3 1688  
227 0 0 6 373 1517 0 0 10 /**
 *
 */ 1 4 this 3 1688  
228 0 0 6 374 1517 0 0 10 /**
 *
 */ 1 4 this 3 1688  
229 0 0 6 375 1517 0 0 10 /**
 *
 */ 1 4 this 3 1688  
230 0 0 6 376 1517 0 0 10 /**
 *
 */ 1 4 this 3 1688  
231 0 0 6 377 1517 0 0 10 /**
 *
 */ 1 4 this 3 1688  
232 0 0 6 378 1517 0 0 10 /**
 *
 */ 1 4 this 3 1688  
233 0 0 6 379 1517 0 0 10 /**
 *
 */ 1 4 this 3 1688  
234 0 0 6 380 1517 0 0 10 /**
 *
 */ 1 4 this 3 1688  
235 0 0 7 406 1691 0 0 10 /**
 *
 */ 7 2 mp 1 1690  5 node0 1 1511  5 node1 1 1511  3 id0 1 1519  3 id1 1 1519  6 index0 1 1519  6 index1 1 1519  
236 0 0 6 407 1690 0 0 10 /**
 *
 */ 1 4 this 3 1692  
237 0 0 7 408 1511 0 0 10 /**
 *
 */ 1 4 this 3 1692  
238 0 0 7 409 1511 0 0 10 /**
 *
 */ 1 4 this 3 1692  
239 0 0 6 410 1519 0 0 10 /**
 *
 */ 1 4 this 3 1692  
240 0 0 6 411 1519 0 0 10 /**
 *
 */ 1 4 this 3 1692  
241 0 0 6 412 1519 0 0 10 /**
 *
 */ 1 4 this 3 1692  
242 0 0 6 413 1519 0 0 10 /**
 *
 */ 1 4 this 3 1692  
243 0 0 7 421 1628 0 0 0 0 
244 0 0 7 423 1690 963 0 10 /**
 *
 */ 1 4 this 3 1694  
245 0 0 7 424 1511 0 0 10 /**
 *
 */ 1 4 this 3 1695  
246 0 0 7 425 1511 0 0 10 /**
 *
 */ 1 4 this 3 1695  
247 0 0 6 426 1519 0 0 10 /**
 *
 */ 1 4 this 3 1695  
248 0 0 6 427 1519 0 0 10 /**
 *
 */ 1 4 this 3 1695  
249 0 0 6 428 1519 0 0 10 /**
 *
 */ 1 4 this 3 1695  
250 0 0 6 429 1519 0 0 10 /**
 *
 */ 1 4 this 3 1695  
251 0 0 6 442 1519 0 0 10 /**
 *
 */ 1 4 this 3 1697  
252 0 0 7 443 1694 1015 0 10 /**
 *
 */ 2 4 this 3 1699  3 idx 1 1519  
253 0 0 6 440 1700 0 0 0 1 4 this 3 1699  
254 0 0 15 448 1577 0 0 0 1 6 param0 0 1701  
255 0 0 7 448 1577 0 0 10 /**
 *
 */ 1 4 name 5 1625  
256 0 0 4 449 1624 0 0 10 /**
 *
 */ 1 4 this 3 1577  
257 0 0 4 450 1624 0 0 64 /**
 * If true, displays collision shapes in wireframe mode.
 */ 2 4 this 3 1577  4 show 1 1525  
258 0 0 4 451 1624 0 0 102 /**
 * If true, display limits defined for constraints, e.g. a pivot axis or maximum
 * amplitude.
 */ 2 4 this 3 1577  4 show 1 1525  
259 0 0 4 452 1624 0 0 69 /**
 * If true, displays axis aligned bounding boxes for objects.
 */ 2 4 this 3 1577  4 show 1 1525  
260 0 0 4 453 1624 0 0 84 /**
 * If true, displays normal vectors for triangle mesh and heightfield faces.
 */ 2 4 this 3 1577  4 show 1 1525  
261 0 0 6 454 1525 0 0 10 /**
 *
 */ 1 4 this 3 1701  
262 0 0 6 455 1525 0 0 10 /**
 *
 */ 1 4 this 3 1701  
263 0 0 6 456 1525 0 0 10 /**
 *
 */ 1 4 this 3 1701  
264 0 0 6 457 1525 0 0 10 /**
 *
 */ 1 4 this 3 1701  
265 0 0 7 462 1628 0 0 0 0 
266 0 0 7 464 1578 0 0 10 /**
 *
 */ 1 4 name 5 1625  
267 0 0 6 465 1519 0 0 14 // Overlapping 1 4 this 3 1703  
268 0 0 7 466 1511 0 0 10 /**
 *
 */ 2 4 this 3 1703  3 idx 1 1519  
269 0 0 7 469 1628 0 0 0 0 
270 0 0 15 485 1707 1036 0 0 1 6 param0 0 1705  
271 0 0 7 472 1707 1036 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
272 0 0 7 473 1617 0 0 10 /**
 *
 */ 1 4 this 3 1705  
273 0 0 7 474 1618 0 0 10 /**
 *
 */ 1 4 this 3 1705  
274 0 0 7 475 1618 0 0 10 /**
 *
 */ 1 4 this 3 1705  
275 0 0 6 476 1517 0 0 10 /**
 *
 */ 1 4 this 3 1705  
276 0 0 6 477 1517 0 0 10 /**
 *
 */ 1 4 this 3 1705  
277 0 0 6 478 1519 0 0 10 /**
 *
 */ 1 4 this 3 1705  
278 0 0 7 487 1708 1089 0 10 /**
 *
 */ 1 4 this 3 1579  
279 0 0 7 488 1709 1144 0 10 /**
 *
 */ 1 4 this 3 1579  
280 0 0 4 489 1624 0 0 10 /**
 *
 */ 3 4 this 3 1579  8 distance 1 1519  8 material 5 1710  
281 0 0 4 490 1624 0 0 10 /**
 *
 */ 1 4 this 3 1579  
282 0 0 4 491 1624 0 0 24 // Mass, volume, density 2 4 this 3 1579  4 mass 1 1517  
283 0 0 4 492 1624 0 0 10 /**
 *
 */ 2 4 this 3 1579  7 density 1 1517  
284 0 0 4 493 1624 0 0 10 /**
 *
 */ 3 4 this 3 1579  4 mass 1 1517  9 fromfaces 5 1525  
285 0 0 4 494 1624 0 0 10 /**
 *
 */ 2 4 this 3 1579  7 density 1 1517  
286 0 0 4 495 1624 0 0 10 /**
 *
 */ 3 4 this 3 1579  4 node 1 1519  4 mass 1 1517  
287 0 0 6 496 1517 0 0 10 /**
 *
 */ 2 4 this 3 1711  4 node 1 1519  
288 0 0 6 497 1517 0 0 10 /**
 *
 */ 1 4 this 3 1711  
289 0 0 6 498 1517 0 0 10 /**
 *
 */ 1 4 this 3 1711  
290 0 0 4 499 1624 0 0 10 /**
 *
 */ 2 4 this 3 1579  5 force 1 1659  
291 0 0 4 499 1624 0 0 10 /**
 *
 */ 3 4 this 3 1579  5 force 1 1659  4 node 1 1519  
292 0 0 4 500 1624 0 0 10 /**
 *
 */ 2 4 this 3 1579  8 velocity 1 1659  
293 0 0 4 501 1624 0 0 10 /**
 *
 */ 2 4 this 3 1579  8 velocity 1 1659  
294 0 0 4 501 1624 0 0 10 /**
 *
 */ 3 4 this 3 1579  8 velocity 1 1659  4 node 1 1519  
295 0 0 4 502 1624 0 0 10 /**
 *
 */ 2 4 this 3 1579  8 velocity 1 1659  
296 0 0 7 503 1618 0 0 10 /**
 *
 */ 1 4 this 3 1711  
297 0 0 4 504 1624 0 0 10 /**
 *
 */ 3 4 this 3 1579  7 bvolume 1 1525  6 bframe 1 1525  
298 0 0 7 505 1713 0 0 10 /**
 *
 */ 1 4 this 3 1711  
299 0 0 4 506 1624 0 0 10 // Cluster 3 4 this 3 1579  1 k 1 1519  13 maxiterations 5 1519  
300 0 0 4 507 1624 0 0 10 /**
 *
 */ 2 4 this 3 1579  5 index 1 1519  
301 0 0 4 508 1624 0 0 10 /**
 *
 */ 1 4 this 3 1579  
302 0 0 6 509 1519 0 0 10 /**
 *
 */ 1 4 this 3 1711  
303 0 0 7 510 1645 0 0 10 /**
 *
 */ 2 4 this 3 1711  7 cluster 1 1519  
304 0 0 4 511 1624 0 0 12 // Rendering 2 4 this 3 1579  4 geom 1 1714  
305 0 0 4 512 1624 0 0 10 /**
 *
 */ 1 4 this 3 1579  
306 0 0 4 513 1624 0 0 10 /**
 *
 */ 2 4 this 3 1579  5 curve 1 1716  
307 0 0 4 514 1624 0 0 10 /**
 *
 */ 1 4 this 3 1579  
308 0 0 4 515 1624 0 0 10 /**
 *
 */ 2 4 this 3 1579  7 surface 1 1718  
309 0 0 4 516 1624 0 0 10 /**
 *
 */ 1 4 this 3 1579  
310 0 0 4 517 1624 0 0 10 /**
 *
 */ 5 4 this 3 1579  4 node 1 1519  4 body 1 1549  5 pivot 1 1659  7 disable 5 1525  
311 0 0 4 517 1624 0 0 10 // Anchors 4 4 this 3 1579  4 node 1 1519  4 body 1 1549  7 disable 5 1525  
312 0 0 4 518 1624 0 0 10 /**
 *
 */ 6 4 this 3 1579  4 body 1 1629  3 pos 1 1679  3 erp 5 1517  3 cfm 5 1517  5 split 5 1517  
313 0 0 4 518 1624 0 0 10 /**
 *
 */ 6 4 this 3 1579  4 body 1 1629  7 cluster 1 1519  3 erp 5 1517  3 cfm 5 1517  5 split 5 1517  
314 0 0 4 519 1624 0 0 10 /**
 *
 */ 7 4 this 3 1579  4 body 1 1629  4 axis 1 1659  3 erp 5 1517  3 cfm 5 1517  5 split 5 1517  7 control 5 1720  
315 0 0 6 520 1519 0 0 12 // Materials 1 4 this 3 1711  
316 0 0 7 521 1710 1157 0 10 /**
 *
 */ 2 4 this 3 1711  3 idx 1 1519  
317 0 0 7 523 1710 1157 0 10 /**
 *
 */ 1 4 this 3 1579  
318 0 0 6 524 1519 0 0 10 /**
 *
 */ 1 4 this 3 1711  
319 0 0 7 525 1707 1036 0 10 /**
 *
 */ 2 4 this 3 1711  3 idx 1 1519  
320 0 0 6 527 1519 0 0 212 /**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */ 3 4 this 3 1579  5 point 1 1645  5 local 1 1525  
321 0 0 7 528 1579 0 0 10 // Factory 5 4 info 1 1709  4 from 1 1679  2 to 1 1679  3 res 1 1519  6 fixeds 1 1519  
322 0 0 7 529 1579 0 0 10 /**
 *
 */ 9 4 info 1 1709  8 corner00 1 1679  8 corner10 1 1679  8 corner01 1 1679  8 corner11 1 1679  4 resx 1 1519  4 resy 1 1519  6 fixeds 1 1519  8 gendiags 1 1525  
323 0 0 7 530 1579 0 0 10 /**
 *
 */ 4 4 info 1 1709  6 center 1 1679  6 radius 1 1643  3 res 1 1519  
324 0 0 7 531 1579 0 0 10 /**
 *
 */ 3 4 info 1 1709  4 geom 1 1721  20 randomizeConstraints 5 1525  
325 0 0 7 531 1579 0 0 10 /**
 *
 */ 4 4 info 1 1709  6 points 1 1723  7 indices 1 1727  20 randomizeConstraints 5 1525  
326 0 0 7 532 1579 0 0 10 /**
 *
 */ 4 4 info 1 1709  6 points 1 1723  7 indices 1 1727  10 tetralinks 5 1525  
327 0 0 7 532 1579 0 0 10 /**
 *
 */ 4 4 info 1 1709  3 ele 1 1625  4 face 1 1625  4 node 1 1625  
328 0 0 7 656 1628 0 0 0 0 
329 0 0 15 616 1708 1089 0 0 1 6 param0 0 1730  
330 0 0 4 538 1624 0 0 10 /**
 *
 */ 1 4 this 3 1708  
331 0 0 4 539 1624 0 0 10 /**
 *
 */ 3 4 this 3 1708  4 flag 1 1565  5 value 1 1525  
332 0 0 6 540 1525 0 0 10 /**
 *
 */ 2 4 this 3 1730  4 flag 1 1565  
333 0 0 4 541 1624 0 0 10 /**
 *
 */ 2 4 this 3 1708  5 value 1 1566  
334 0 0 6 542 1566 0 0 10 /**
 *
 */ 1 4 this 3 1730  
335 0 0 4 543 1624 0 0 36 /**
 * Setter for property kVCF.
 */ 2 4 this 3 1708  5 value 1 1517  
336 0 0 4 544 1624 0 0 35 /**
 * Setter for property kDP.
 */ 2 4 this 3 1708  5 value 1 1517  
337 0 0 4 545 1624 0 0 35 /**
 * Setter for property kDG.
 */ 2 4 this 3 1708  5 value 1 1517  
338 0 0 4 546 1624 0 0 35 /**
 * Setter for property kLF.
 */ 2 4 this 3 1708  5 value 1 1517  
339 0 0 4 547 1624 0 0 35 /**
 * Setter for property kPR.
 */ 2 4 this 3 1708  5 value 1 1517  
340 0 0 4 548 1624 0 0 35 /**
 * Setter for property kVC.
 */ 2 4 this 3 1708  5 value 1 1517  
341 0 0 4 549 1624 0 0 35 /**
 * Setter for property kDF.
 */ 2 4 this 3 1708  5 value 1 1517  
342 0 0 4 550 1624 0 0 35 /**
 * Setter for property kMT.
 */ 2 4 this 3 1708  5 value 1 1517  
343 0 0 4 551 1624 0 0 36 /**
 * Setter for property kCHR.
 */ 2 4 this 3 1708  5 value 1 1517  
344 0 0 4 552 1624 0 0 36 /**
 * Setter for property kKHR.
 */ 2 4 this 3 1708  5 value 1 1517  
345 0 0 4 553 1624 0 0 36 /**
 * Setter for property kSHR.
 */ 2 4 this 3 1708  5 value 1 1517  
346 0 0 4 554 1624 0 0 36 /**
 * Setter for property kAHR.
 */ 2 4 this 3 1708  5 value 1 1517  
347 0 0 4 555 1624 0 0 40 /**
 * Setter for property kSRHR_CL.
 */ 2 4 this 3 1708  5 value 1 1517  
348 0 0 4 556 1624 0 0 40 /**
 * Setter for property kSKHR_CL.
 */ 2 4 this 3 1708  5 value 1 1517  
349 0 0 4 557 1624 0 0 40 /**
 * Setter for property kSSHR_CL.
 */ 2 4 this 3 1708  5 value 1 1517  
350 0 0 4 558 1624 0 0 43 /**
 * Setter for property kSR_SPLT_CL.
 */ 2 4 this 3 1708  5 value 1 1517  
351 0 0 4 559 1624 0 0 43 /**
 * Setter for property kSK_SPLT_CL.
 */ 2 4 this 3 1708  5 value 1 1517  
352 0 0 4 560 1624 0 0 43 /**
 * Setter for property kSS_SPLT_CL.
 */ 2 4 this 3 1708  5 value 1 1517  
353 0 0 4 561 1624 0 0 41 /**
 * Setter for property maxvolume.
 */ 2 4 this 3 1708  5 value 1 1517  
354 0 0 4 562 1624 0 0 41 /**
 * Setter for property timescale.
 */ 2 4 this 3 1708  5 value 1 1517  
355 0 0 4 563 1624 0 0 43 /**
 * Setter for property piterations.
 */ 2 4 this 3 1708  5 value 1 1519  
356 0 0 4 564 1624 0 0 43 /**
 * Setter for property viterations.
 */ 2 4 this 3 1708  5 value 1 1519  
357 0 0 4 565 1624 0 0 43 /**
 * Setter for property diterations.
 */ 2 4 this 3 1708  5 value 1 1519  
358 0 0 4 566 1624 0 0 43 /**
 * Setter for property citerations.
 */ 2 4 this 3 1708  5 value 1 1519  
359 0 0 6 567 1517 0 0 36 /**
 * Getter for property kVCF.
 */ 1 4 this 3 1730  
360 0 0 6 568 1517 0 0 35 /**
 * Getter for property kDP.
 */ 1 4 this 3 1730  
361 0 0 6 569 1517 0 0 35 /**
 * Getter for property kDG.
 */ 1 4 this 3 1730  
362 0 0 6 570 1517 0 0 35 /**
 * Getter for property kLF.
 */ 1 4 this 3 1730  
363 0 0 6 571 1517 0 0 35 /**
 * Getter for property kPR.
 */ 1 4 this 3 1730  
364 0 0 6 572 1517 0 0 35 /**
 * Getter for property kVC.
 */ 1 4 this 3 1730  
365 0 0 6 573 1517 0 0 35 /**
 * Getter for property kDF.
 */ 1 4 this 3 1730  
366 0 0 6 574 1517 0 0 35 /**
 * Getter for property kMT.
 */ 1 4 this 3 1730  
367 0 0 6 575 1517 0 0 36 /**
 * Getter for property kCHR.
 */ 1 4 this 3 1730  
368 0 0 6 576 1517 0 0 36 /**
 * Getter for property kKHR.
 */ 1 4 this 3 1730  
369 0 0 6 577 1517 0 0 36 /**
 * Getter for property kSHR.
 */ 1 4 this 3 1730  
370 0 0 6 578 1517 0 0 36 /**
 * Getter for property kAHR.
 */ 1 4 this 3 1730  
371 0 0 6 579 1517 0 0 40 /**
 * Getter for property kSRHR_CL.
 */ 1 4 this 3 1730  
372 0 0 6 580 1517 0 0 40 /**
 * Getter for property kSKHR_CL.
 */ 1 4 this 3 1730  
373 0 0 6 581 1517 0 0 40 /**
 * Getter for property kSSHR_CL.
 */ 1 4 this 3 1730  
374 0 0 6 582 1517 0 0 43 /**
 * Getter for property kSR_SPLT_CL.
 */ 1 4 this 3 1730  
375 0 0 6 583 1517 0 0 43 /**
 * Getter for property kSK_SPLT_CL.
 */ 1 4 this 3 1730  
376 0 0 6 584 1517 0 0 43 /**
 * Getter for property kSS_SPLT_CL.
 */ 1 4 this 3 1730  
377 0 0 6 585 1517 0 0 41 /**
 * Getter for property maxvolume.
 */ 1 4 this 3 1730  
378 0 0 6 586 1517 0 0 41 /**
 * Getter for property timescale.
 */ 1 4 this 3 1730  
379 0 0 6 587 1519 0 0 43 /**
 * Getter for property piterations.
 */ 1 4 this 3 1730  
380 0 0 6 588 1519 0 0 43 /**
 * Getter for property viterations.
 */ 1 4 this 3 1730  
381 0 0 6 589 1519 0 0 43 /**
 * Getter for property diterations.
 */ 1 4 this 3 1730  
382 0 0 6 590 1519 0 0 43 /**
 * Getter for property citerations.
 */ 1 4 this 3 1730  
383 0 0 15 636 1709 1144 0 0 1 6 param0 0 1732  
384 0 0 4 620 1624 0 0 10 /**
 *
 */ 2 4 this 3 1709  7 density 1 1517  
385 0 0 4 621 1624 0 0 10 /**
 *
 */ 2 4 this 3 1709  7 density 1 1517  
386 0 0 4 622 1624 0 0 10 /**
 *
 */ 2 4 this 3 1709  6 offset 1 1517  
387 0 0 4 623 1624 0 0 10 /**
 *
 */ 2 4 this 3 1709  6 normal 1 1659  
388 0 0 4 624 1624 0 0 10 /**
 *
 */ 2 4 this 3 1709  7 gravity 1 1659  
389 0 0 6 625 1517 0 0 10 /**
 *
 */ 1 4 this 3 1732  
390 0 0 6 626 1517 0 0 10 /**
 *
 */ 1 4 this 3 1732  
391 0 0 6 627 1517 0 0 10 /**
 *
 */ 1 4 this 3 1732  
392 0 0 7 628 1618 0 0 10 /**
 *
 */ 1 4 this 3 1732  
393 0 0 7 629 1618 0 0 10 /**
 *
 */ 1 4 this 3 1732  
394 0 0 4 630 1624 0 0 10 /**
 *
 */ 2 4 this 3 1709  8 lifetime 5 1519  
395 0 0 15 654 1710 1157 0 0 1 6 param0 0 1734  
396 0 0 7 644 1710 1157 0 102 /**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */ 0 
397 0 0 6 645 1517 0 0 42 /**
 * Getter for the property m_kLST.
 */ 1 4 this 3 1734  
398 0 0 4 646 1624 0 0 42 /**
 * Setter for the property m_kLST.
 */ 2 4 this 3 1710  5 value 1 1517  
399 0 0 6 647 1517 0 0 42 /**
 * Getter for the property m_kAST.
 */ 1 4 this 3 1734  
400 0 0 4 648 1624 0 0 42 /**
 * Setter for the property m_kAST.
 */ 2 4 this 3 1710  5 value 1 1517  
401 0 0 6 649 1517 0 0 42 /**
 * Getter for the property m_kVST.
 */ 1 4 this 3 1734  
402 0 0 4 650 1624 0 0 42 /**
 * Setter for the property m_kVST.
 */ 2 4 this 3 1710  5 value 1 1517  
403 0 0 4 658 1624 0 0 10 /**
 *
 */ 2 4 this 3 1736  5 value 1 1517  
404 0 0 4 659 1624 0 0 10 /**
 *
 */ 2 4 this 3 1736  5 value 1 1517  
405 0 0 4 660 1624 0 0 10 /**
 *
 */ 2 4 this 3 1736  5 value 1 1517  
406 0 0 4 661 1624 0 0 10 /**
 *
 */ 2 4 this 3 1736  5 value 1 1517  
407 0 0 4 662 1624 0 0 10 /**
 *
 */ 2 4 this 3 1736  5 value 1 1517  
408 0 0 4 663 1624 0 0 10 /**
 *
 */ 2 4 this 3 1736  5 value 1 1517  
409 0 0 6 664 1517 0 0 10 /**
 *
 */ 1 4 this 3 1737  
410 0 0 6 665 1517 0 0 10 /**
 *
 */ 1 4 this 3 1737  
411 0 0 6 666 1517 0 0 10 /**
 *
 */ 1 4 this 3 1737  
412 0 0 6 667 1517 0 0 10 /**
 *
 */ 1 4 this 3 1737  
413 0 0 6 668 1517 0 0 10 /**
 *
 */ 1 4 this 3 1737  
414 0 0 6 669 1517 0 0 10 /**
 *
 */ 1 4 this 3 1737  
415 0 0 23 677 1581 0 0 94 /**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */ 2 5 world 1 1739  7 chassis 1 1549  
416 0 0 4 678 1624 0 0 100 /**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */ 2 4 this 3 1581  2 up 1 1508  
417 0 0 4 679 1624 0 0 76 /**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */ 3 4 this 3 1581  8 steering 1 1517  3 idx 1 1519  
418 0 0 4 680 1624 0 0 61 /**
 * Applies braking force to the wheel with index idx.
 */ 3 4 this 3 1581  5 brake 1 1517  3 idx 1 1519  
419 0 0 4 681 1624 0 0 10 /**
 *
 */ 2 4 this 3 1581  5 pitch 1 1517  
420 0 0 7 682 1549 0 0 82 /**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */ 1 4 this 3 1581  
421 0 0 6 683 1517 0 0 106 /**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */ 1 4 this 3 1740  
422 0 0 6 684 1517 0 0 77 /**
 * Returns the steering angle of the wheel with index idx in degrees.
 */ 2 4 this 3 1740  3 idx 1 1519  
423 0 0 7 685 1618 0 0 145 /**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */ 1 4 this 3 1740  
424 0 0 4 686 1624 0 0 43 /**
 * Resets the vehicle's suspension.
 */ 1 4 this 3 1581  
425 0 0 4 687 1624 0 0 70 /**
 * Applies force at the wheel with index idx for acceleration.
 */ 3 4 this 3 1581  5 force 1 1517  3 idx 1 1519  
426 0 0 7 688 1742 1194 0 72 /**
 * Factory method for creating wheels for this vehicle instance.
 */ 2 4 this 3 1581  22 suspension_rest_length 5 1517  
427 0 0 6 689 1519 0 0 57 /**
 * Returns the number of wheels this vehicle has.
 */ 1 4 this 3 1740  
428 0 0 7 690 1742 1194 0 132 /**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */ 2 4 this 3 1740  3 idx 1 1519  
429 0 0 6 692 1736 0 0 189 /**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */ 1 4 this 3 1581  
430 0 0 7 793 1628 0 0 0 0 
431 0 0 15 791 1742 1194 0 0 1 6 param0 0 1743  
432 0 0 4 699 1624 0 0 50 /**
 * Sets how stiff the suspension shall be.
 */ 2 4 this 3 1742  5 value 1 1517  
433 0 0 4 700 1624 0 0 109 /**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */ 2 4 this 3 1742  5 value 1 1517  
434 0 0 4 701 1624 0 0 45 /**
 * Sets the slipperyness of the tyre.
 */ 2 4 this 3 1742  5 value 1 1517  
435 0 0 4 702 1624 0 0 66 /**
 * Sets the maximum suspension force the wheel can handle.
 */ 2 4 this 3 1742  5 value 1 1517  
436 0 0 4 703 1624 0 0 79 /**
 * Sets the damping forces applied when the suspension gets compressed.
 */ 2 4 this 3 1742  5 value 1 1517  
437 0 0 4 704 1624 0 0 71 /**
 * Sets the damping forces applied when the suspension relaxes.
 */ 2 4 this 3 1742  5 value 1 1517  
438 0 0 4 705 1624 0 0 249 /**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */ 2 4 this 3 1742  5 value 1 1517  
439 0 0 4 706 1624 0 0 33 /**
 * Sets the wheel radius.
 */ 2 4 this 3 1742  5 value 1 1517  
440 0 0 4 707 1624 0 0 124 /**
 * Sets the steering angle.
 *
 * @warning
 * As of 1.11, this method uses degrees.  Previous versions used radians.
 */ 2 4 this 3 1742  5 value 1 1517  
441 0 0 4 708 1624 0 0 10 /**
 *
 */ 2 4 this 3 1742  5 value 1 1517  
442 0 0 4 709 1624 0 0 10 /**
 *
 */ 2 4 this 3 1742  5 value 1 1517  
443 0 0 4 710 1624 0 0 69 /**
 * Defines how much force should be used to rotate the wheel.
 */ 2 4 this 3 1742  5 value 1 1517  
444 0 0 4 711 1624 0 0 10 /**
 *
 */ 2 4 this 3 1742  5 value 1 1517  
445 0 0 4 712 1624 0 0 10 /**
 *
 */ 2 4 this 3 1742  5 value 1 1517  
446 0 0 4 713 1624 0 0 10 /**
 *
 */ 2 4 this 3 1742  5 value 1 1517  
447 0 0 4 714 1624 0 0 10 /**
 *
 */ 2 4 this 3 1742  5 value 1 1517  
448 0 0 4 715 1624 0 0 10 /**
 *
 */ 2 4 this 3 1742  5 value 1 1517  
449 0 0 4 716 1624 0 0 70 /**
 * Sets the point where the wheel is connected to the chassis.
 */ 2 4 this 3 1742  3 pos 1 1679  
450 0 0 4 717 1624 0 0 92 /**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */ 2 4 this 3 1742  3 dir 1 1659  
451 0 0 4 718 1624 0 0 51 /**
 * Determines the wheel axle normal vector.
 */ 2 4 this 3 1742  4 axle 1 1659  
452 0 0 4 719 1624 0 0 10 /**
 *
 */ 2 4 this 3 1742  3 mat 1 1745  
453 0 0 4 720 1624 0 0 42 /**
 * Sets if the wheel is steerable.
 */ 2 4 this 3 1742  5 value 1 1525  
454 0 0 4 721 1624 0 0 86 /**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */ 2 4 this 3 1742  4 node 1 1511  
455 0 0 6 722 1517 0 0 83 /**
 * Returns the length of the suspension when the vehicle is standing still.
 */ 1 4 this 3 1743  
456 0 0 6 723 1517 0 0 51 /**
 * Returns the stiffness of the suspension.
 */ 1 4 this 3 1743  
457 0 0 6 724 1517 0 0 10 /**
 *
 */ 1 4 this 3 1743  
458 0 0 6 725 1517 0 0 46 /**
 * Returns how slippery the tyres are.
 */ 1 4 this 3 1743  
459 0 0 6 726 1517 0 0 72 /**
 * Returns the maximum force (weight) the suspension can handle.
 */ 1 4 this 3 1743  
460 0 0 6 727 1517 0 0 70 /**
 * Returns the  damping applied to the compressing suspension.
 */ 1 4 this 3 1743  
461 0 0 6 728 1517 0 0 66 /**
 * Returns the damping applied to the relaxing suspension.
 */ 1 4 this 3 1743  
462 0 0 6 729 1517 0 0 90 /**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */ 1 4 this 3 1743  
463 0 0 6 730 1517 0 0 36 /**
 * Returns the wheel radius.
 */ 1 4 this 3 1743  
464 0 0 6 731 1517 0 0 138 /**
 * Returns the steering angle in degrees.
 *
 * @warning
 * As of 1.11, this method uses degrees.  Previous versions used radians.
 */ 1 4 this 3 1743  
465 0 0 6 732 1517 0 0 10 /**
 *
 */ 1 4 this 3 1743  
466 0 0 6 733 1517 0 0 10 /**
 *
 */ 1 4 this 3 1743  
467 0 0 6 734 1517 0 0 71 /**
 * Returns the amount of accelleration force currently applied.
 */ 1 4 this 3 1743  
468 0 0 6 735 1517 0 0 65 /**
 * Returns the amount of braking force currently applied.
 */ 1 4 this 3 1743  
469 0 0 6 736 1517 0 0 10 /**
 *
 */ 1 4 this 3 1743  
470 0 0 6 737 1517 0 0 10 /**
 *
 */ 1 4 this 3 1743  
471 0 0 6 738 1517 0 0 10 /**
 *
 */ 1 4 this 3 1743  
472 0 0 6 739 1517 0 0 10 /**
 *
 */ 1 4 this 3 1743  
473 0 0 7 740 1617 0 0 73 /**
 * Returns the point where the wheel is connected to the chassis.
 */ 1 4 this 3 1743  
474 0 0 7 741 1618 0 0 70 /**
 * Returns the wheel's forward vector relative to the chassis.
 */ 1 4 this 3 1743  
475 0 0 7 742 1618 0 0 55 /**
 * Returns the normal vector of the wheel axle.
 */ 1 4 this 3 1743  
476 0 0 7 743 1635 0 0 10 /**
 *
 */ 1 4 this 3 1743  
477 0 0 6 744 1525 0 0 46 /**
 * Determines if a wheel is steerable.
 */ 1 4 this 3 1743  
478 0 0 7 745 1511 0 0 142 /**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */ 1 4 this 3 1743  
479 0 0 7 746 1747 1243 0 10 /**
 *
 */ 1 4 this 3 1743  
480 0 0 15 766 1747 1243 0 0 1 6 param0 0 1748  
481 0 0 6 750 1525 0 0 10 /**
 *
 */ 1 4 this 3 1748  
482 0 0 6 751 1517 0 0 10 /**
 *
 */ 1 4 this 3 1748  
483 0 0 7 752 1618 0 0 10 /**
 *
 */ 1 4 this 3 1748  
484 0 0 7 753 1618 0 0 10 /**
 *
 */ 1 4 this 3 1748  
485 0 0 7 754 1618 0 0 10 /**
 *
 */ 1 4 this 3 1748  
486 0 0 7 755 1617 0 0 10 /**
 *
 */ 1 4 this 3 1748  
487 0 0 7 756 1617 0 0 10 /**
 *
 */ 1 4 this 3 1748  
488 0 0 7 757 1511 0 0 10 /**
 *
 */ 1 4 this 3 1748  
489 0 0 7 795 1739 0 0 10 /**
 *
 */ 0 
490 0 0 4 796 1624 0 0 10 /**
 *
 */ 2 4 this 3 1739  7 gravity 1 1659  
491 0 0 4 796 1624 0 0 10 /**
 *
 */ 4 4 this 3 1739  2 gx 1 1517  2 gy 1 1517  2 gz 1 1517  
492 0 0 7 797 1659 0 0 10 /**
 *
 */ 1 4 this 3 1750  
493 0 0 6 798 1519 0 0 10 /**
 *
 */ 4 4 this 3 1739  2 dt 1 1517  12 max_substeps 5 1519  8 stepsize 5 1517  
494 0 0 7 799 1709 1144 0 10 /**
 *
 */ 1 4 this 3 1739  
495 0 0 4 800 1624 0 0 10 /**
 *
 */ 2 4 this 3 1739  4 node 1 1577  
496 0 0 4 801 1624 0 0 75 /**
 * Removes a debug node that has been assigned to this BulletWorld.
 */ 1 4 this 3 1739  
497 0 0 7 802 1577 0 0 10 /**
 *
 */ 1 4 this 3 1750  
498 0 0 6 803 1525 0 0 10 /**
 *
 */ 1 4 this 3 1750  
499 0 0 4 804 1624 0 0 15 // AttachRemove 2 4 this 3 1739  6 object 1 1752  
500 0 0 4 805 1624 0 0 10 /**
 *
 */ 2 4 this 3 1739  6 object 1 1752  
501 0 0 4 806 1624 0 0 156 /**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */ 3 4 this 3 1739  10 constraint 1 1582  16 linked_collision 5 1525  
502 0 0 6 807 1519 0 0 15 // Ghost object 1 4 this 3 1750  
503 0 0 7 808 1578 0 0 10 /**
 *
 */ 2 4 this 3 1750  3 idx 1 1519  
504 0 0 6 810 1519 0 0 13 // Rigid body 1 4 this 3 1750  
505 0 0 7 811 1549 0 0 10 /**
 *
 */ 2 4 this 3 1750  3 idx 1 1519  
506 0 0 6 813 1519 0 0 12 // Soft body 1 4 this 3 1750  
507 0 0 7 814 1579 0 0 10 /**
 *
 */ 2 4 this 3 1750  3 idx 1 1519  
508 0 0 6 816 1519 0 0 23 // Character controller 1 4 this 3 1750  
509 0 0 7 817 1580 793 0 10 /**
 *
 */ 2 4 this 3 1750  3 idx 1 1519  
510 0 0 6 819 1519 0 0 10 /**
 *
 */ 1 4 this 3 1750  
511 0 0 7 820 1581 0 0 10 /**
 *
 */ 2 4 this 3 1750  3 idx 1 1519  
512 0 0 6 822 1519 0 0 13 // Constraint 1 4 this 3 1750  
513 0 0 7 823 1582 0 0 10 /**
 *
 */ 2 4 this 3 1750  3 idx 1 1519  
514 0 0 7 825 1665 880 0 28 // Raycast and other queries 4 4 this 3 1750  8 from_pos 1 1679  6 to_pos 1 1679  4 mask 5 1754  
515 0 0 7 826 1619 779 0 10 /**
 *
 */ 4 4 this 3 1750  8 from_pos 1 1679  6 to_pos 1 1679  4 mask 5 1754  
516 0 0 7 827 1669 894 0 203 /**
 * Performs a sweep test against all other shapes that match the given group
 * mask.  The provided shape must be a convex shape; it is an error to invoke
 * this method using a non-convex shape.
 */ 6 4 this 3 1750  5 shape 1 1532  7 from_ts 1 1630  5 to_ts 1 1630  4 mask 5 1754  11 penetration 5 1517  
517 0 0 7 828 1699 1020 0 386 /**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */ 3 4 this 3 1750  4 node 1 1511  10 use_filter 5 1525  
518 0 0 7 829 1699 1020 0 181 /**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */ 3 4 this 3 1750  5 node0 1 1511  5 node1 1 1511  
519 0 0 6 830 1525 0 0 105 /**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */ 3 4 this 3 1750  5 node0 1 1511  5 node1 1 1511  
520 0 0 6 831 1519 0 0 12 // Manifolds 1 4 this 3 1750  
521 0 0 7 832 1756 1297 0 10 /**
 *
 */ 2 4 this 3 1750  3 idx 1 1519  
522 0 0 4 834 1624 0 0 22 // Collision filtering 4 4 this 3 1739  6 group1 1 1757  6 group2 1 1757  6 enable 1 1525  
523 0 0 6 835 1525 0 0 10 /**
 *
 */ 3 4 this 3 1750  6 group1 1 1757  6 group2 1 1757  
524 0 0 4 836 1624 0 0 10 /**
 *
 */ 2 4 this 3 1739  5 force 1 1525  
525 0 0 6 837 1525 0 0 10 /**
 *
 */ 1 4 this 3 1750  
526 0 0 4 838 1624 0 0 12 // Callbacks 2 4 this 3 1739  3 obj 1 1758  
527 0 0 4 839 1624 0 0 10 /**
 *
 */ 1 4 this 3 1739  
528 0 0 4 840 1624 0 0 10 /**
 *
 */ 3 4 this 3 1739  3 obj 1 1758  10 is_pretick 5 1525  
529 0 0 4 841 1624 0 0 10 /**
 *
 */ 1 4 this 3 1739  
530 0 0 4 842 1624 0 0 10 /**
 *
 */ 2 4 this 3 1739  3 obj 1 1758  
531 0 0 4 843 1624 0 0 10 /**
 *
 */ 1 4 this 3 1739  
532 0 0 4 879 1624 0 0 53 /**
 * @deprecated Please use BulletWorld::attach
 */ 2 4 this 3 1739  4 node 1 1578  
533 0 0 4 880 1624 0 0 53 /**
 * @deprecated Please use BulletWorld::remove
 */ 2 4 this 3 1739  4 node 1 1578  
534 0 0 4 881 1624 0 0 53 /**
 * @deprecated Please use BulletWorld::attach
 */ 2 4 this 3 1739  4 node 1 1549  
535 0 0 4 882 1624 0 0 53 /**
 * @deprecated Please use BulletWorld::remove
 */ 2 4 this 3 1739  4 node 1 1549  
536 0 0 4 883 1624 0 0 53 /**
 * @deprecated Please use BulletWorld::attach
 */ 2 4 this 3 1739  4 node 1 1579  
537 0 0 4 884 1624 0 0 53 /**
 * @deprecated Please use BulletWorld::remove
 */ 2 4 this 3 1739  4 node 1 1579  
538 0 0 4 885 1624 0 0 53 /**
 * @deprecated Please use BulletWorld::attach
 */ 2 4 this 3 1739  4 node 1 1580  
539 0 0 4 886 1624 0 0 53 /**
 * @deprecated Please use BulletWorld::remove
 */ 2 4 this 3 1739  4 node 1 1580  
540 0 0 4 887 1624 0 0 53 /**
 * @deprecated Please use BulletWorld::attach
 */ 2 4 this 3 1739  7 vehicle 1 1581  
541 0 0 4 888 1624 0 0 53 /**
 * @deprecated Please use BulletWorld::remove
 */ 2 4 this 3 1739  7 vehicle 1 1581  
542 0 0 4 889 1624 0 0 53 /**
 * @deprecated Please use BulletWorld::remove
 */ 2 4 this 3 1739  10 constraint 1 1582  
543 0 0 7 890 1628 0 0 0 0 
544 0 0 15 877 1756 1297 0 0 1 6 param0 0 1760  
545 0 0 7 864 1511 0 0 10 /**
 *
 */ 1 4 this 3 1756  
546 0 0 7 865 1511 0 0 10 /**
 *
 */ 1 4 this 3 1756  
547 0 0 6 866 1519 0 0 10 /**
 *
 */ 1 4 this 3 1760  
548 0 0 7 867 1690 963 0 10 /**
 *
 */ 2 4 this 3 1760  3 idx 1 1519  
549 0 0 6 869 1517 0 0 10 /**
 *
 */ 1 4 this 3 1760  
550 0 0 6 870 1517 0 0 10 /**
 *
 */ 1 4 this 3 1760  
551 0 0 4 871 1624 0 0 10 /**
 *
 */ 1 4 this 3 1756  
552 0 0 7 892 1762 0 0 10 /**
 *
 */ 0 
553 0 0 15 892 1762 0 0 10 /**
 *
 */ 1 4 copy 1 1763  
554 0 0 4 893 1624 0 0 10 /**
 *
 */ 2 4 this 3 1762  1 p 1 1679  
555 0 0 4 894 1624 0 0 10 /**
 *
 */ 2 4 this 3 1762  6 points 1 1765  
556 0 0 4 895 1624 0 0 10 /**
 *
 */ 3 4 this 3 1762  4 geom 1 1721  2 ts 5 1630  
557 0 0 7 896 1628 0 0 0 0 
558 0 0 15 898 1769 0 0 10 /**
 *
 */ 1 4 copy 1 1767  
559 0 0 7 898 1769 0 0 10 /**
 *
 */ 2 4 geom 1 1721  5 scale 5 1645  
560 0 0 7 898 1769 0 0 10 /**
 *
 */ 2 6 points 1 1765  5 scale 5 1645  
561 0 0 6 899 1519 0 0 10 /**
 *
 */ 1 4 this 3 1767  
562 0 0 7 901 1628 0 0 0 0 
563 0 0 15 903 1772 0 0 10 /**
 *
 */ 1 4 copy 1 1770  
564 0 0 7 903 1772 0 0 10 /**
 *
 */ 2 12 half_extents 1 1659  2 up 5 1508  
565 0 0 7 903 1772 0 0 10 /**
 *
 */ 3 6 radius 1 1517  6 height 1 1517  2 up 5 1508  
566 0 0 6 904 1517 0 0 10 /**
 *
 */ 1 4 this 3 1770  
567 0 0 7 905 1645 0 0 10 /**
 *
 */ 1 4 this 3 1770  
568 0 0 7 906 1645 0 0 10 /**
 *
 */ 1 4 this 3 1770  
569 0 0 7 910 1628 0 0 0 0 
570 0 0 23 912 1773 1337 0 10 /**
 *
 */ 2 5 node0 1 1511  5 node1 1 1511  
571 0 0 7 913 1511 0 0 10 /**
 *
 */ 1 4 this 3 1774  
572 0 0 7 914 1511 0 0 10 /**
 *
 */ 1 4 this 3 1774  
573 0 0 4 915 1624 0 0 10 /**
 *
 */ 2 4 this 3 1773  7 collide 1 1525  
574 0 0 6 916 1525 0 0 10 /**
 *
 */ 1 4 this 3 1774  
575 0 0 7 920 1628 0 0 0 0 
576 0 0 15 923 1778 1339 0 10 /**
 *
 */ 1 4 copy 1 1776  
577 0 0 4 925 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  6 enable 1 1525  
578 0 0 4 926 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  5 limit 1 1517  
579 0 0 4 927 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  5 limit 1 1517  
580 0 0 4 928 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  8 velocity 1 1517  
581 0 0 4 929 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  5 force 1 1517  
582 0 0 4 930 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  5 force 1 1517  
583 0 0 4 931 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  7 damping 1 1517  
584 0 0 4 932 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  8 softness 1 1517  
585 0 0 4 933 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  6 bounce 1 1517  
586 0 0 4 934 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  3 cfm 1 1517  
587 0 0 4 935 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  3 cfm 1 1517  
588 0 0 4 936 1624 0 0 10 /**
 *
 */ 2 4 this 3 1778  3 erp 1 1517  
589 0 0 6 937 1525 0 0 10 /**
 *
 */ 1 4 this 3 1776  
590 0 0 6 938 1525 0 0 10 /**
 *
 */ 1 4 this 3 1776  
591 0 0 6 939 1519 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 1 4 this 3 1776  
592 0 0 6 940 1517 0 0 10 /**
 *
 */ 1 4 this 3 1776  
593 0 0 6 941 1517 0 0 10 /**
 *
 */ 1 4 this 3 1776  
594 0 0 6 942 1517 0 0 10 /**
 *
 */ 1 4 this 3 1776  
595 0 0 15 950 1781 1359 0 10 /**
 *
 */ 1 4 copy 1 1779  
596 0 0 4 952 1624 0 0 10 /**
 *
 */ 3 4 this 3 1781  4 axis 1 1519  6 enable 1 1525  
597 0 0 4 953 1624 0 0 10 /**
 *
 */ 2 4 this 3 1781  5 limit 1 1643  
598 0 0 4 954 1624 0 0 10 /**
 *
 */ 2 4 this 3 1781  5 limit 1 1643  
599 0 0 4 955 1624 0 0 10 /**
 *
 */ 2 4 this 3 1781  8 velocity 1 1643  
600 0 0 4 956 1624 0 0 10 /**
 *
 */ 2 4 this 3 1781  5 force 1 1643  
601 0 0 4 957 1624 0 0 10 /**
 *
 */ 2 4 this 3 1781  7 damping 1 1517  
602 0 0 4 958 1624 0 0 10 /**
 *
 */ 2 4 this 3 1781  8 softness 1 1517  
603 0 0 4 959 1624 0 0 10 /**
 *
 */ 2 4 this 3 1781  11 restitution 1 1517  
604 0 0 4 960 1624 0 0 10 /**
 *
 */ 2 4 this 3 1781  3 cfm 1 1643  
605 0 0 4 961 1624 0 0 10 /**
 *
 */ 2 4 this 3 1781  3 erp 1 1643  
606 0 0 4 962 1624 0 0 10 /**
 *
 */ 2 4 this 3 1781  3 cfm 1 1643  
607 0 0 6 963 1525 0 0 10 /**
 *
 */ 2 4 this 3 1779  4 axis 1 1519  
608 0 0 6 964 1525 0 0 10 /**
 *
 */ 2 4 this 3 1779  4 axis 1 1519  
609 0 0 6 965 1519 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 2 4 this 3 1779  4 axis 1 1519  
610 0 0 7 966 1618 0 0 10 /**
 *
 */ 1 4 this 3 1779  
611 0 0 7 967 1617 0 0 10 /**
 *
 */ 1 4 this 3 1779  
612 0 0 7 968 1618 0 0 10 /**
 *
 */ 1 4 this 3 1779  
613 0 0 7 973 1782 0 0 10 /**
 *
 */ 5 6 node_a 1 1676  6 node_b 1 1676  7 frame_a 1 1630  7 frame_b 1 1630  11 use_frame_a 1 1525  
614 0 0 7 973 1782 0 0 10 /**
 *
 */ 3 6 node_a 1 1676  7 frame_a 1 1630  11 use_frame_a 1 1525  
615 0 0 7 974 1618 0 0 11 // Geometry 2 4 this 3 1783  4 axis 1 1519  
616 0 0 6 975 1517 0 0 10 /**
 *
 */ 2 4 this 3 1783  4 axis 1 1519  
617 0 0 6 976 1517 0 0 10 /**
 *
 */ 2 4 this 3 1783  4 axis 1 1519  
618 0 0 4 977 1624 0 0 10 /**
 *
 */ 4 4 this 3 1782  4 axis 1 1519  3 low 1 1517  4 high 1 1517  
619 0 0 4 978 1624 0 0 10 /**
 *
 */ 4 4 this 3 1782  4 axis 1 1519  3 low 1 1517  4 high 1 1517  
620 0 0 7 979 1778 1339 0 9 // Motors 2 4 this 3 1782  4 axis 1 1519  
621 0 0 7 980 1781 1359 0 10 /**
 *
 */ 1 4 this 3 1782  
622 0 0 4 981 1624 0 0 9 // Frames 3 4 this 3 1782  4 ts_a 1 1630  4 ts_b 1 1630  
623 0 0 7 982 1630 0 0 10 /**
 *
 */ 1 4 this 3 1783  
624 0 0 7 983 1630 0 0 10 /**
 *
 */ 1 4 this 3 1783  
625 0 0 7 987 1628 0 0 0 0 
626 0 0 15 989 1787 0 0 10 /**
 *
 */ 1 4 copy 1 1785  
627 0 0 7 989 1787 0 0 215 /**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */ 3 5 image 1 1788  10 max_height 1 1517  2 up 5 1508  
628 0 0 7 989 1787 0 0 311 /**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */ 3 3 tex 1 1791  10 max_height 1 1517  2 up 5 1508  
629 0 0 4 990 1624 0 0 10 /**
 *
 */ 2 4 this 3 1787  4 flag 5 1525  
630 0 0 7 991 1628 0 0 0 0 
631 0 0 7 1004 1793 1401 0 0 0 
632 0 0 15 1004 1793 1401 0 0 1 6 param0 0 1794  
633 0 0 7 993 1799 0 0 19 // Collision shapes 2 2 np 1 1797  5 clear 5 1525  
634 0 0 7 994 1801 0 0 17 // Internal names 0 
635 0 0 7 995 1801 0 0 10 /**
 *
 */ 0 
636 0 0 7 996 1804 0 0 19 // Geom vertex data 1 6 format 1 1804  
637 0 0 7 997 1804 0 0 10 /**
 *
 */ 1 6 format 1 1804  
638 0 0 7 998 1714 0 0 13 // Geom utils 3 4 node 1 1579  6 format 5 1804  9 two_sided 5 1525  
639 0 0 7 999 1714 0 0 10 /**
 *
 */ 2 4 node 1 1579  6 format 5 1804  
640 0 0 4 1000 1624 0 0 10 /**
 *
 */ 3 4 geom 1 1714  4 resx 1 1519  4 resy 1 1519  
641 0 0 7 1007 1805 0 0 342 /**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */ 7 6 node_a 1 1676  6 node_b 1 1676  7 pivot_a 1 1679  7 pivot_b 1 1679  6 axis_a 1 1659  6 axis_b 1 1659  11 use_frame_a 5 1525  
642 0 0 7 1007 1805 0 0 73 /**
 * Constructs a hinge constraint which connects two rigid bodies.
 */ 5 6 node_a 1 1676  6 node_b 1 1676  4 ts_a 1 1630  4 ts_b 1 1630  11 use_frame_a 5 1525  
643 0 0 7 1007 1805 0 0 182 /**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */ 4 6 node_a 1 1676  7 pivot_a 1 1679  6 axis_a 1 1659  11 use_frame_a 5 1525  
644 0 0 7 1007 1805 0 0 106 /**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */ 3 6 node_a 1 1676  4 ts_a 1 1630  11 use_frame_a 5 1525  
645 0 0 6 1008 1517 0 0 66 /**
 * Returns the angle between node_a and node_b in degrees.
 */ 1 4 this 3 1805  
646 0 0 6 1009 1517 0 0 54 /**
 * Returns the lower angular limit in degrees.
 */ 1 4 this 3 1806  
647 0 0 6 1010 1517 0 0 54 /**
 * Returns the upper angular limit in degrees.
 */ 1 4 this 3 1806  
648 0 0 6 1011 1525 0 0 10 /**
 *
 */ 1 4 this 3 1806  
649 0 0 4 1012 1624 0 0 10 /**
 *
 */ 2 4 this 3 1805  5 value 1 1525  
650 0 0 4 1013 1624 0 0 65 /**
 * Sets the lower and upper rotational limits in degrees.
 */ 6 4 this 3 1805  3 low 1 1517  4 high 1 1517  8 softness 5 1517  4 bias 5 1517  10 relaxation 5 1517  
651 0 0 4 1014 1624 0 0 63 /**
 * Sets the hinge's rotation axis in world coordinates.
 */ 2 4 this 3 1805  4 axis 1 1659  
652 0 0 4 1015 1624 0 0 261 /**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */ 4 4 this 3 1805  6 enable 1 1525  15 target_velocity 1 1517  11 max_impulse 1 1517  
653 0 0 4 1016 1624 0 0 10 /**
 *
 */ 2 4 this 3 1805  6 enable 1 1525  
654 0 0 4 1017 1624 0 0 96 /**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */ 2 4 this 3 1805  11 max_impulse 1 1517  
655 0 0 4 1018 1624 0 0 10 /**
 *
 */ 3 4 this 3 1805  4 quat 1 1684  2 dt 1 1517  
656 0 0 4 1018 1624 0 0 10 /**
 *
 */ 3 4 this 3 1805  12 target_angle 1 1517  2 dt 1 1517  
657 0 0 4 1019 1624 0 0 10 /**
 *
 */ 3 4 this 3 1805  4 ts_a 1 1630  4 ts_b 1 1630  
658 0 0 7 1020 1630 0 0 10 /**
 *
 */ 1 4 this 3 1806  
659 0 0 7 1021 1630 0 0 10 /**
 *
 */ 1 4 this 3 1806  
660 0 0 7 1028 1628 0 0 0 0 
661 0 0 15 1030 1810 0 0 10 /**
 *
 */ 1 4 copy 1 1808  
662 0 0 7 1030 1810 0 0 10 /**
 *
 */ 2 7 shape_a 1 1596  7 shape_b 1 1596  
663 0 0 4 1031 1624 0 0 10 /**
 *
 */ 2 4 this 3 1810  2 ts 1 1630  
664 0 0 4 1032 1624 0 0 10 /**
 *
 */ 2 4 this 3 1810  2 ts 1 1630  
665 0 0 7 1033 1630 0 0 10 /**
 *
 */ 1 4 this 3 1808  
666 0 0 7 1034 1630 0 0 10 /**
 *
 */ 1 4 this 3 1808  
667 0 0 7 1035 1596 0 0 10 /**
 *
 */ 1 4 this 3 1808  
668 0 0 7 1036 1596 0 0 10 /**
 *
 */ 1 4 this 3 1808  
669 0 0 7 1043 1628 0 0 0 0 
670 0 0 15 1045 1813 0 0 10 /**
 *
 */ 1 4 copy 1 1811  
671 0 0 7 1045 1813 0 0 10 /**
 *
 */ 2 6 points 1 1765  5 radii 1 1814  
672 0 0 7 1046 1813 0 0 0 2 4 this 3 1813  4 copy 1 1811  
673 0 0 6 1047 1519 0 0 10 /**
 *
 */ 1 4 this 3 1811  
674 0 0 7 1048 1617 0 0 10 /**
 *
 */ 2 4 this 3 1811  5 index 1 1519  
675 0 0 6 1049 1517 0 0 10 /**
 *
 */ 2 4 this 3 1811  5 index 1 1519  
676 0 0 7 1053 1628 0 0 0 0 
677 0 0 15 1055 1821 0 0 10 /**
 *
 */ 1 4 copy 1 1819  
678 0 0 7 1055 1821 0 0 57 /**
 * Creates a plane shape from a plane definition.
 */ 1 5 plane 1 1822  
679 0 0 7 1055 1821 0 0 10 /**
 *
 */ 2 6 normal 1 1659  8 constant 1 1517  
680 0 0 7 1056 1822 0 0 10 /**
 *
 */ 1 4 this 3 1819  
681 0 0 7 1057 1618 0 0 10 /**
 *
 */ 1 4 this 3 1819  
682 0 0 6 1058 1517 0 0 10 /**
 *
 */ 1 4 this 3 1819  
683 0 0 7 1059 1821 0 0 10 /**
 *
 */ 1 5 solid 1 1823  
684 0 0 7 1065 1628 0 0 0 0 
685 0 0 7 1067 1826 0 0 10 /**
 *
 */ 5 6 node_a 1 1676  6 node_b 1 1676  7 frame_a 1 1630  7 frame_b 1 1630  11 use_frame_a 1 1525  
686 0 0 7 1067 1826 0 0 10 /**
 *
 */ 3 6 node_a 1 1676  7 frame_a 1 1630  10 useFrame_a 1 1525  
687 0 0 6 1068 1517 0 0 10 /**
 *
 */ 1 4 this 3 1827  
688 0 0 6 1069 1517 0 0 10 /**
 *
 */ 1 4 this 3 1827  
689 0 0 6 1070 1517 0 0 9 // Limits 1 4 this 3 1827  
690 0 0 6 1071 1517 0 0 10 /**
 *
 */ 1 4 this 3 1827  
691 0 0 6 1072 1517 0 0 10 /**
 *
 */ 1 4 this 3 1827  
692 0 0 6 1073 1517 0 0 10 /**
 *
 */ 1 4 this 3 1827  
693 0 0 4 1074 1624 0 0 10 /**
 *
 */ 2 4 this 3 1826  5 value 1 1517  
694 0 0 4 1075 1624 0 0 10 /**
 *
 */ 2 4 this 3 1826  5 value 1 1517  
695 0 0 4 1076 1624 0 0 10 /**
 *
 */ 2 4 this 3 1826  5 value 1 1517  
696 0 0 4 1077 1624 0 0 10 /**
 *
 */ 2 4 this 3 1826  5 value 1 1517  
697 0 0 4 1078 1624 0 0 15 // Linear motor 2 4 this 3 1826  2 on 1 1525  
698 0 0 4 1079 1624 0 0 10 /**
 *
 */ 2 4 this 3 1826  15 target_velocity 1 1517  
699 0 0 4 1080 1624 0 0 10 /**
 *
 */ 2 4 this 3 1826  9 max_force 1 1517  
700 0 0 6 1081 1525 0 0 10 /**
 *
 */ 1 4 this 3 1827  
701 0 0 6 1082 1517 0 0 10 /**
 *
 */ 1 4 this 3 1827  
702 0 0 6 1083 1517 0 0 10 /**
 *
 */ 1 4 this 3 1827  
703 0 0 4 1084 1624 0 0 16 // Angular motor 2 4 this 3 1826  2 on 1 1525  
704 0 0 4 1085 1624 0 0 10 /**
 *
 */ 2 4 this 3 1826  15 target_velocity 1 1517  
705 0 0 4 1086 1624 0 0 10 /**
 *
 */ 2 4 this 3 1826  9 max_force 1 1517  
706 0 0 6 1087 1525 0 0 10 /**
 *
 */ 1 4 this 3 1827  
707 0 0 6 1088 1517 0 0 10 /**
 *
 */ 1 4 this 3 1827  
708 0 0 6 1089 1517 0 0 10 /**
 *
 */ 1 4 this 3 1827  
709 0 0 4 1090 1624 0 0 9 // Frames 3 4 this 3 1826  4 ts_a 1 1630  4 ts_b 1 1630  
710 0 0 7 1091 1630 0 0 10 /**
 *
 */ 1 4 this 3 1827  
711 0 0 7 1092 1630 0 0 10 /**
 *
 */ 1 4 this 3 1827  
712 0 0 7 1107 1628 0 0 0 0 
713 0 0 7 1114 1720 1468 0 10 /**
 *
 */ 0 
714 0 0 15 1114 1720 1468 0 0 1 6 param0 0 1829  
715 0 0 4 1116 1624 0 0 10 /**
 *
 */ 2 4 this 3 1720  4 goal 1 1517  
716 0 0 4 1117 1624 0 0 10 /**
 *
 */ 2 4 this 3 1720  9 maxtorque 1 1517  
717 0 0 4 1118 1624 0 0 10 /**
 *
 */ 2 4 this 3 1720  5 angle 1 1517  
718 0 0 4 1119 1624 0 0 10 /**
 *
 */ 2 4 this 3 1720  4 sign 1 1517  
719 0 0 6 1112 1831 0 0 0 1 4 this 3 1720  
720 0 0 7 1121 1579 0 0 10 /**
 *
 */ 1 4 this 3 1832  
721 0 0 7 1123 1628 0 0 0 0 
722 0 0 15 1125 1836 0 0 10 /**
 *
 */ 1 4 copy 1 1834  
723 0 0 7 1125 1836 0 0 10 /**
 *
 */ 1 6 radius 1 1517  
724 0 0 6 1126 1517 0 0 69 /**
 * Returns the radius that was used to construct this sphere.
 */ 1 4 this 3 1834  
725 0 0 7 1127 1836 0 0 10 /**
 *
 */ 1 5 solid 1 1837  
726 0 0 7 1129 1628 0 0 0 0 
727 0 0 7 1131 1840 0 0 10 /**
 *
 */ 4 6 node_a 1 1676  6 node_b 1 1676  7 pivot_a 1 1679  7 pivot_b 1 1679  
728 0 0 7 1131 1840 0 0 10 /**
 *
 */ 2 6 node_a 1 1676  7 pivot_a 1 1679  
729 0 0 4 1132 1624 0 0 9 // Pivots 2 4 this 3 1840  7 pivot_a 1 1679  
730 0 0 4 1133 1624 0 0 10 /**
 *
 */ 2 4 this 3 1840  7 pivot_b 1 1679  
731 0 0 7 1134 1617 0 0 10 /**
 *
 */ 1 4 this 3 1841  
732 0 0 7 1135 1617 0 0 10 /**
 *
 */ 1 4 this 3 1841  
733 0 0 7 1138 1628 0 0 0 0 
734 0 0 7 1140 1845 1488 0 10 /**
 *
 */ 1 8 timestep 1 1843  
735 0 0 6 1141 1517 0 0 10 /**
 *
 */ 1 4 this 3 1846  
736 0 0 7 1143 1628 0 0 0 0 
737 0 0 7 1146 1848 0 0 10 /**
 *
 */ 0 
738 0 0 4 1147 1624 0 0 347 /**
 * Adds a triangle with the indicated coordinates.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 5 4 this 3 1848  2 p0 1 1679  2 p1 1 1679  2 p2 1 1679  25 remove_duplicate_vertices 5 1525  
739 0 0 4 1148 1624 0 0 452 /**
 * Adds triangle information from an array of points and indices referring to
 * these points.  This is more efficient than adding triangles one at a time.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 4 4 this 3 1848  6 points 1 1765  7 indices 1 1849  25 remove_duplicate_vertices 5 1525  
740 0 0 4 1149 1624 0 0 461 /**
 * Adds the geometry from the indicated Geom from the triangle mesh.  This is
 * a one-time copy operation, and future updates to the Geom will not be
 * reflected.
 *
 * If remove_duplicate_vertices is true, it will make sure that it does not
 * add duplicate vertices if they already exist in the triangle mesh, within
 * the tolerance specified by set_welding_distance().  This comes at a
 * significant performance cost, especially for large meshes.
 */ 4 4 this 3 1848  4 geom 1 1721  25 remove_duplicate_vertices 5 1525  2 ts 5 1630  
741 0 0 4 1150 1624 0 0 254 /**
 * Sets the square of the distance at which vertices will be merged
 * together when adding geometry with remove_duplicate_vertices set to true.
 *
 * The default is 0, meaning vertices will only be merged if they have the
 * exact same position.
 */ 2 4 this 3 1848  8 distance 1 1517  
742 0 0 4 1151 1624 0 0 239 /**
 * Used to reserve memory in anticipation of the given amount of vertices and
 * indices being added to the triangle mesh.  This is useful if you are about
 * to call add_triangle() many times, to prevent unnecessary reallocations.
 */ 3 4 this 3 1848  9 num_verts 1 1519  11 num_indices 1 1519  
743 0 0 6 1152 1853 0 0 65 /**
 * Returns the number of triangles in this triangle mesh.
 */ 1 4 this 3 1851  
744 0 0 6 1153 1517 0 0 110 /**
 * Returns the value previously set with set_welding_distance(), or the
 * value of 0 if none was set.
 */ 1 4 this 3 1851  
745 0 0 4 1154 1624 0 0 10 /**
 *
 */ 2 4 this 3 1851  3 out 1 1855  
746 0 0 4 1155 1624 0 0 10 /**
 *
 */ 3 4 this 3 1851  3 out 1 1855  12 indent_level 1 1519  
747 0 0 7 1163 1628 0 0 0 0 
748 0 0 6 1157 1853 0 0 64 /**
 * Returns the number of vertices in this triangle mesh.
 */ 1 4 this 3 1851  
749 0 0 7 1165 1857 0 0 155 /**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 * Assumes the lock(bullet global lock) is held by the caller
 */ 4 4 mesh 1 1848  7 dynamic 1 1525  8 compress 5 1525  3 bvh 5 1525  
750 0 0 15 1165 1857 0 0 10 /**
 *
 */ 1 4 copy 1 1858  
751 0 0 4 1166 1624 0 0 10 /**
 *
 */ 3 4 this 3 1857  8 aabb_min 1 1679  8 aabb_max 1 1679  
752 0 0 6 1167 1525 0 0 10 /**
 *
 */ 1 4 this 3 1858  
753 0 0 6 1168 1525 0 0 10 /**
 *
 */ 1 4 this 3 1858  
754 0 0 7 1171 1628 0 0 0 0 
755 0 0 6 2 1508 0 0 10 /**
 *
 */ 0 
756 0 0 6 3 1519 0 0 60 /**
 * Returns the version of the linked Bullet library.
 */ 0 
352
1508 12 BulletUpAxis 0 532481 12 BulletUpAxis 12 BulletUpAxis 0 0 0 0 0 0 0 0 0 0 3 4 X_up 4 X_up 0
0 4 Y_up 4 Y_up 0
1 4 Z_up 4 Z_up 0
2 0 0

1509 12 BulletRayHit 0 140289 12 BulletRayHit 12 BulletRayHit 0 0 0 1 766 767 6 1860 1861 1862 1863 1864 1865 7 759 760 761 762 763 764 765 0 0 1 0 1510 0 0 0 0 10
/**
 *
 */

1510 10 MemoryBase 0 2048 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 428
/**
 * This class is intended to be the base class of all objects in Panda that
 * might be allocated and deleted via the new and delete operators.  It
 * redefines these operators to provide some memory tracking support.
 *
 * We used to try to override the global operator new and delete methods, but
 * that seems to cause problems when including header files for C++-based
 * system libraries (such as are found on OSX).
 */

1511 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 1512 0 0 0 0 0 0 0 0 0 0

1512 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

1513 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1514 0 0 0 0 0 0 0 0 0 0

1514 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1515 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 1516 0 0 0 0 0 0 0 0 0 0

1516 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1517 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1518 0 0 0 0 0 0 0 0 0 0

1518 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1519 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1520 22 BulletAllHitsRayResult 0 140289 22 BulletAllHitsRayResult 22 BulletAllHitsRayResult 0 0 0 0 779 4 1866 1867 1868 1869 7 772 773 774 775 776 777 778 1 2159 0 2 3 1521 768 769 3 1510 770 771 0 0 10
/**
 *
 */

1521 24 AllHitsRayResultCallback 0 263168 42 btCollisionWorld::AllHitsRayResultCallback 42 btCollisionWorld::AllHitsRayResultCallback 1522 0 0 0 0 0 0 0 0 0 0 0 0

1522 16 btCollisionWorld 0 2048 16 btCollisionWorld 16 btCollisionWorld 0 0 0 0 0 0 0 0 0 0 0 0 0

1523 11 BulletShape 0 75777 11 BulletShape 11 BulletShape 0 0 0 0 0 10 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 12 780 781 782 783 784 785 786 787 788 789 790 791 0 0 1 0 1524 0 0 0 0 10
/**
 *
 */

1524 27 TypedWritableReferenceCount 0 2048 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1525 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1526 12 char const * 0 8576 12 char const * 12 char const * 0 0 1527 0 0 0 0 0 0 0 0 0 0

1527 10 char const 0 8832 10 char const 10 char const 0 0 1528 0 0 0 0 0 0 0 0 0 0

1528 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1529 14 BoundingSphere 0 2048 14 BoundingSphere 14 BoundingSphere 0 0 0 0 0 0 0 0 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1530 33 BulletBaseCharacterControllerNode 0 141313 33 BulletBaseCharacterControllerNode 33 BulletBaseCharacterControllerNode 0 0 0 0 793 0 1 792 0 0 1 0 1512 0 0 0 0 10
/**
 *
 */

1531 14 BulletBodyNode 0 75777 14 BulletBodyNode 14 BulletBodyNode 0 0 0 0 0 20 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 44 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 1 2160 0 1 0 1512 0 0 0 0 10
/**
 *
 */

1532 13 BulletShape * 0 8576 13 BulletShape * 13 BulletShape * 0 0 1523 0 0 0 0 0 0 0 0 0 0

1533 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1534 0 0 0 0 0 0 0 0 0 0

1534 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1535 32 ConstPointerTo< TransformState > 0 2048 32 ConstPointerTo< TransformState > 32 ConstPointerTo< TransformState > 0 0 0 0 0 0 0 0 0 0 0 0 0

1536 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 1537 0 0 0 0 0 0 0 0 0 0

1537 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1538 14 BulletBoxShape 0 75777 14 BulletBoxShape 14 BulletBoxShape 0 0 0 1 838 0 2 1900 1901 4 839 840 841 842 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1539 18 BulletCapsuleShape 0 75777 18 BulletCapsuleShape 18 BulletCapsuleShape 0 0 0 1 843 0 2 1902 1903 4 844 845 846 848 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1540 29 BulletCharacterControllerNode 0 75777 29 BulletCharacterControllerNode 29 BulletCharacterControllerNode 0 0 0 1 849 793 4 1904 1905 1906 1907 15 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 0 0 1 0 1530 0 0 0 0 10
/**
 *
 */

1541 25 BulletClosestHitRayResult 0 140289 25 BulletClosestHitRayResult 25 BulletClosestHitRayResult 0 0 0 1 879 880 8 1908 1909 1910 1911 1912 1913 1914 1915 10 869 870 871 872 873 874 875 876 877 878 0 0 2 3 1542 865 866 3 1510 867 868 0 0 10
/**
 *
 */

1542 24 ClosestRayResultCallback 0 263168 42 btCollisionWorld::ClosestRayResultCallback 42 btCollisionWorld::ClosestRayResultCallback 1522 0 0 0 0 0 0 0 0 0 0 0 0

1543 27 BulletClosestHitSweepResult 0 140289 27 BulletClosestHitSweepResult 27 BulletClosestHitSweepResult 0 0 0 1 893 894 6 1916 1917 1918 1919 1920 1921 8 885 886 887 888 889 890 891 892 0 0 2 3 1544 881 882 3 1510 883 884 0 0 10
/**
 *
 */

1544 27 ClosestConvexResultCallback 0 263168 45 btCollisionWorld::ClosestConvexResultCallback 45 btCollisionWorld::ClosestConvexResultCallback 1522 0 0 0 0 0 0 0 0 0 0 0 0

1545 15 BulletConeShape 0 75777 15 BulletConeShape 15 BulletConeShape 0 0 0 1 895 0 2 1922 1923 3 896 897 898 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1546 16 BulletConstraint 0 75777 16 BulletConstraint 16 BulletConstraint 0 0 0 0 0 6 1924 1941 1942 1943 1944 1945 13 899 900 901 902 903 904 905 906 907 908 909 910 948 0 0 1 0 1547 0 0 0 1 1548 10
/**
 *
 */

1547 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1548 15 ConstraintParam 0 794624 33 BulletConstraint::ConstraintParam 33 BulletConstraint::ConstraintParam 1546 0 0 0 0 0 0 0 0 0 4 6 CP_erp 24 BulletConstraint::CP_erp 0
1 11 CP_stop_erp 29 BulletConstraint::CP_stop_erp 0
2 6 CP_cfm 24 BulletConstraint::CP_cfm 0
3 11 CP_stop_cfm 29 BulletConstraint::CP_stop_cfm 0
4 0 0

1549 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 1550 0 0 0 0 0 0 0 0 0 0

1550 19 BulletRigidBodyNode 0 75777 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 1 911 0 16 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 36 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 0 0 1 0 1531 0 0 0 0 10
/**
 *
 */

1551 8 LMatrix3 0 2105344 8 LMatrix3 8 LMatrix3 0 0 1552 0 0 0 0 0 0 0 0 0 0

1552 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1553 25 BulletConeTwistConstraint 0 75777 25 BulletConeTwistConstraint 25 BulletConeTwistConstraint 0 0 0 1 949 0 3 1946 1947 1948 13 950 951 952 953 954 955 956 957 958 959 960 961 962 0 0 1 0 1546 0 0 0 0 10
/**
 *
 */

1554 19 BulletManifoldPoint 0 26625 19 BulletManifoldPoint 19 BulletManifoldPoint 0 0 0 0 963 23 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 35 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 0 0 0 0 0 10
/**
 *
 */

1555 25 BulletContactCallbackData 0 10241 25 BulletContactCallbackData 25 BulletContactCallbackData 0 0 0 1 999 0 7 1972 1973 1974 1975 1976 1977 1978 8 1000 1001 1002 1003 1004 1005 1006 1007 0 0 1 0 1556 0 0 0 0 10
/**
 *
 */

1556 12 CallbackData 0 2048 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 348
/**
 * This is a generic data block that is passed along to a CallbackObject when
 * a callback is made.  It contains data specific to the particular callback
 * type in question.
 *
 * This is actually an abstract base class and contains no data.
 * Specializations of this class will contain the actual data relevant to each
 * callback type.
 */

1557 13 BulletContact 0 140289 13 BulletContact 13 BulletContact 0 0 0 0 1015 7 1979 1980 1981 1982 1983 1984 1985 7 1008 1009 1010 1011 1012 1013 1014 0 0 0 0 0 10
/**
 *
 */

1558 19 BulletContactResult 0 140289 19 BulletContactResult 19 BulletContactResult 0 0 0 0 1020 1 1986 2 1018 1019 1 2161 0 1 3 1559 1016 1017 0 0 10
/**
 *
 */

1559 21 ContactResultCallback 0 263168 39 btCollisionWorld::ContactResultCallback 39 btCollisionWorld::ContactResultCallback 1522 0 0 0 0 0 0 0 0 0 0 0 0

1560 15 BulletDebugNode 0 75777 15 BulletDebugNode 15 BulletDebugNode 0 0 0 1 1021 0 4 1987 1988 1989 1990 10 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 0 0 1 0 1512 0 0 0 0 10
/**
 *
 */

1561 15 BulletGhostNode 0 75777 15 BulletGhostNode 15 BulletGhostNode 0 0 0 1 1032 0 1 1991 3 1033 1034 1035 1 2162 0 1 0 1531 0 0 0 0 10
/**
 *
 */

1562 25 BulletSoftBodyNodeElement 0 26625 25 BulletSoftBodyNodeElement 25 BulletSoftBodyNodeElement 0 0 0 1 1044 1036 6 1992 1993 1994 1995 1996 1997 7 1037 1038 1039 1040 1041 1042 1043 0 0 0 0 0 10
/**
 *
 */

1563 18 BulletSoftBodyNode 0 75777 18 BulletSoftBodyNode 18 BulletSoftBodyNode 0 0 0 0 0 7 1998 2024 2030 2031 2032 2033 2037 45 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1166 2 2163 2164 0 1 0 1531 0 0 0 0 10
/**
 *
 */

1564 20 BulletSoftBodyConfig 0 26625 20 BulletSoftBodyConfig 20 BulletSoftBodyConfig 0 0 0 1 1143 1089 25 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 53 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 0 0 0 0 2 1565 1566 10
/**
 *
 */

1565 13 CollisionFlag 0 794624 35 BulletSoftBodyConfig::CollisionFlag 35 BulletSoftBodyConfig::CollisionFlag 1564 0 0 0 0 0 0 0 0 0 7 21 CF_rigid_vs_soft_mask 43 BulletSoftBodyConfig::CF_rigid_vs_soft_mask 34
// RVSmask: Rigid versus soft mask
15 17 CF_sdf_rigid_soft 39 BulletSoftBodyConfig::CF_sdf_rigid_soft 35
// SDF_RS:  SDF based rigid vs soft
1 21 CF_cluster_rigid_soft 43 BulletSoftBodyConfig::CF_cluster_rigid_soft 43
// CL_RS:   Cluster vs convex rigid vs soft
2 20 CF_soft_vs_soft_mask 42 BulletSoftBodyConfig::CF_soft_vs_soft_mask 33
// SVSmask: Soft versus soft mask
48 24 CF_vertex_face_soft_soft 46 BulletSoftBodyConfig::CF_vertex_face_soft_soft 48
// VF_SS:   Vertex vs face soft vs soft handling
16 20 CF_cluster_soft_soft 42 BulletSoftBodyConfig::CF_cluster_soft_soft 52
// CL_SS:   Cluster vs cluster soft vs soft handling
32 15 CF_cluster_self 37 BulletSoftBodyConfig::CF_cluster_self 44
// CL_SELF: Cluster soft body self collision
64 0 0

1566 9 AeroModel 0 794624 31 BulletSoftBodyConfig::AeroModel 31 BulletSoftBodyConfig::AeroModel 1564 0 0 0 0 0 0 0 0 0 5 15 AM_vertex_point 37 BulletSoftBodyConfig::AM_vertex_point 58
// V_Point:    Vertex normals are oriented toward velocity
0 19 AM_vertex_two_sided 41 BulletSoftBodyConfig::AM_vertex_two_sided 58
// V_TwoSided: Vertex normals are fliped to match velocity
1 19 AM_vertex_one_sided 41 BulletSoftBodyConfig::AM_vertex_one_sided 48
// V_OneSided: Vertex normals are taken as it is
2 17 AM_face_two_sided 39 BulletSoftBodyConfig::AM_face_two_sided 56
// F_TwoSided: Face normals are fliped to match velocity
3 17 AM_face_one_sided 39 BulletSoftBodyConfig::AM_face_one_sided 46
// F_OneSided: Face normals are taken as it is
4 0 0

1567 23 BulletSoftBodyWorldInfo 0 26625 23 BulletSoftBodyWorldInfo 23 BulletSoftBodyWorldInfo 0 0 0 1 1156 1144 5 2025 2026 2027 2028 2029 11 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 0 0 0 0 0 10
/**
 *
 */

1568 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1569 22 BulletSoftBodyMaterial 0 26625 22 BulletSoftBodyMaterial 22 BulletSoftBodyMaterial 0 0 0 1 1165 1157 3 2034 2035 2036 7 1158 1159 1160 1161 1162 1163 1164 0 0 0 0 0 10
/**
 *
 */

1570 19 BulletVehicleTuning 0 10241 19 BulletVehicleTuning 19 BulletVehicleTuning 0 0 0 0 0 6 2038 2039 2040 2041 2042 2043 12 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 0 0 0 0 0 10
/**
 *
 */

1571 13 BulletVehicle 0 75777 13 BulletVehicle 13 BulletVehicle 0 0 0 1 1179 0 5 2044 2045 2046 2047 2081 15 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1254 1 2165 0 1 0 1547 0 0 0 0 257
/**
 * Simulates a raycast vehicle which casts a ray per wheel at the ground as a
 * cheap replacement for complex suspension simulation.  The suspension can be
 * tuned in various ways.  It is possible to add a (probably) arbitrary number
 * of wheels.
 */

1572 11 BulletWheel 0 26625 11 BulletWheel 11 BulletWheel 0 0 0 1 1253 1194 25 2048 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 48 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 0 0 0 0 0 145
/**
 * One wheel of a BulletVehicle.  Instances should not be created directly but
 * using the factory method BulletVehicle::create_wheel().
 */

1573 22 BulletWheelRaycastInfo 0 26625 22 BulletWheelRaycastInfo 22 BulletWheelRaycastInfo 0 0 0 1 1252 1243 8 2049 2050 2051 2052 2053 2054 2055 2056 8 1244 1245 1246 1247 1248 1249 1250 1251 0 0 0 0 0 10
/**
 *
 */

1574 11 BulletWorld 0 75777 11 BulletWorld 11 BulletWorld 0 0 0 1 1255 0 11 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2097 53 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 7 2166 2167 2168 2169 2170 2171 2172 0 1 0 1547 0 0 0 2 1575 1576 10
/**
 *
 */

1575 19 BroadphaseAlgorithm 0 794624 32 BulletWorld::BroadphaseAlgorithm 32 BulletWorld::BroadphaseAlgorithm 1574 0 0 0 0 0 0 0 0 0 2 18 BA_sweep_and_prune 31 BulletWorld::BA_sweep_and_prune 0
0 20 BA_dynamic_aabb_tree 33 BulletWorld::BA_dynamic_aabb_tree 0
1 0 16
// Configuration

1576 15 FilterAlgorithm 0 794624 28 BulletWorld::FilterAlgorithm 28 BulletWorld::FilterAlgorithm 1574 0 0 0 0 0 0 0 0 0 3 7 FA_mask 20 BulletWorld::FA_mask 0
0 14 FA_groups_mask 27 BulletWorld::FA_groups_mask 0
1 11 FA_callback 24 BulletWorld::FA_callback 0
2 0 0

1577 17 BulletDebugNode * 0 8576 17 BulletDebugNode * 17 BulletDebugNode * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1578 17 BulletGhostNode * 0 8576 17 BulletGhostNode * 17 BulletGhostNode * 0 0 1561 0 0 0 0 0 0 0 0 0 0

1579 20 BulletSoftBodyNode * 0 8576 20 BulletSoftBodyNode * 20 BulletSoftBodyNode * 0 0 1563 0 0 0 0 0 0 0 0 0 0

1580 35 BulletBaseCharacterControllerNode * 0 8576 35 BulletBaseCharacterControllerNode * 35 BulletBaseCharacterControllerNode * 0 0 1530 0 0 0 0 0 0 0 0 0 0

1581 15 BulletVehicle * 0 8576 15 BulletVehicle * 15 BulletVehicle * 0 0 1571 0 0 0 0 0 0 0 0 0 0

1582 18 BulletConstraint * 0 8576 18 BulletConstraint * 18 BulletConstraint * 0 0 1546 0 0 0 0 0 0 0 0 0 0

1583 24 BulletPersistentManifold 0 26625 24 BulletPersistentManifold 24 BulletPersistentManifold 0 0 0 1 1305 1297 5 2092 2093 2094 2095 2096 7 1298 1299 1300 1301 1302 1303 1304 1 2173 0 0 0 0 10
/**
 *
 */

1584 21 BulletConvexHullShape 0 75777 21 BulletConvexHullShape 21 BulletConvexHullShape 0 0 0 1 1318 0 0 4 1319 1320 1321 1322 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1585 27 BulletConvexPointCloudShape 0 75777 27 BulletConvexPointCloudShape 27 BulletConvexPointCloudShape 0 0 0 1 1323 0 1 2098 2 1324 1325 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1586 19 BulletCylinderShape 0 75777 19 BulletCylinderShape 19 BulletCylinderShape 0 0 0 1 1326 0 3 2099 2100 2101 4 1327 1328 1329 1330 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1587 24 BulletFilterCallbackData 0 141313 24 BulletFilterCallbackData 24 BulletFilterCallbackData 0 0 0 1 1331 1337 3 2102 2103 2104 5 1332 1333 1334 1335 1336 0 0 1 0 1556 0 0 0 0 10
/**
 *
 */

1588 26 BulletRotationalLimitMotor 0 26625 26 BulletRotationalLimitMotor 26 BulletRotationalLimitMotor 0 0 0 1 1338 1339 6 2105 2106 2107 2108 2109 2110 18 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1589 29 BulletTranslationalLimitMotor 0 26625 29 BulletTranslationalLimitMotor 29 BulletTranslationalLimitMotor 0 0 0 1 1358 1359 3 2111 2112 2113 17 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1590 23 BulletGenericConstraint 0 75777 23 BulletGenericConstraint 23 BulletGenericConstraint 0 0 0 1 1377 0 3 2114 2115 2116 11 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 0 0 1 0 1546 0 0 0 0 10
/**
 *
 */

1591 22 BulletHeightfieldShape 0 75777 22 BulletHeightfieldShape 22 BulletHeightfieldShape 0 0 0 1 1389 0 0 2 1390 1391 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1592 12 BulletHelper 0 141313 12 BulletHelper 12 BulletHelper 0 0 0 1 1400 1401 2 2117 2118 8 1392 1393 1394 1395 1396 1397 1398 1399 0 0 0 0 0 10
/**
 *
 */

1593 25 PointerTo< InternalName > 0 2048 25 PointerTo< InternalName > 25 PointerTo< InternalName > 0 0 0 0 0 0 0 0 0 0 0 0 0

1594 21 BulletHingeConstraint 0 75777 21 BulletHingeConstraint 21 BulletHingeConstraint 0 0 0 1 1402 0 6 2119 2120 2121 2122 2123 2124 15 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 0 0 1 0 1546 0 0 0 0 158
/**
 * The hinge constraint lets two bodies rotate around a given axis while
 * adhering to specified limits.  It's motor can apply angular force to them.
 */

1595 23 BulletMinkowskiSumShape 0 75777 23 BulletMinkowskiSumShape 23 BulletMinkowskiSumShape 0 0 0 1 1418 0 4 2125 2126 2127 2128 7 1419 1420 1421 1422 1423 1424 1425 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1596 19 BulletShape const * 0 8576 19 BulletShape const * 19 BulletShape const * 0 0 1597 0 0 0 0 0 0 0 0 0 0

1597 17 BulletShape const 0 8832 17 BulletShape const 17 BulletShape const 0 0 1523 0 0 0 0 0 0 0 0 0 0

1598 22 BulletMultiSphereShape 0 75777 22 BulletMultiSphereShape 22 BulletMultiSphereShape 0 0 0 1 1426 0 3 2129 2130 2131 5 1427 1428 1429 1430 1431 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1599 16 BulletPlaneShape 0 75777 16 BulletPlaneShape 16 BulletPlaneShape 0 0 0 1 1432 0 3 2132 2133 2134 5 1433 1434 1435 1436 1437 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1600 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 1601 0 0 0 0 0 0 0 0 0 0

1601 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1602 22 BulletSliderConstraint 0 75777 22 BulletSliderConstraint 22 BulletSliderConstraint 0 0 0 1 1438 0 14 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 26 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 0 0 1 0 1546 0 0 0 0 10
/**
 *
 */

1603 21 BulletSoftBodyControl 0 26625 21 BulletSoftBodyControl 21 BulletSoftBodyControl 0 0 0 1 1467 1468 0 4 1469 1470 1471 1472 0 0 1 3 1604 1465 1466 0 0 10
/**
 *
 */

1604 8 IControl 0 263168 28 btSoftBody::AJoint::IControl 28 btSoftBody::AJoint::IControl 1605 0 0 0 0 0 0 0 0 0 0 0 0

1605 6 AJoint 0 263168 18 btSoftBody::AJoint 18 btSoftBody::AJoint 1606 0 0 0 0 0 0 0 0 0 0 0 0

1606 10 btSoftBody 0 2048 10 btSoftBody 10 btSoftBody 0 0 0 0 0 0 0 0 0 0 0 0 0

1607 19 BulletSoftBodyShape 0 75777 19 BulletSoftBodyShape 19 BulletSoftBodyShape 0 0 0 0 0 1 2149 2 1473 1474 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1608 17 BulletSphereShape 0 75777 17 BulletSphereShape 17 BulletSphereShape 0 0 0 1 1475 0 1 2150 3 1476 1477 1478 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1609 25 BulletSphericalConstraint 0 75777 25 BulletSphericalConstraint 25 BulletSphericalConstraint 0 0 0 1 1479 0 2 2151 2152 5 1480 1481 1482 1483 1484 0 0 1 0 1546 0 0 0 0 328
/**
 * A constraint between two rigid bodies, each with a pivot point.  The pivot
 * points are described in the body's local space.  The constraint limits
 * movement of the two rigid bodies in such a way that the pivot points match
 * in global space.  The spherical constraint can be seen as a "ball and
 * socket" joint.
 */

1610 22 BulletTickCallbackData 0 141313 22 BulletTickCallbackData 22 BulletTickCallbackData 0 0 0 1 1485 1488 1 2153 2 1486 1487 0 0 1 0 1556 0 0 0 0 10
/**
 *
 */

1611 18 BulletTriangleMesh 0 75777 18 BulletTriangleMesh 18 BulletTriangleMesh 0 0 0 1 1489 0 3 2154 2155 2156 10 1490 1491 1492 1493 1494 1495 1496 1497 1498 1502 0 0 1 0 1524 0 0 0 0 10
/**
 *
 */

1612 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1613 23 BulletTriangleMeshShape 0 75777 23 BulletTriangleMeshShape 23 BulletTriangleMeshShape 0 0 0 1 1503 0 2 2157 2158 4 1504 1505 1506 1507 0 0 1 0 1523 0 0 0 0 10
/**
 *
 */

1614 14 BulletRayHit * 0 8576 14 BulletRayHit * 14 BulletRayHit * 0 0 1509 0 0 0 0 0 0 0 0 0 0

1615 20 BulletRayHit const * 0 8576 20 BulletRayHit const * 20 BulletRayHit const * 0 0 1616 0 0 0 0 0 0 0 0 0 0

1616 18 BulletRayHit const 0 8832 18 BulletRayHit const 18 BulletRayHit const 0 0 1509 0 0 0 0 0 0 0 0 0 0

1617 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1513 0 0 0 0 0 0 0 0 0 0

1618 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 1515 0 0 0 0 0 0 0 0 0 0

1619 24 BulletAllHitsRayResult * 0 8576 24 BulletAllHitsRayResult * 24 BulletAllHitsRayResult * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1620 30 BulletAllHitsRayResult const * 0 8576 30 BulletAllHitsRayResult const * 30 BulletAllHitsRayResult const * 0 0 1621 0 0 0 0 0 0 0 0 0 0

1621 28 BulletAllHitsRayResult const 0 8832 28 BulletAllHitsRayResult const 28 BulletAllHitsRayResult const 0 0 1520 0 0 0 0 0 0 0 0 0 0

1622 26 AllHitsRayResultCallback * 0 8576 44 btCollisionWorld::AllHitsRayResultCallback * 44 btCollisionWorld::AllHitsRayResultCallback * 0 0 1521 0 0 0 0 0 0 0 0 0 0

1623 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 1510 0 0 0 0 0 0 0 0 0 0

1624 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1625 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1626 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1529 0 0 0 0 0 0 0 0 0 0

1627 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1628 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1627 0 0 0 0 0 0 0 0 0 0

1629 16 BulletBodyNode * 0 8576 16 BulletBodyNode * 16 BulletBodyNode * 0 0 1531 0 0 0 0 0 0 0 0 0 0

1630 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 1631 0 0 0 0 0 0 0 0 0 0

1631 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 1632 0 0 0 0 0 0 0 0 0 0

1632 14 TransformState 0 16779264 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

1633 22 BulletBodyNode const * 0 8576 22 BulletBodyNode const * 22 BulletBodyNode const * 0 0 1634 0 0 0 0 0 0 0 0 0 0

1634 20 BulletBodyNode const 0 8832 20 BulletBodyNode const 20 BulletBodyNode const 0 0 1531 0 0 0 0 0 0 0 0 0 0

1635 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 1533 0 0 0 0 0 0 0 0 0 0

1636 15 CollisionNode * 0 8576 15 CollisionNode * 15 CollisionNode * 0 0 1637 0 0 0 0 0 0 0 0 0 0

1637 13 CollisionNode 0 2048 13 CollisionNode 13 CollisionNode 0 0 0 0 0 0 0 0 0 0 0 0 261
/**
 * A node in the scene graph that can hold any number of CollisionSolids.
 * This may either represent a bit of static geometry in the scene that things
 * will collide with, or an animated object twirling around in the world and
 * running into things.
 */

1638 13 CollideMask * 0 8576 13 CollideMask * 13 CollideMask * 0 0 1639 0 0 0 0 0 0 0 0 0 0

1639 11 CollideMask 0 2105344 11 CollideMask 11 CollideMask 0 0 1640 0 0 0 0 0 0 0 0 0 0

1640 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1641 0 0 0 0 0 0 0 0 0 0

1641 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1642 10 bool const 0 8832 10 bool const 10 bool const 0 0 1525 0 0 0 0 0 0 0 0 0 0

1643 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 1644 0 0 0 0 0 0 0 0 0 0

1644 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 1536 0 0 0 0 0 0 0 0 0 0

1645 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1646 22 BulletBoxShape const * 0 8576 22 BulletBoxShape const * 22 BulletBoxShape const * 0 0 1647 0 0 0 0 0 0 0 0 0 0

1647 20 BulletBoxShape const 0 8832 20 BulletBoxShape const 20 BulletBoxShape const 0 0 1538 0 0 0 0 0 0 0 0 0 0

1648 16 BulletBoxShape * 0 8576 16 BulletBoxShape * 16 BulletBoxShape * 0 0 1538 0 0 0 0 0 0 0 0 0 0

1649 20 CollisionBox const * 0 8576 20 CollisionBox const * 20 CollisionBox const * 0 0 1650 0 0 0 0 0 0 0 0 0 0

1650 18 CollisionBox const 0 8832 18 CollisionBox const 18 CollisionBox const 0 0 1651 0 0 0 0 0 0 0 0 0 0

1651 12 CollisionBox 0 2048 12 CollisionBox 12 CollisionBox 0 0 0 0 0 0 0 0 0 0 0 0 47
/**
 * A cuboid collision volume or object.
 */

1652 26 BulletCapsuleShape const * 0 8576 26 BulletCapsuleShape const * 26 BulletCapsuleShape const * 0 0 1653 0 0 0 0 0 0 0 0 0 0

1653 24 BulletCapsuleShape const 0 8832 24 BulletCapsuleShape const 24 BulletCapsuleShape const 0 0 1539 0 0 0 0 0 0 0 0 0 0

1654 20 BulletCapsuleShape * 0 8576 20 BulletCapsuleShape * 20 BulletCapsuleShape * 0 0 1539 0 0 0 0 0 0 0 0 0 0

1655 24 CollisionCapsule const * 0 8576 24 CollisionCapsule const * 24 CollisionCapsule const * 0 0 1656 0 0 0 0 0 0 0 0 0 0

1656 22 CollisionCapsule const 0 8832 22 CollisionCapsule const 22 CollisionCapsule const 0 0 1657 0 0 0 0 0 0 0 0 0 0

1657 16 CollisionCapsule 0 2048 16 CollisionCapsule 16 CollisionCapsule 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * This implements a solid consisting of a cylinder with hemispherical endcaps,
 * also known as a capsule or a spherocylinder.
 *
 * This shape was previously erroneously called CollisionTube.
 */

1658 31 BulletCharacterControllerNode * 0 8576 31 BulletCharacterControllerNode * 31 BulletCharacterControllerNode * 0 0 1540 0 0 0 0 0 0 0 0 0 0

1659 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 1660 0 0 0 0 0 0 0 0 0 0

1660 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 1515 0 0 0 0 0 0 0 0 0 0

1661 37 BulletCharacterControllerNode const * 0 8576 37 BulletCharacterControllerNode const * 37 BulletCharacterControllerNode const * 0 0 1662 0 0 0 0 0 0 0 0 0 0

1662 35 BulletCharacterControllerNode const 0 8832 35 BulletCharacterControllerNode const 35 BulletCharacterControllerNode const 0 0 1540 0 0 0 0 0 0 0 0 0 0

1663 33 BulletClosestHitRayResult const * 0 8576 33 BulletClosestHitRayResult const * 33 BulletClosestHitRayResult const * 0 0 1664 0 0 0 0 0 0 0 0 0 0

1664 31 BulletClosestHitRayResult const 0 8832 31 BulletClosestHitRayResult const 31 BulletClosestHitRayResult const 0 0 1541 0 0 0 0 0 0 0 0 0 0

1665 27 BulletClosestHitRayResult * 0 8576 27 BulletClosestHitRayResult * 27 BulletClosestHitRayResult * 0 0 1541 0 0 0 0 0 0 0 0 0 0

1666 26 ClosestRayResultCallback * 0 8576 44 btCollisionWorld::ClosestRayResultCallback * 44 btCollisionWorld::ClosestRayResultCallback * 0 0 1542 0 0 0 0 0 0 0 0 0 0

1667 35 BulletClosestHitSweepResult const * 0 8576 35 BulletClosestHitSweepResult const * 35 BulletClosestHitSweepResult const * 0 0 1668 0 0 0 0 0 0 0 0 0 0

1668 33 BulletClosestHitSweepResult const 0 8832 33 BulletClosestHitSweepResult const 33 BulletClosestHitSweepResult const 0 0 1543 0 0 0 0 0 0 0 0 0 0

1669 29 BulletClosestHitSweepResult * 0 8576 29 BulletClosestHitSweepResult * 29 BulletClosestHitSweepResult * 0 0 1543 0 0 0 0 0 0 0 0 0 0

1670 29 ClosestConvexResultCallback * 0 8576 47 btCollisionWorld::ClosestConvexResultCallback * 47 btCollisionWorld::ClosestConvexResultCallback * 0 0 1544 0 0 0 0 0 0 0 0 0 0

1671 23 BulletConeShape const * 0 8576 23 BulletConeShape const * 23 BulletConeShape const * 0 0 1672 0 0 0 0 0 0 0 0 0 0

1672 21 BulletConeShape const 0 8832 21 BulletConeShape const 21 BulletConeShape const 0 0 1545 0 0 0 0 0 0 0 0 0 0

1673 17 BulletConeShape * 0 8576 17 BulletConeShape * 17 BulletConeShape * 0 0 1545 0 0 0 0 0 0 0 0 0 0

1674 24 BulletConstraint const * 0 8576 24 BulletConstraint const * 24 BulletConstraint const * 0 0 1675 0 0 0 0 0 0 0 0 0 0

1675 22 BulletConstraint const 0 8832 22 BulletConstraint const 22 BulletConstraint const 0 0 1546 0 0 0 0 0 0 0 0 0 0

1676 27 BulletRigidBodyNode const * 0 8576 27 BulletRigidBodyNode const * 27 BulletRigidBodyNode const * 0 0 1677 0 0 0 0 0 0 0 0 0 0

1677 25 BulletRigidBodyNode const 0 8832 25 BulletRigidBodyNode const 25 BulletRigidBodyNode const 0 0 1550 0 0 0 0 0 0 0 0 0 0

1678 10 LMatrix3 * 0 8576 10 LMatrix3 * 10 LMatrix3 * 0 0 1551 0 0 0 0 0 0 0 0 0 0

1679 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1680 0 0 0 0 0 0 0 0 0 0

1680 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1513 0 0 0 0 0 0 0 0 0 0

1681 27 BulletConeTwistConstraint * 0 8576 27 BulletConeTwistConstraint * 27 BulletConeTwistConstraint * 0 0 1553 0 0 0 0 0 0 0 0 0 0

1682 33 BulletConeTwistConstraint const * 0 8576 33 BulletConeTwistConstraint const * 33 BulletConeTwistConstraint const * 0 0 1683 0 0 0 0 0 0 0 0 0 0

1683 31 BulletConeTwistConstraint const 0 8832 31 BulletConeTwistConstraint const 31 BulletConeTwistConstraint const 0 0 1553 0 0 0 0 0 0 0 0 0 0

1684 19 LQuaternion const * 0 8576 19 LQuaternion const * 19 LQuaternion const * 0 0 1685 0 0 0 0 0 0 0 0 0 0

1685 17 LQuaternion const 0 8832 17 LQuaternion const 17 LQuaternion const 0 0 1686 0 0 0 0 0 0 0 0 0 0

1686 11 LQuaternion 0 2105344 11 LQuaternion 11 LQuaternion 0 0 1687 0 0 0 0 0 0 0 0 0 0

1687 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1688 27 BulletManifoldPoint const * 0 8576 27 BulletManifoldPoint const * 27 BulletManifoldPoint const * 0 0 1689 0 0 0 0 0 0 0 0 0 0

1689 25 BulletManifoldPoint const 0 8832 25 BulletManifoldPoint const 25 BulletManifoldPoint const 0 0 1554 0 0 0 0 0 0 0 0 0 0

1690 21 BulletManifoldPoint * 0 8576 21 BulletManifoldPoint * 21 BulletManifoldPoint * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1691 27 BulletContactCallbackData * 0 8576 27 BulletContactCallbackData * 27 BulletContactCallbackData * 0 0 1555 0 0 0 0 0 0 0 0 0 0

1692 33 BulletContactCallbackData const * 0 8576 33 BulletContactCallbackData const * 33 BulletContactCallbackData const * 0 0 1693 0 0 0 0 0 0 0 0 0 0

1693 31 BulletContactCallbackData const 0 8832 31 BulletContactCallbackData const 31 BulletContactCallbackData const 0 0 1555 0 0 0 0 0 0 0 0 0 0

1694 15 BulletContact * 0 8576 15 BulletContact * 15 BulletContact * 0 0 1557 0 0 0 0 0 0 0 0 0 0

1695 21 BulletContact const * 0 8576 21 BulletContact const * 21 BulletContact const * 0 0 1696 0 0 0 0 0 0 0 0 0 0

1696 19 BulletContact const 0 8832 19 BulletContact const 19 BulletContact const 0 0 1557 0 0 0 0 0 0 0 0 0 0

1697 27 BulletContactResult const * 0 8576 27 BulletContactResult const * 27 BulletContactResult const * 0 0 1698 0 0 0 0 0 0 0 0 0 0

1698 25 BulletContactResult const 0 8832 25 BulletContactResult const 25 BulletContactResult const 0 0 1558 0 0 0 0 0 0 0 0 0 0

1699 21 BulletContactResult * 0 8576 21 BulletContactResult * 21 BulletContactResult * 0 0 1558 0 0 0 0 0 0 0 0 0 0

1700 23 ContactResultCallback * 0 8576 41 btCollisionWorld::ContactResultCallback * 41 btCollisionWorld::ContactResultCallback * 0 0 1559 0 0 0 0 0 0 0 0 0 0

1701 23 BulletDebugNode const * 0 8576 23 BulletDebugNode const * 23 BulletDebugNode const * 0 0 1702 0 0 0 0 0 0 0 0 0 0

1702 21 BulletDebugNode const 0 8832 21 BulletDebugNode const 21 BulletDebugNode const 0 0 1560 0 0 0 0 0 0 0 0 0 0

1703 23 BulletGhostNode const * 0 8576 23 BulletGhostNode const * 23 BulletGhostNode const * 0 0 1704 0 0 0 0 0 0 0 0 0 0

1704 21 BulletGhostNode const 0 8832 21 BulletGhostNode const 21 BulletGhostNode const 0 0 1561 0 0 0 0 0 0 0 0 0 0

1705 33 BulletSoftBodyNodeElement const * 0 8576 33 BulletSoftBodyNodeElement const * 33 BulletSoftBodyNodeElement const * 0 0 1706 0 0 0 0 0 0 0 0 0 0

1706 31 BulletSoftBodyNodeElement const 0 8832 31 BulletSoftBodyNodeElement const 31 BulletSoftBodyNodeElement const 0 0 1562 0 0 0 0 0 0 0 0 0 0

1707 27 BulletSoftBodyNodeElement * 0 8576 27 BulletSoftBodyNodeElement * 27 BulletSoftBodyNodeElement * 0 0 1562 0 0 0 0 0 0 0 0 0 0

1708 22 BulletSoftBodyConfig * 0 8576 22 BulletSoftBodyConfig * 22 BulletSoftBodyConfig * 0 0 1564 0 0 0 0 0 0 0 0 0 0

1709 25 BulletSoftBodyWorldInfo * 0 8576 25 BulletSoftBodyWorldInfo * 25 BulletSoftBodyWorldInfo * 0 0 1567 0 0 0 0 0 0 0 0 0 0

1710 24 BulletSoftBodyMaterial * 0 8576 24 BulletSoftBodyMaterial * 24 BulletSoftBodyMaterial * 0 0 1569 0 0 0 0 0 0 0 0 0 0

1711 26 BulletSoftBodyNode const * 0 8576 26 BulletSoftBodyNode const * 26 BulletSoftBodyNode const * 0 0 1712 0 0 0 0 0 0 0 0 0 0

1712 24 BulletSoftBodyNode const 0 8832 24 BulletSoftBodyNode const 24 BulletSoftBodyNode const 0 0 1563 0 0 0 0 0 0 0 0 0 0

1713 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1568 0 0 0 0 0 0 0 0 0 0

1714 6 Geom * 0 8576 6 Geom * 6 Geom * 0 0 1715 0 0 0 0 0 0 0 0 0 0

1715 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

1716 21 NurbsCurveEvaluator * 0 8576 21 NurbsCurveEvaluator * 21 NurbsCurveEvaluator * 0 0 1717 0 0 0 0 0 0 0 0 0 0

1717 19 NurbsCurveEvaluator 0 2048 19 NurbsCurveEvaluator 19 NurbsCurveEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 492
/**
 * This class is an abstraction for evaluating NURBS curves.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 *
 * This is not related to NurbsCurve, CubicCurveseg or any of the
 * ParametricCurve-derived objects in this module.  It is a completely
 * parallel implementation of NURBS curves, and will probably eventually
 * replace the whole ParametricCurve class hierarchy.
 */

1718 23 NurbsSurfaceEvaluator * 0 8576 23 NurbsSurfaceEvaluator * 23 NurbsSurfaceEvaluator * 0 0 1719 0 0 0 0 0 0 0 0 0 0

1719 21 NurbsSurfaceEvaluator 0 2048 21 NurbsSurfaceEvaluator 21 NurbsSurfaceEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 227
/**
 * This class is an abstraction for evaluating NURBS surfaces.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 */

1720 23 BulletSoftBodyControl * 0 8576 23 BulletSoftBodyControl * 23 BulletSoftBodyControl * 0 0 1603 0 0 0 0 0 0 0 0 0 0

1721 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 1722 0 0 0 0 0 0 0 0 0 0

1722 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 1715 0 0 0 0 0 0 0 0 0 0

1723 15 PTA_LVecBase3 * 0 8576 15 PTA_LVecBase3 * 15 PTA_LVecBase3 * 0 0 1724 0 0 0 0 0 0 0 0 0 0

1724 13 PTA_LVecBase3 0 2105344 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1725 0 0 0 0 0 0 0 0 0 0

1725 14 PTA_LVecBase3f 0 2105344 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1726 0 0 0 0 0 0 0 0 0 0

1726 28 PointerToArray< LVecBase3f > 0 2048 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

1727 9 PTA_int * 0 8576 9 PTA_int * 9 PTA_int * 0 0 1728 0 0 0 0 0 0 0 0 0 0

1728 7 PTA_int 0 2105344 7 PTA_int 7 PTA_int 0 0 1729 0 0 0 0 0 0 0 0 0 0

1729 21 PointerToArray< int > 0 2048 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

1730 28 BulletSoftBodyConfig const * 0 8576 28 BulletSoftBodyConfig const * 28 BulletSoftBodyConfig const * 0 0 1731 0 0 0 0 0 0 0 0 0 0

1731 26 BulletSoftBodyConfig const 0 8832 26 BulletSoftBodyConfig const 26 BulletSoftBodyConfig const 0 0 1564 0 0 0 0 0 0 0 0 0 0

1732 31 BulletSoftBodyWorldInfo const * 0 8576 31 BulletSoftBodyWorldInfo const * 31 BulletSoftBodyWorldInfo const * 0 0 1733 0 0 0 0 0 0 0 0 0 0

1733 29 BulletSoftBodyWorldInfo const 0 8832 29 BulletSoftBodyWorldInfo const 29 BulletSoftBodyWorldInfo const 0 0 1567 0 0 0 0 0 0 0 0 0 0

1734 30 BulletSoftBodyMaterial const * 0 8576 30 BulletSoftBodyMaterial const * 30 BulletSoftBodyMaterial const * 0 0 1735 0 0 0 0 0 0 0 0 0 0

1735 28 BulletSoftBodyMaterial const 0 8832 28 BulletSoftBodyMaterial const 28 BulletSoftBodyMaterial const 0 0 1569 0 0 0 0 0 0 0 0 0 0

1736 21 BulletVehicleTuning * 0 8576 21 BulletVehicleTuning * 21 BulletVehicleTuning * 0 0 1570 0 0 0 0 0 0 0 0 0 0

1737 27 BulletVehicleTuning const * 0 8576 27 BulletVehicleTuning const * 27 BulletVehicleTuning const * 0 0 1738 0 0 0 0 0 0 0 0 0 0

1738 25 BulletVehicleTuning const 0 8832 25 BulletVehicleTuning const 25 BulletVehicleTuning const 0 0 1570 0 0 0 0 0 0 0 0 0 0

1739 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 1574 0 0 0 0 0 0 0 0 0 0

1740 21 BulletVehicle const * 0 8576 21 BulletVehicle const * 21 BulletVehicle const * 0 0 1741 0 0 0 0 0 0 0 0 0 0

1741 19 BulletVehicle const 0 8832 19 BulletVehicle const 19 BulletVehicle const 0 0 1571 0 0 0 0 0 0 0 0 0 0

1742 13 BulletWheel * 0 8576 13 BulletWheel * 13 BulletWheel * 0 0 1572 0 0 0 0 0 0 0 0 0 0

1743 19 BulletWheel const * 0 8576 19 BulletWheel const * 19 BulletWheel const * 0 0 1744 0 0 0 0 0 0 0 0 0 0

1744 17 BulletWheel const 0 8832 17 BulletWheel const 17 BulletWheel const 0 0 1572 0 0 0 0 0 0 0 0 0 0

1745 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1746 0 0 0 0 0 0 0 0 0 0

1746 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1533 0 0 0 0 0 0 0 0 0 0

1747 24 BulletWheelRaycastInfo * 0 8576 24 BulletWheelRaycastInfo * 24 BulletWheelRaycastInfo * 0 0 1573 0 0 0 0 0 0 0 0 0 0

1748 30 BulletWheelRaycastInfo const * 0 8576 30 BulletWheelRaycastInfo const * 30 BulletWheelRaycastInfo const * 0 0 1749 0 0 0 0 0 0 0 0 0 0

1749 28 BulletWheelRaycastInfo const 0 8832 28 BulletWheelRaycastInfo const 28 BulletWheelRaycastInfo const 0 0 1573 0 0 0 0 0 0 0 0 0 0

1750 19 BulletWorld const * 0 8576 19 BulletWorld const * 19 BulletWorld const * 0 0 1751 0 0 0 0 0 0 0 0 0 0

1751 17 BulletWorld const 0 8832 17 BulletWorld const 17 BulletWorld const 0 0 1574 0 0 0 0 0 0 0 0 0 0

1752 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 1753 0 0 0 0 0 0 0 0 0 0

1753 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1754 19 CollideMask const * 0 8576 19 CollideMask const * 19 CollideMask const * 0 0 1755 0 0 0 0 0 0 0 0 0 0

1755 17 CollideMask const 0 8832 17 CollideMask const 17 CollideMask const 0 0 1639 0 0 0 0 0 0 0 0 0 0

1756 26 BulletPersistentManifold * 0 8576 26 BulletPersistentManifold * 26 BulletPersistentManifold * 0 0 1583 0 0 0 0 0 0 0 0 0 0

1757 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1758 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1759 0 0 0 0 0 0 0 0 0 0

1759 14 CallbackObject 0 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 276
/**
 * This is a generic object that can be assigned to a callback at various
 * points in the rendering process.  This is actually a base class for a
 * handful of specialized callback object types.  You can also subclass it
 * yourself to make your own callback handler.
 */

1760 32 BulletPersistentManifold const * 0 8576 32 BulletPersistentManifold const * 32 BulletPersistentManifold const * 0 0 1761 0 0 0 0 0 0 0 0 0 0

1761 30 BulletPersistentManifold const 0 8832 30 BulletPersistentManifold const 30 BulletPersistentManifold const 0 0 1583 0 0 0 0 0 0 0 0 0 0

1762 23 BulletConvexHullShape * 0 8576 23 BulletConvexHullShape * 23 BulletConvexHullShape * 0 0 1584 0 0 0 0 0 0 0 0 0 0

1763 29 BulletConvexHullShape const * 0 8576 29 BulletConvexHullShape const * 29 BulletConvexHullShape const * 0 0 1764 0 0 0 0 0 0 0 0 0 0

1764 27 BulletConvexHullShape const 0 8832 27 BulletConvexHullShape const 27 BulletConvexHullShape const 0 0 1584 0 0 0 0 0 0 0 0 0 0

1765 21 PTA_LVecBase3 const * 0 8576 21 PTA_LVecBase3 const * 21 PTA_LVecBase3 const * 0 0 1766 0 0 0 0 0 0 0 0 0 0

1766 19 PTA_LVecBase3 const 0 8832 19 PTA_LVecBase3 const 19 PTA_LVecBase3 const 0 0 1724 0 0 0 0 0 0 0 0 0 0

1767 35 BulletConvexPointCloudShape const * 0 8576 35 BulletConvexPointCloudShape const * 35 BulletConvexPointCloudShape const * 0 0 1768 0 0 0 0 0 0 0 0 0 0

1768 33 BulletConvexPointCloudShape const 0 8832 33 BulletConvexPointCloudShape const 33 BulletConvexPointCloudShape const 0 0 1585 0 0 0 0 0 0 0 0 0 0

1769 29 BulletConvexPointCloudShape * 0 8576 29 BulletConvexPointCloudShape * 29 BulletConvexPointCloudShape * 0 0 1585 0 0 0 0 0 0 0 0 0 0

1770 27 BulletCylinderShape const * 0 8576 27 BulletCylinderShape const * 27 BulletCylinderShape const * 0 0 1771 0 0 0 0 0 0 0 0 0 0

1771 25 BulletCylinderShape const 0 8832 25 BulletCylinderShape const 25 BulletCylinderShape const 0 0 1586 0 0 0 0 0 0 0 0 0 0

1772 21 BulletCylinderShape * 0 8576 21 BulletCylinderShape * 21 BulletCylinderShape * 0 0 1586 0 0 0 0 0 0 0 0 0 0

1773 26 BulletFilterCallbackData * 0 8576 26 BulletFilterCallbackData * 26 BulletFilterCallbackData * 0 0 1587 0 0 0 0 0 0 0 0 0 0

1774 32 BulletFilterCallbackData const * 0 8576 32 BulletFilterCallbackData const * 32 BulletFilterCallbackData const * 0 0 1775 0 0 0 0 0 0 0 0 0 0

1775 30 BulletFilterCallbackData const 0 8832 30 BulletFilterCallbackData const 30 BulletFilterCallbackData const 0 0 1587 0 0 0 0 0 0 0 0 0 0

1776 34 BulletRotationalLimitMotor const * 0 8576 34 BulletRotationalLimitMotor const * 34 BulletRotationalLimitMotor const * 0 0 1777 0 0 0 0 0 0 0 0 0 0

1777 32 BulletRotationalLimitMotor const 0 8832 32 BulletRotationalLimitMotor const 32 BulletRotationalLimitMotor const 0 0 1588 0 0 0 0 0 0 0 0 0 0

1778 28 BulletRotationalLimitMotor * 0 8576 28 BulletRotationalLimitMotor * 28 BulletRotationalLimitMotor * 0 0 1588 0 0 0 0 0 0 0 0 0 0

1779 37 BulletTranslationalLimitMotor const * 0 8576 37 BulletTranslationalLimitMotor const * 37 BulletTranslationalLimitMotor const * 0 0 1780 0 0 0 0 0 0 0 0 0 0

1780 35 BulletTranslationalLimitMotor const 0 8832 35 BulletTranslationalLimitMotor const 35 BulletTranslationalLimitMotor const 0 0 1589 0 0 0 0 0 0 0 0 0 0

1781 31 BulletTranslationalLimitMotor * 0 8576 31 BulletTranslationalLimitMotor * 31 BulletTranslationalLimitMotor * 0 0 1589 0 0 0 0 0 0 0 0 0 0

1782 25 BulletGenericConstraint * 0 8576 25 BulletGenericConstraint * 25 BulletGenericConstraint * 0 0 1590 0 0 0 0 0 0 0 0 0 0

1783 31 BulletGenericConstraint const * 0 8576 31 BulletGenericConstraint const * 31 BulletGenericConstraint const * 0 0 1784 0 0 0 0 0 0 0 0 0 0

1784 29 BulletGenericConstraint const 0 8832 29 BulletGenericConstraint const 29 BulletGenericConstraint const 0 0 1590 0 0 0 0 0 0 0 0 0 0

1785 30 BulletHeightfieldShape const * 0 8576 30 BulletHeightfieldShape const * 30 BulletHeightfieldShape const * 0 0 1786 0 0 0 0 0 0 0 0 0 0

1786 28 BulletHeightfieldShape const 0 8832 28 BulletHeightfieldShape const 28 BulletHeightfieldShape const 0 0 1591 0 0 0 0 0 0 0 0 0 0

1787 24 BulletHeightfieldShape * 0 8576 24 BulletHeightfieldShape * 24 BulletHeightfieldShape * 0 0 1591 0 0 0 0 0 0 0 0 0 0

1788 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 1789 0 0 0 0 0 0 0 0 0 0

1789 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 1790 0 0 0 0 0 0 0 0 0 0

1790 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 1516
/**
 * The name of this class derives from the fact that we originally implemented
 * it as a layer on top of the "pnm library", based on netpbm, which was built
 * to implement pbm, pgm, and pbm files, and is the underlying support of a
 * number of public-domain image file converters.  Nowadays we are no longer
 * derived directly from the pnm library, mainly to allow support of C++
 * iostreams instead of the C stdio FILE interface.
 *
 * Conceptually, a PNMImage is a two-dimensional array of xels, which are the
 * PNM-defined generic pixel type.  Each xel may have a red, green, and blue
 * component, or (if the image is grayscale) a gray component.  The image may
 * be read in, the individual xels manipulated, and written out again, or a
 * black image may be constructed from scratch.
 *
 * A PNMImage has a color space and a maxval, the combination of which defines
 * how a floating-point linear color value is encoded as an integer value in
 * memory.  The functions ending in _val operate on encoded colors, whereas
 * the regular ones work with linear floating-point values.  All operations
 * are color space correct unless otherwise specified.
 *
 * The image is of size XSize() by YSize() xels, numbered from top to bottom,
 * left to right, beginning at zero.
 *
 * Files can be specified by filename, or by an iostream pointer.  The
 * filename "-" refers to stdin or stdout.
 *
 * This class is not inherently thread-safe; use it from a single thread or
 * protect access using a mutex.
 */

1791 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1792 0 0 0 0 0 0 0 0 0 0

1792 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

1793 14 BulletHelper * 0 8576 14 BulletHelper * 14 BulletHelper * 0 0 1592 0 0 0 0 0 0 0 0 0 0

1794 20 BulletHelper const * 0 8576 20 BulletHelper const * 20 BulletHelper const * 0 0 1795 0 0 0 0 0 0 0 0 0 0

1795 18 BulletHelper const 0 8832 18 BulletHelper const 18 BulletHelper const 0 0 1592 0 0 0 0 0 0 0 0 0 0

1796 18 NodePathCollection 0 2048 18 NodePathCollection 18 NodePathCollection 0 0 0 0 0 0 0 0 0 0 0 0 178
/**
 * This is a set of zero or more NodePaths.  It's handy for returning from
 * functions that need to return multiple NodePaths (for instance,
 * NodePaths::get_children).
 */

1797 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 1798 0 0 0 0 0 0 0 0 0 0

1798 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

1799 20 NodePathCollection * 0 8576 20 NodePathCollection * 20 NodePathCollection * 0 0 1796 0 0 0 0 0 0 0 0 0 0

1800 12 InternalName 0 16779264 12 InternalName 12 InternalName 0 0 0 0 0 0 0 0 0 0 0 0 514
/**
 * Encodes a string name in a hash table, mapping it to a pointer.  This is
 * used to tokenify names so they may be used efficiently in low-level Panda
 * structures, for instance to differentiate the multiple sets of texture
 * coordinates that might be stored on a Geom.
 *
 * InternalNames are hierarchical, with the '.' used by convention as a
 * separator character.  You can construct a single InternalName as a
 * composition of one or more other names, or by giving it a source string
 * directly.
 */

1801 14 InternalName * 0 8576 14 InternalName * 14 InternalName * 0 0 1800 0 0 0 0 0 0 0 0 0 0

1802 22 GeomVertexFormat const 0 8832 22 GeomVertexFormat const 22 GeomVertexFormat const 0 0 1803 0 0 0 0 0 0 0 0 0 0

1803 16 GeomVertexFormat 0 16779264 16 GeomVertexFormat 16 GeomVertexFormat 0 0 0 0 0 0 0 0 0 0 0 0 924
/**
 * This class defines the physical layout of the vertex data stored within a
 * Geom.  The layout consists of a list of named columns, each of which has a
 * numeric type and a size.
 *
 * The columns are typically interleaved within a single array, but they may
 * also be distributed among multiple different arrays; at the extreme, each
 * column may be alone within its own array (which amounts to a parallel-array
 * definition).
 *
 * Thus, a GeomVertexFormat is really a list of GeomVertexArrayFormats, each
 * of which contains a list of columns.  However, a particular column name
 * should not appear more than once in the format, even between different
 * arrays.
 *
 * There are a handful of standard pre-defined GeomVertexFormat objects, or
 * you may define your own as needed.  You may record any combination of
 * standard and/or user-defined columns in your custom GeomVertexFormat
 * constructions.
 */

1804 24 GeomVertexFormat const * 0 8576 24 GeomVertexFormat const * 24 GeomVertexFormat const * 0 0 1802 0 0 0 0 0 0 0 0 0 0

1805 23 BulletHingeConstraint * 0 8576 23 BulletHingeConstraint * 23 BulletHingeConstraint * 0 0 1594 0 0 0 0 0 0 0 0 0 0

1806 29 BulletHingeConstraint const * 0 8576 29 BulletHingeConstraint const * 29 BulletHingeConstraint const * 0 0 1807 0 0 0 0 0 0 0 0 0 0

1807 27 BulletHingeConstraint const 0 8832 27 BulletHingeConstraint const 27 BulletHingeConstraint const 0 0 1594 0 0 0 0 0 0 0 0 0 0

1808 31 BulletMinkowskiSumShape const * 0 8576 31 BulletMinkowskiSumShape const * 31 BulletMinkowskiSumShape const * 0 0 1809 0 0 0 0 0 0 0 0 0 0

1809 29 BulletMinkowskiSumShape const 0 8832 29 BulletMinkowskiSumShape const 29 BulletMinkowskiSumShape const 0 0 1595 0 0 0 0 0 0 0 0 0 0

1810 25 BulletMinkowskiSumShape * 0 8576 25 BulletMinkowskiSumShape * 25 BulletMinkowskiSumShape * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1811 30 BulletMultiSphereShape const * 0 8576 30 BulletMultiSphereShape const * 30 BulletMultiSphereShape const * 0 0 1812 0 0 0 0 0 0 0 0 0 0

1812 28 BulletMultiSphereShape const 0 8832 28 BulletMultiSphereShape const 28 BulletMultiSphereShape const 0 0 1598 0 0 0 0 0 0 0 0 0 0

1813 24 BulletMultiSphereShape * 0 8576 24 BulletMultiSphereShape * 24 BulletMultiSphereShape * 0 0 1598 0 0 0 0 0 0 0 0 0 0

1814 20 PTA_stdfloat const * 0 8576 20 PTA_stdfloat const * 20 PTA_stdfloat const * 0 0 1815 0 0 0 0 0 0 0 0 0 0

1815 18 PTA_stdfloat const 0 8832 18 PTA_stdfloat const 18 PTA_stdfloat const 0 0 1816 0 0 0 0 0 0 0 0 0 0

1816 12 PTA_stdfloat 0 2105344 12 PTA_stdfloat 12 PTA_stdfloat 0 0 1817 0 0 0 0 0 0 0 0 0 0

1817 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1818 0 0 0 0 0 0 0 0 0 0

1818 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1819 24 BulletPlaneShape const * 0 8576 24 BulletPlaneShape const * 24 BulletPlaneShape const * 0 0 1820 0 0 0 0 0 0 0 0 0 0

1820 22 BulletPlaneShape const 0 8832 22 BulletPlaneShape const 22 BulletPlaneShape const 0 0 1599 0 0 0 0 0 0 0 0 0 0

1821 18 BulletPlaneShape * 0 8576 18 BulletPlaneShape * 18 BulletPlaneShape * 0 0 1599 0 0 0 0 0 0 0 0 0 0

1822 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1600 0 0 0 0 0 0 0 0 0 0

1823 22 CollisionPlane const * 0 8576 22 CollisionPlane const * 22 CollisionPlane const * 0 0 1824 0 0 0 0 0 0 0 0 0 0

1824 20 CollisionPlane const 0 8832 20 CollisionPlane const 20 CollisionPlane const 0 0 1825 0 0 0 0 0 0 0 0 0 0

1825 14 CollisionPlane 0 2048 14 CollisionPlane 14 CollisionPlane 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1826 24 BulletSliderConstraint * 0 8576 24 BulletSliderConstraint * 24 BulletSliderConstraint * 0 0 1602 0 0 0 0 0 0 0 0 0 0

1827 30 BulletSliderConstraint const * 0 8576 30 BulletSliderConstraint const * 30 BulletSliderConstraint const * 0 0 1828 0 0 0 0 0 0 0 0 0 0

1828 28 BulletSliderConstraint const 0 8832 28 BulletSliderConstraint const 28 BulletSliderConstraint const 0 0 1602 0 0 0 0 0 0 0 0 0 0

1829 29 BulletSoftBodyControl const * 0 8576 29 BulletSoftBodyControl const * 29 BulletSoftBodyControl const * 0 0 1830 0 0 0 0 0 0 0 0 0 0

1830 27 BulletSoftBodyControl const 0 8832 27 BulletSoftBodyControl const 27 BulletSoftBodyControl const 0 0 1603 0 0 0 0 0 0 0 0 0 0

1831 10 IControl * 0 8576 30 btSoftBody::AJoint::IControl * 30 btSoftBody::AJoint::IControl * 0 0 1604 0 0 0 0 0 0 0 0 0 0

1832 27 BulletSoftBodyShape const * 0 8576 27 BulletSoftBodyShape const * 27 BulletSoftBodyShape const * 0 0 1833 0 0 0 0 0 0 0 0 0 0

1833 25 BulletSoftBodyShape const 0 8832 25 BulletSoftBodyShape const 25 BulletSoftBodyShape const 0 0 1607 0 0 0 0 0 0 0 0 0 0

1834 25 BulletSphereShape const * 0 8576 25 BulletSphereShape const * 25 BulletSphereShape const * 0 0 1835 0 0 0 0 0 0 0 0 0 0

1835 23 BulletSphereShape const 0 8832 23 BulletSphereShape const 23 BulletSphereShape const 0 0 1608 0 0 0 0 0 0 0 0 0 0

1836 19 BulletSphereShape * 0 8576 19 BulletSphereShape * 19 BulletSphereShape * 0 0 1608 0 0 0 0 0 0 0 0 0 0

1837 23 CollisionSphere const * 0 8576 23 CollisionSphere const * 23 CollisionSphere const * 0 0 1838 0 0 0 0 0 0 0 0 0 0

1838 21 CollisionSphere const 0 8832 21 CollisionSphere const 21 CollisionSphere const 0 0 1839 0 0 0 0 0 0 0 0 0 0

1839 15 CollisionSphere 0 2048 15 CollisionSphere 15 CollisionSphere 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * A spherical collision volume or object.
 */

1840 27 BulletSphericalConstraint * 0 8576 27 BulletSphericalConstraint * 27 BulletSphericalConstraint * 0 0 1609 0 0 0 0 0 0 0 0 0 0

1841 33 BulletSphericalConstraint const * 0 8576 33 BulletSphericalConstraint const * 33 BulletSphericalConstraint const * 0 0 1842 0 0 0 0 0 0 0 0 0 0

1842 31 BulletSphericalConstraint const 0 8832 31 BulletSphericalConstraint const 31 BulletSphericalConstraint const 0 0 1609 0 0 0 0 0 0 0 0 0 0

1843 8 btScalar 0 2105344 8 btScalar 8 btScalar 0 0 1844 0 0 0 0 0 0 0 0 0 0

1844 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1845 24 BulletTickCallbackData * 0 8576 24 BulletTickCallbackData * 24 BulletTickCallbackData * 0 0 1610 0 0 0 0 0 0 0 0 0 0

1846 30 BulletTickCallbackData const * 0 8576 30 BulletTickCallbackData const * 30 BulletTickCallbackData const * 0 0 1847 0 0 0 0 0 0 0 0 0 0

1847 28 BulletTickCallbackData const 0 8832 28 BulletTickCallbackData const 28 BulletTickCallbackData const 0 0 1610 0 0 0 0 0 0 0 0 0 0

1848 20 BulletTriangleMesh * 0 8576 20 BulletTriangleMesh * 20 BulletTriangleMesh * 0 0 1611 0 0 0 0 0 0 0 0 0 0

1849 15 PTA_int const * 0 8576 15 PTA_int const * 15 PTA_int const * 0 0 1850 0 0 0 0 0 0 0 0 0 0

1850 13 PTA_int const 0 8832 13 PTA_int const 13 PTA_int const 0 0 1728 0 0 0 0 0 0 0 0 0 0

1851 26 BulletTriangleMesh const * 0 8576 26 BulletTriangleMesh const * 26 BulletTriangleMesh const * 0 0 1852 0 0 0 0 0 0 0 0 0 0

1852 24 BulletTriangleMesh const 0 8832 24 BulletTriangleMesh const 24 BulletTriangleMesh const 0 0 1611 0 0 0 0 0 0 0 0 0 0

1853 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1854 0 0 0 0 0 0 0 0 0 0

1854 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1855 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 1856 0 0 0 0 0 0 0 0 0 0

1856 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1857 25 BulletTriangleMeshShape * 0 8576 25 BulletTriangleMeshShape * 25 BulletTriangleMeshShape * 0 0 1613 0 0 0 0 0 0 0 0 0 0

1858 31 BulletTriangleMeshShape const * 0 8576 31 BulletTriangleMeshShape const * 31 BulletTriangleMeshShape const * 0 0 1859 0 0 0 0 0 0 0 0 0 0

1859 29 BulletTriangleMeshShape const 0 8832 29 BulletTriangleMeshShape const 29 BulletTriangleMeshShape const 0 0 1613 0 0 0 0 0 0 0 0 0 0

0
299
1860 4 node 0 2 1511 760 0 0 0 0 0 0 0 18 BulletRayHit::node 0

1861 7 hit_pos 0 2 1513 761 0 0 0 0 0 0 0 21 BulletRayHit::hit_pos 0

1862 10 hit_normal 0 2 1515 762 0 0 0 0 0 0 0 24 BulletRayHit::hit_normal 0

1863 12 hit_fraction 0 2 1517 763 0 0 0 0 0 0 0 26 BulletRayHit::hit_fraction 0

1864 10 shape_part 0 2 1519 764 0 0 0 0 0 0 0 24 BulletRayHit::shape_part 0

1865 14 triangle_index 0 2 1519 765 0 0 0 0 0 0 0 28 BulletRayHit::triangle_index 0

1866 8 from_pos 0 2 1513 773 0 0 0 0 0 0 0 32 BulletAllHitsRayResult::from_pos 0

1867 6 to_pos 0 2 1513 774 0 0 0 0 0 0 0 30 BulletAllHitsRayResult::to_pos 0

1868 20 closest_hit_fraction 0 2 1517 776 0 0 0 0 0 0 0 44 BulletAllHitsRayResult::closest_hit_fraction 0

1869 4 hits 0 66 1509 778 0 0 0 0 777 0 0 28 BulletAllHitsRayResult::hits 0

1870 10 polyhedral 0 2 1525 780 0 0 0 0 0 0 0 23 BulletShape::polyhedral 0

1871 6 convex 0 2 1525 781 0 0 0 0 0 0 0 19 BulletShape::convex 0

1872 9 convex_2d 0 2 1525 782 0 0 0 0 0 0 0 22 BulletShape::convex_2d 0

1873 7 concave 0 2 1525 783 0 0 0 0 0 0 0 20 BulletShape::concave 0

1874 8 infinite 0 2 1525 784 0 0 0 0 0 0 0 21 BulletShape::infinite 0

1875 10 non_moving 0 2 1525 785 0 0 0 0 0 0 0 23 BulletShape::non_moving 0

1876 9 soft_body 0 2 1525 786 0 0 0 0 0 0 0 22 BulletShape::soft_body 0

1877 6 margin 0 6 1517 789 787 0 0 0 0 0 0 19 BulletShape::margin 0

1878 4 name 0 2 1526 788 0 0 0 0 0 0 0 17 BulletShape::name 0

1879 12 shape_bounds 0 2 1529 790 0 0 0 0 0 0 0 25 BulletShape::shape_bounds 0

1880 6 shapes 0 66 1532 797 0 0 0 0 796 0 0 22 BulletBodyNode::shapes 0

1881 9 shape_pos 0 66 1513 798 0 0 0 0 796 0 0 25 BulletBodyNode::shape_pos 0

1882 9 shape_mat 0 66 1533 799 0 0 0 0 796 0 0 25 BulletBodyNode::shape_mat 0

1883 15 shape_transform 0 66 1535 800 0 0 0 0 796 0 0 31 BulletBodyNode::shape_transform 0

1884 12 shape_bounds 0 2 1529 801 0 0 0 0 0 0 0 28 BulletBodyNode::shape_bounds 0

1885 6 static 0 6 1525 803 805 0 0 0 0 0 0 22 BulletBodyNode::static 23
// Static and kinematic

1886 9 kinematic 0 6 1525 804 806 0 0 0 0 0 0 25 BulletBodyNode::kinematic 0

1887 22 collision_notification 0 6 1525 809 808 0 0 0 0 0 0 38 BulletBodyNode::collision_notification 0

1888 18 collision_response 0 6 1525 811 810 0 0 0 0 0 0 34 BulletBodyNode::collision_response 0

1889 16 contact_response 0 2 1525 813 0 0 0 0 0 0 0 32 BulletBodyNode::contact_response 0

1890 28 contact_processing_threshold 0 6 1517 814 815 0 0 0 0 0 0 44 BulletBodyNode::contact_processing_threshold 0

1891 6 active 0 6 1525 816 818 0 0 0 0 0 0 22 BulletBodyNode::active 15
// Deactivation

1892 17 deactivation_time 0 6 1517 820 819 0 0 0 0 0 0 33 BulletBodyNode::deactivation_time 0

1893 20 deactivation_enabled 0 6 1525 822 821 0 0 0 0 0 0 36 BulletBodyNode::deactivation_enabled 0

1894 13 debug_enabled 0 6 1525 824 823 0 0 0 0 0 0 29 BulletBodyNode::debug_enabled 0

1895 11 restitution 0 6 1517 825 826 0 0 0 0 0 0 27 BulletBodyNode::restitution 27
// Friction and Restitution

1896 8 friction 0 6 1517 827 828 0 0 0 0 0 0 24 BulletBodyNode::friction 0

1897 20 anisotropic_friction 0 6 1536 831 830 0 0 0 0 0 0 36 BulletBodyNode::anisotropic_friction 0

1898 23 ccd_swept_sphere_radius 0 6 1517 832 834 0 0 0 0 0 0 39 BulletBodyNode::ccd_swept_sphere_radius 6
// CCD

1899 20 ccd_motion_threshold 0 6 1517 833 835 0 0 0 0 0 0 36 BulletBodyNode::ccd_motion_threshold 0

1900 24 half_extents_with_margin 0 2 1536 840 0 0 0 0 0 0 0 40 BulletBoxShape::half_extents_with_margin 0

1901 27 half_extents_without_margin 0 2 1536 839 0 0 0 0 0 0 0 43 BulletBoxShape::half_extents_without_margin 0

1902 6 radius 0 2 1517 845 0 0 0 0 0 0 0 26 BulletCapsuleShape::radius 0

1903 6 height 0 2 1517 847 0 0 0 0 0 0 0 26 BulletCapsuleShape::height 0

1904 5 shape 0 2 1532 852 0 0 0 0 0 0 0 36 BulletCharacterControllerNode::shape 0

1905 7 gravity 0 6 1517 854 853 0 0 0 0 0 0 38 BulletCharacterControllerNode::gravity 0

1906 9 max_slope 0 6 1517 859 858 0 0 0 0 0 0 40 BulletCharacterControllerNode::max_slope 0

1907 9 on_ground 0 2 1525 861 0 0 0 0 0 0 0 40 BulletCharacterControllerNode::on_ground 0

1908 8 from_pos 0 2 1513 870 0 0 0 0 0 0 0 35 BulletClosestHitRayResult::from_pos 0

1909 6 to_pos 0 2 1513 871 0 0 0 0 0 0 0 33 BulletClosestHitRayResult::to_pos 0

1910 4 node 0 2 1511 873 0 0 0 0 0 0 0 31 BulletClosestHitRayResult::node 0

1911 7 hit_pos 0 2 1513 874 0 0 0 0 0 0 0 34 BulletClosestHitRayResult::hit_pos 0

1912 10 hit_normal 0 2 1515 875 0 0 0 0 0 0 0 37 BulletClosestHitRayResult::hit_normal 0

1913 12 hit_fraction 0 2 1517 876 0 0 0 0 0 0 0 39 BulletClosestHitRayResult::hit_fraction 0

1914 10 shape_part 0 2 1519 877 0 0 0 0 0 0 0 37 BulletClosestHitRayResult::shape_part 0

1915 14 triangle_index 0 2 1519 878 0 0 0 0 0 0 0 41 BulletClosestHitRayResult::triangle_index 0

1916 8 from_pos 0 2 1513 886 0 0 0 0 0 0 0 37 BulletClosestHitSweepResult::from_pos 0

1917 6 to_pos 0 2 1513 887 0 0 0 0 0 0 0 35 BulletClosestHitSweepResult::to_pos 0

1918 4 node 0 2 1511 889 0 0 0 0 0 0 0 33 BulletClosestHitSweepResult::node 0

1919 7 hit_pos 0 2 1513 890 0 0 0 0 0 0 0 36 BulletClosestHitSweepResult::hit_pos 0

1920 10 hit_normal 0 2 1515 891 0 0 0 0 0 0 0 39 BulletClosestHitSweepResult::hit_normal 0

1921 12 hit_fraction 0 2 1517 892 0 0 0 0 0 0 0 41 BulletClosestHitSweepResult::hit_fraction 0

1922 6 radius 0 2 1517 896 0 0 0 0 0 0 0 23 BulletConeShape::radius 0

1923 6 height 0 2 1517 897 0 0 0 0 0 0 0 23 BulletConeShape::height 0

1924 12 rigid_body_a 0 2 1549 899 0 0 0 0 0 0 0 30 BulletConstraint::rigid_body_a 0

1925 4 mass 0 6 1517 913 912 0 0 0 0 0 0 25 BulletRigidBodyNode::mass 0

1926 8 inv_mass 0 2 1517 914 0 0 0 0 0 0 0 29 BulletRigidBodyNode::inv_mass 0

1927 7 inertia 0 6 1515 916 915 0 0 0 0 0 0 28 BulletRigidBodyNode::inertia 0

1928 22 inv_inertia_diag_local 0 2 1515 917 0 0 0 0 0 0 0 43 BulletRigidBodyNode::inv_inertia_diag_local 0

1929 24 inv_inertia_tensor_world 0 2 1551 918 0 0 0 0 0 0 0 45 BulletRigidBodyNode::inv_inertia_tensor_world 0

1930 15 linear_velocity 0 6 1515 919 921 0 0 0 0 0 0 36 BulletRigidBodyNode::linear_velocity 11
// Velocity

1931 16 angular_velocity 0 6 1515 920 922 0 0 0 0 0 0 37 BulletRigidBodyNode::angular_velocity 0

1932 14 linear_damping 0 6 1517 923 925 0 0 0 0 0 0 35 BulletRigidBodyNode::linear_damping 10
// Damping

1933 15 angular_damping 0 6 1517 924 926 0 0 0 0 0 0 36 BulletRigidBodyNode::angular_damping 0

1934 11 total_force 0 2 1515 934 0 0 0 0 0 0 0 32 BulletRigidBodyNode::total_force 0

1935 12 total_torque 0 2 1515 935 0 0 0 0 0 0 0 33 BulletRigidBodyNode::total_torque 0

1936 22 linear_sleep_threshold 0 6 1517 936 938 0 0 0 0 0 0 43 BulletRigidBodyNode::linear_sleep_threshold 26
// Deactivation thresholds

1937 23 angular_sleep_threshold 0 6 1517 937 939 0 0 0 0 0 0 44 BulletRigidBodyNode::angular_sleep_threshold 0

1938 7 gravity 0 6 1515 941 940 0 0 0 0 0 0 28 BulletRigidBodyNode::gravity 0

1939 13 linear_factor 0 6 1515 942 944 0 0 0 0 0 0 34 BulletRigidBodyNode::linear_factor 20
// Restrict movement

1940 14 angular_factor 0 6 1515 943 945 0 0 0 0 0 0 35 BulletRigidBodyNode::angular_factor 0

1941 12 rigid_body_b 0 2 1549 900 0 0 0 0 0 0 0 30 BulletConstraint::rigid_body_b 0

1942 15 debug_draw_size 0 6 1517 903 902 0 0 0 0 0 0 33 BulletConstraint::debug_draw_size 0

1943 15 applied_impulse 0 2 1517 904 0 0 0 0 0 0 0 33 BulletConstraint::applied_impulse 0

1944 18 breaking_threshold 0 6 1517 906 905 0 0 0 0 0 0 36 BulletConstraint::breaking_threshold 0

1945 7 enabled 0 6 1525 908 907 0 0 0 0 0 0 25 BulletConstraint::enabled 0

1946 13 fix_threshold 0 6 1517 952 953 0 0 0 0 0 0 40 BulletConeTwistConstraint::fix_threshold 0

1947 7 frame_a 0 2 1535 960 0 0 0 0 0 0 0 34 BulletConeTwistConstraint::frame_a 0

1948 7 frame_b 0 2 1535 961 0 0 0 0 0 0 0 34 BulletConeTwistConstraint::frame_b 0

1949 9 life_time 0 2 1519 964 0 0 0 0 0 0 0 30 BulletManifoldPoint::life_time 0

1950 8 distance 0 2 1517 965 0 0 0 0 0 0 0 29 BulletManifoldPoint::distance 0

1951 15 applied_impulse 0 6 1517 966 983 0 0 0 0 0 0 36 BulletManifoldPoint::applied_impulse 0

1952 19 position_world_on_a 0 2 1513 967 0 0 0 0 0 0 0 40 BulletManifoldPoint::position_world_on_a 0

1953 19 position_world_on_b 0 2 1513 968 0 0 0 0 0 0 0 40 BulletManifoldPoint::position_world_on_b 0

1954 17 normal_world_on_b 0 2 1515 969 0 0 0 0 0 0 0 38 BulletManifoldPoint::normal_world_on_b 0

1955 13 local_point_a 0 2 1513 970 0 0 0 0 0 0 0 34 BulletManifoldPoint::local_point_a 0

1956 13 local_point_b 0 2 1513 971 0 0 0 0 0 0 0 34 BulletManifoldPoint::local_point_b 0

1957 8 part_id0 0 2 1519 972 0 0 0 0 0 0 0 29 BulletManifoldPoint::part_id0 0

1958 8 part_id1 0 2 1519 973 0 0 0 0 0 0 0 29 BulletManifoldPoint::part_id1 0

1959 6 index0 0 2 1519 974 0 0 0 0 0 0 0 27 BulletManifoldPoint::index0 0

1960 6 index1 0 2 1519 975 0 0 0 0 0 0 0 27 BulletManifoldPoint::index1 0

1961 28 lateral_friction_initialized 0 6 1525 988 976 0 0 0 0 0 0 49 BulletManifoldPoint::lateral_friction_initialized 0

1962 21 lateral_friction_dir1 0 6 1515 989 977 0 0 0 0 0 0 42 BulletManifoldPoint::lateral_friction_dir1 0

1963 21 lateral_friction_dir2 0 6 1515 990 978 0 0 0 0 0 0 42 BulletManifoldPoint::lateral_friction_dir2 0

1964 15 contact_motion1 0 6 1517 991 979 0 0 0 0 0 0 36 BulletManifoldPoint::contact_motion1 0

1965 15 contact_motion2 0 6 1517 992 980 0 0 0 0 0 0 36 BulletManifoldPoint::contact_motion2 0

1966 17 combined_friction 0 6 1517 993 981 0 0 0 0 0 0 38 BulletManifoldPoint::combined_friction 0

1967 20 combined_restitution 0 6 1517 994 982 0 0 0 0 0 0 41 BulletManifoldPoint::combined_restitution 0

1968 24 applied_impulse_lateral1 0 6 1517 995 984 0 0 0 0 0 0 45 BulletManifoldPoint::applied_impulse_lateral1 0

1969 24 applied_impulse_lateral2 0 6 1517 996 985 0 0 0 0 0 0 45 BulletManifoldPoint::applied_impulse_lateral2 0

1970 12 contact_cfm1 0 6 1517 997 986 0 0 0 0 0 0 33 BulletManifoldPoint::contact_cfm1 0

1971 12 contact_cfm2 0 6 1517 998 987 0 0 0 0 0 0 33 BulletManifoldPoint::contact_cfm2 0

1972 8 manifold 0 2 1554 1000 0 0 0 0 0 0 0 35 BulletContactCallbackData::manifold 0

1973 5 node0 0 2 1511 1001 0 0 0 0 0 0 0 32 BulletContactCallbackData::node0 0

1974 5 node1 0 2 1511 1002 0 0 0 0 0 0 0 32 BulletContactCallbackData::node1 0

1975 8 part_id0 0 2 1519 1003 0 0 0 0 0 0 0 35 BulletContactCallbackData::part_id0 0

1976 8 part_id1 0 2 1519 1004 0 0 0 0 0 0 0 35 BulletContactCallbackData::part_id1 0

1977 6 index0 0 2 1519 1005 0 0 0 0 0 0 0 33 BulletContactCallbackData::index0 0

1978 6 index1 0 2 1519 1006 0 0 0 0 0 0 0 33 BulletContactCallbackData::index1 0

1979 14 manifold_point 0 2 1554 1008 0 0 0 0 0 0 0 29 BulletContact::manifold_point 0

1980 5 node0 0 2 1511 1009 0 0 0 0 0 0 0 20 BulletContact::node0 0

1981 5 node1 0 2 1511 1010 0 0 0 0 0 0 0 20 BulletContact::node1 0

1982 4 idx0 0 2 1519 1011 0 0 0 0 0 0 0 19 BulletContact::idx0 0

1983 4 idx1 0 2 1519 1012 0 0 0 0 0 0 0 19 BulletContact::idx1 0

1984 8 part_id0 0 2 1519 1013 0 0 0 0 0 0 0 23 BulletContact::part_id0 0

1985 8 part_id1 0 2 1519 1014 0 0 0 0 0 0 0 23 BulletContact::part_id1 0

1986 8 contacts 0 66 1557 1019 0 0 0 0 1018 0 0 29 BulletContactResult::contacts 0

1987 9 wireframe 0 6 1525 1027 1023 0 0 0 0 0 0 26 BulletDebugNode::wireframe 0

1988 11 constraints 0 6 1525 1028 1024 0 0 0 0 0 0 28 BulletDebugNode::constraints 0

1989 14 bounding_boxes 0 6 1525 1029 1025 0 0 0 0 0 0 31 BulletDebugNode::bounding_boxes 0

1990 7 normals 0 6 1525 1030 1026 0 0 0 0 0 0 24 BulletDebugNode::normals 0

1991 17 overlapping_nodes 0 66 1511 1034 0 0 0 0 1033 0 0 34 BulletGhostNode::overlapping_nodes 0

1992 3 pos 0 2 1513 1038 0 0 0 0 0 0 0 30 BulletSoftBodyNodeElement::pos 0

1993 8 velocity 0 2 1515 1039 0 0 0 0 0 0 0 35 BulletSoftBodyNodeElement::velocity 0

1994 6 normal 0 2 1515 1040 0 0 0 0 0 0 0 33 BulletSoftBodyNodeElement::normal 0

1995 8 inv_mass 0 2 1517 1041 0 0 0 0 0 0 0 35 BulletSoftBodyNodeElement::inv_mass 0

1996 4 area 0 2 1517 1042 0 0 0 0 0 0 0 31 BulletSoftBodyNodeElement::area 0

1997 8 attached 0 2 1519 1043 0 0 0 0 0 0 0 35 BulletSoftBodyNodeElement::attached 0

1998 3 cfg 0 2 1564 1045 0 0 0 0 0 0 0 23 BulletSoftBodyNode::cfg 0

1999 10 aero_model 0 6 1566 1094 1093 0 0 0 0 0 0 32 BulletSoftBodyConfig::aero_model 0

2000 28 velocities_correction_factor 0 6 1517 1119 1095 0 0 0 0 0 0 50 BulletSoftBodyConfig::velocities_correction_factor 0

2001 19 damping_coefficient 0 6 1517 1120 1096 0 0 0 0 0 0 41 BulletSoftBodyConfig::damping_coefficient 0

2002 16 drag_coefficient 0 6 1517 1121 1097 0 0 0 0 0 0 38 BulletSoftBodyConfig::drag_coefficient 0

2003 16 lift_coefficient 0 6 1517 1122 1098 0 0 0 0 0 0 38 BulletSoftBodyConfig::lift_coefficient 0

2004 20 pressure_coefficient 0 6 1517 1123 1099 0 0 0 0 0 0 42 BulletSoftBodyConfig::pressure_coefficient 0

2005 31 volume_conservation_coefficient 0 6 1517 1124 1100 0 0 0 0 0 0 53 BulletSoftBodyConfig::volume_conservation_coefficient 0

2006 28 dynamic_friction_coefficient 0 6 1517 1125 1101 0 0 0 0 0 0 50 BulletSoftBodyConfig::dynamic_friction_coefficient 0

2007 25 pose_matching_coefficient 0 6 1517 1126 1102 0 0 0 0 0 0 47 BulletSoftBodyConfig::pose_matching_coefficient 0

2008 23 rigid_contacts_hardness 0 6 1517 1127 1103 0 0 0 0 0 0 45 BulletSoftBodyConfig::rigid_contacts_hardness 0

2009 25 kinetic_contacts_hardness 0 6 1517 1128 1104 0 0 0 0 0 0 47 BulletSoftBodyConfig::kinetic_contacts_hardness 0

2010 22 soft_contacts_hardness 0 6 1517 1129 1105 0 0 0 0 0 0 44 BulletSoftBodyConfig::soft_contacts_hardness 0

2011 16 anchors_hardness 0 6 1517 1130 1106 0 0 0 0 0 0 38 BulletSoftBodyConfig::anchors_hardness 0

2012 22 soft_vs_rigid_hardness 0 6 1517 1131 1107 0 0 0 0 0 0 44 BulletSoftBodyConfig::soft_vs_rigid_hardness 0

2013 24 soft_vs_kinetic_hardness 0 6 1517 1132 1108 0 0 0 0 0 0 46 BulletSoftBodyConfig::soft_vs_kinetic_hardness 0

2014 21 soft_vs_soft_hardness 0 6 1517 1133 1109 0 0 0 0 0 0 43 BulletSoftBodyConfig::soft_vs_soft_hardness 0

2015 27 soft_vs_rigid_impulse_split 0 6 1517 1134 1110 0 0 0 0 0 0 49 BulletSoftBodyConfig::soft_vs_rigid_impulse_split 0

2016 29 soft_vs_kinetic_impulse_split 0 6 1517 1135 1111 0 0 0 0 0 0 51 BulletSoftBodyConfig::soft_vs_kinetic_impulse_split 0

2017 26 soft_vs_soft_impulse_split 0 6 1517 1136 1112 0 0 0 0 0 0 48 BulletSoftBodyConfig::soft_vs_soft_impulse_split 0

2018 9 maxvolume 0 6 1517 1137 1113 0 0 0 0 0 0 31 BulletSoftBodyConfig::maxvolume 0

2019 9 timescale 0 6 1517 1138 1114 0 0 0 0 0 0 31 BulletSoftBodyConfig::timescale 0

2020 27 positions_solver_iterations 0 6 1519 1139 1115 0 0 0 0 0 0 49 BulletSoftBodyConfig::positions_solver_iterations 0

2021 28 velocities_solver_iterations 0 6 1519 1140 1116 0 0 0 0 0 0 50 BulletSoftBodyConfig::velocities_solver_iterations 0

2022 23 drift_solver_iterations 0 6 1519 1141 1117 0 0 0 0 0 0 45 BulletSoftBodyConfig::drift_solver_iterations 0

2023 25 cluster_solver_iterations 0 6 1519 1142 1118 0 0 0 0 0 0 47 BulletSoftBodyConfig::cluster_solver_iterations 0

2024 10 world_info 0 2 1567 1046 0 0 0 0 0 0 0 30 BulletSoftBodyNode::world_info 0

2025 11 air_density 0 6 1517 1150 1145 0 0 0 0 0 0 36 BulletSoftBodyWorldInfo::air_density 0

2026 13 water_density 0 6 1517 1151 1146 0 0 0 0 0 0 38 BulletSoftBodyWorldInfo::water_density 0

2027 12 water_offset 0 6 1517 1152 1147 0 0 0 0 0 0 37 BulletSoftBodyWorldInfo::water_offset 0

2028 12 water_normal 0 6 1515 1153 1148 0 0 0 0 0 0 37 BulletSoftBodyWorldInfo::water_normal 0

2029 7 gravity 0 6 1515 1154 1149 0 0 0 0 0 0 32 BulletSoftBodyWorldInfo::gravity 0

2030 13 wind_velocity 0 6 1515 1061 1060 0 0 0 0 0 0 33 BulletSoftBodyNode::wind_velocity 0

2031 4 aabb 0 2 1568 1063 0 0 0 0 0 0 0 24 BulletSoftBodyNode::aabb 0

2032 12 num_clusters 0 2 1519 1067 0 0 0 0 0 0 0 32 BulletSoftBodyNode::num_clusters 0

2033 9 materials 0 66 1569 1079 0 0 0 0 1078 0 0 29 BulletSoftBodyNode::materials 0

2034 16 linear_stiffness 0 6 1517 1159 1160 0 0 0 0 0 0 40 BulletSoftBodyMaterial::linear_stiffness 0

2035 17 angular_stiffness 0 6 1517 1161 1162 0 0 0 0 0 0 41 BulletSoftBodyMaterial::angular_stiffness 0

2036 19 volume_preservation 0 6 1517 1163 1164 0 0 0 0 0 0 43 BulletSoftBodyMaterial::volume_preservation 0

2037 5 nodes 0 66 1562 1082 0 0 0 0 1081 0 0 25 BulletSoftBodyNode::nodes 0

2038 20 suspension_stiffness 0 6 1517 1173 1167 0 0 0 0 0 0 41 BulletVehicleTuning::suspension_stiffness 0

2039 22 suspension_compression 0 6 1517 1174 1168 0 0 0 0 0 0 43 BulletVehicleTuning::suspension_compression 0

2040 18 suspension_damping 0 6 1517 1175 1169 0 0 0 0 0 0 39 BulletVehicleTuning::suspension_damping 0

2041 24 max_suspension_travel_cm 0 6 1517 1176 1170 0 0 0 0 0 0 45 BulletVehicleTuning::max_suspension_travel_cm 0

2042 13 friction_slip 0 6 1517 1177 1171 0 0 0 0 0 0 34 BulletVehicleTuning::friction_slip 0

2043 20 max_suspension_force 0 6 1517 1178 1172 0 0 0 0 0 0 41 BulletVehicleTuning::max_suspension_force 0

2044 7 chassis 0 2 1549 1184 0 0 0 0 0 0 0 22 BulletVehicle::chassis 0

2045 21 current_speed_km_hour 0 2 1517 1185 0 0 0 0 0 0 0 36 BulletVehicle::current_speed_km_hour 0

2046 14 forward_vector 0 2 1515 1187 0 0 0 0 0 0 0 29 BulletVehicle::forward_vector 0

2047 6 wheels 0 66 1572 1192 0 0 0 0 1191 0 0 21 BulletVehicle::wheels 0

2048 12 raycast_info 0 2 1573 1242 0 0 0 0 0 0 0 25 BulletWheel::raycast_info 0

2049 10 in_contact 0 2 1525 1244 0 0 0 0 0 0 0 34 BulletWheelRaycastInfo::in_contact 0

2050 17 suspension_length 0 2 1517 1245 0 0 0 0 0 0 0 41 BulletWheelRaycastInfo::suspension_length 0

2051 17 contact_normal_ws 0 2 1515 1246 0 0 0 0 0 0 0 41 BulletWheelRaycastInfo::contact_normal_ws 0

2052 18 wheel_direction_ws 0 2 1515 1247 0 0 0 0 0 0 0 42 BulletWheelRaycastInfo::wheel_direction_ws 0

2053 13 wheel_axle_ws 0 2 1515 1248 0 0 0 0 0 0 0 37 BulletWheelRaycastInfo::wheel_axle_ws 0

2054 16 contact_point_ws 0 2 1513 1249 0 0 0 0 0 0 0 40 BulletWheelRaycastInfo::contact_point_ws 0

2055 13 hard_point_ws 0 2 1513 1250 0 0 0 0 0 0 0 37 BulletWheelRaycastInfo::hard_point_ws 0

2056 13 ground_object 0 2 1511 1251 0 0 0 0 0 0 0 37 BulletWheelRaycastInfo::ground_object 0

2057 22 suspension_rest_length 0 2 1517 1218 0 0 0 0 0 0 0 35 BulletWheel::suspension_rest_length 0

2058 20 suspension_stiffness 0 6 1517 1219 1195 0 0 0 0 0 0 33 BulletWheel::suspension_stiffness 0

2059 24 max_suspension_travel_cm 0 6 1517 1220 1196 0 0 0 0 0 0 37 BulletWheel::max_suspension_travel_cm 0

2060 13 friction_slip 0 6 1517 1221 1197 0 0 0 0 0 0 26 BulletWheel::friction_slip 0

2061 20 max_suspension_force 0 6 1517 1222 1198 0 0 0 0 0 0 33 BulletWheel::max_suspension_force 0

2062 26 wheels_damping_compression 0 6 1517 1223 1199 0 0 0 0 0 0 39 BulletWheel::wheels_damping_compression 0

2063 25 wheels_damping_relaxation 0 6 1517 1224 1200 0 0 0 0 0 0 38 BulletWheel::wheels_damping_relaxation 0

2064 14 roll_influence 0 6 1517 1225 1201 0 0 0 0 0 0 27 BulletWheel::roll_influence 0

2065 12 wheel_radius 0 6 1517 1226 1202 0 0 0 0 0 0 25 BulletWheel::wheel_radius 0

2066 8 steering 0 6 1517 1227 1203 0 0 0 0 0 0 21 BulletWheel::steering 0

2067 8 rotation 0 6 1517 1228 1204 0 0 0 0 0 0 21 BulletWheel::rotation 0

2068 14 delta_rotation 0 6 1517 1229 1205 0 0 0 0 0 0 27 BulletWheel::delta_rotation 0

2069 12 engine_force 0 6 1517 1230 1206 0 0 0 0 0 0 25 BulletWheel::engine_force 0

2070 5 brake 0 6 1517 1231 1207 0 0 0 0 0 0 18 BulletWheel::brake 0

2071 9 skid_info 0 6 1517 1232 1208 0 0 0 0 0 0 22 BulletWheel::skid_info 0

2072 23 wheels_suspension_force 0 6 1517 1233 1209 0 0 0 0 0 0 36 BulletWheel::wheels_suspension_force 0

2073 28 suspension_relative_velocity 0 6 1517 1234 1210 0 0 0 0 0 0 41 BulletWheel::suspension_relative_velocity 0

2074 31 clipped_inv_connection_point_cs 0 6 1517 1235 1211 0 0 0 0 0 0 44 BulletWheel::clipped_inv_connection_point_cs 0

2075 27 chassis_connection_point_cs 0 6 1513 1236 1212 0 0 0 0 0 0 40 BulletWheel::chassis_connection_point_cs 0

2076 18 wheel_direction_cs 0 6 1515 1237 1213 0 0 0 0 0 0 31 BulletWheel::wheel_direction_cs 0

2077 13 wheel_axle_cs 0 6 1515 1238 1214 0 0 0 0 0 0 26 BulletWheel::wheel_axle_cs 0

2078 15 world_transform 0 6 1533 1239 1215 0 0 0 0 0 0 28 BulletWheel::world_transform 0

2079 11 front_wheel 0 6 1525 1240 1216 0 0 0 0 0 0 24 BulletWheel::front_wheel 0

2080 4 node 0 6 1511 1241 1217 0 0 0 0 0 0 17 BulletWheel::node 0

2081 6 tuning 0 2 1570 1193 0 0 0 0 0 0 0 21 BulletVehicle::tuning 9
// Tuning

2082 7 gravity 0 6 1515 1257 1256 0 0 0 0 0 0 20 BulletWorld::gravity 0

2083 10 world_info 0 2 1567 1259 0 0 0 0 0 0 0 23 BulletWorld::world_info 0

2084 10 debug_node 0 30 1577 1262 1260 1263 1261 0 0 0 0 23 BulletWorld::debug_node 0

2085 6 ghosts 0 66 1578 1268 0 0 0 0 1267 0 0 19 BulletWorld::ghosts 0

2086 12 rigid_bodies 0 66 1549 1270 0 0 0 0 1269 0 0 25 BulletWorld::rigid_bodies 0

2087 11 soft_bodies 0 66 1579 1272 0 0 0 0 1271 0 0 24 BulletWorld::soft_bodies 0

2088 10 characters 0 66 1580 1274 0 0 0 0 1273 0 0 23 BulletWorld::characters 0

2089 8 vehicles 0 66 1581 1276 0 0 0 0 1275 0 0 21 BulletWorld::vehicles 0

2090 11 constraints 0 66 1582 1278 0 0 0 0 1277 0 0 24 BulletWorld::constraints 0

2091 9 manifolds 0 66 1583 1286 0 0 0 0 1285 0 0 22 BulletWorld::manifolds 0

2092 5 node0 0 2 1511 1298 0 0 0 0 0 0 0 31 BulletPersistentManifold::node0 0

2093 5 node1 0 2 1511 1299 0 0 0 0 0 0 0 31 BulletPersistentManifold::node1 0

2094 15 manifold_points 0 66 1554 1301 0 0 0 0 1300 0 0 41 BulletPersistentManifold::manifold_points 0

2095 26 contact_breaking_threshold 0 2 1517 1302 0 0 0 0 0 0 0 52 BulletPersistentManifold::contact_breaking_threshold 0

2096 28 contact_processing_threshold 0 2 1517 1303 0 0 0 0 0 0 0 54 BulletPersistentManifold::contact_processing_threshold 0

2097 22 force_update_all_aabbs 0 6 1525 1290 1289 0 0 0 0 0 0 35 BulletWorld::force_update_all_aabbs 0

2098 10 num_points 0 2 1519 1324 0 0 0 0 0 0 0 39 BulletConvexPointCloudShape::num_points 0

2099 6 radius 0 2 1517 1327 0 0 0 0 0 0 0 27 BulletCylinderShape::radius 0

2100 27 half_extents_without_margin 0 2 1536 1328 0 0 0 0 0 0 0 48 BulletCylinderShape::half_extents_without_margin 0

2101 24 half_extents_with_margin 0 2 1536 1329 0 0 0 0 0 0 0 45 BulletCylinderShape::half_extents_with_margin 0

2102 6 node_0 0 2 1511 1332 0 0 0 0 0 0 0 32 BulletFilterCallbackData::node_0 0

2103 6 node_1 0 2 1511 1333 0 0 0 0 0 0 0 32 BulletFilterCallbackData::node_1 0

2104 7 collide 0 6 1525 1335 1334 0 0 0 0 0 0 33 BulletFilterCallbackData::collide 0

2105 7 limited 0 2 1525 1352 0 0 0 0 0 0 0 35 BulletRotationalLimitMotor::limited 0

2106 13 motor_enabled 0 6 1525 1353 1340 0 0 0 0 0 0 41 BulletRotationalLimitMotor::motor_enabled 0

2107 13 current_limit 0 2 1519 1354 0 0 0 0 0 0 0 41 BulletRotationalLimitMotor::current_limit 0

2108 13 current_error 0 2 1517 1355 0 0 0 0 0 0 0 41 BulletRotationalLimitMotor::current_error 0

2109 16 current_position 0 2 1517 1356 0 0 0 0 0 0 0 44 BulletRotationalLimitMotor::current_position 0

2110 19 accumulated_impulse 0 2 1517 1357 0 0 0 0 0 0 0 47 BulletRotationalLimitMotor::accumulated_impulse 0

2111 13 current_error 0 2 1515 1374 0 0 0 0 0 0 0 44 BulletTranslationalLimitMotor::current_error 0

2112 12 current_diff 0 2 1513 1375 0 0 0 0 0 0 0 43 BulletTranslationalLimitMotor::current_diff 0

2113 19 accumulated_impulse 0 2 1515 1376 0 0 0 0 0 0 0 50 BulletTranslationalLimitMotor::accumulated_impulse 0

2114 25 translational_limit_motor 0 2 1589 1384 0 0 0 0 0 0 0 50 BulletGenericConstraint::translational_limit_motor 0

2115 7 frame_a 0 2 1535 1386 0 0 0 0 0 0 0 32 BulletGenericConstraint::frame_a 0

2116 7 frame_b 0 2 1535 1387 0 0 0 0 0 0 0 32 BulletGenericConstraint::frame_b 0

2117 8 sb_index 0 2 1593 1393 0 0 0 0 0 0 0 22 BulletHelper::sb_index 17
// Internal names

2118 7 sb_flip 0 2 1593 1394 0 0 0 0 0 0 0 21 BulletHelper::sb_flip 0

2119 11 hinge_angle 0 2 1517 1403 0 0 0 0 0 0 0 34 BulletHingeConstraint::hinge_angle 0

2120 11 lower_limit 0 2 1517 1404 0 0 0 0 0 0 0 34 BulletHingeConstraint::lower_limit 0

2121 11 upper_limit 0 2 1517 1405 0 0 0 0 0 0 0 34 BulletHingeConstraint::upper_limit 0

2122 12 angular_only 0 6 1525 1406 1407 0 0 0 0 0 0 35 BulletHingeConstraint::angular_only 0

2123 7 frame_a 0 2 1535 1415 0 0 0 0 0 0 0 30 BulletHingeConstraint::frame_a 0

2124 7 frame_b 0 2 1535 1416 0 0 0 0 0 0 0 30 BulletHingeConstraint::frame_b 0

2125 11 transform_a 0 6 1535 1421 1419 0 0 0 0 0 0 36 BulletMinkowskiSumShape::transform_a 0

2126 11 transform_b 0 6 1535 1422 1420 0 0 0 0 0 0 36 BulletMinkowskiSumShape::transform_b 0

2127 7 shape_a 0 2 1596 1423 0 0 0 0 0 0 0 32 BulletMinkowskiSumShape::shape_a 0

2128 7 shape_b 0 2 1596 1424 0 0 0 0 0 0 0 32 BulletMinkowskiSumShape::shape_b 0

2129 12 sphere_count 0 2 1519 1428 0 0 0 0 0 0 0 36 BulletMultiSphereShape::sphere_count 0

2130 10 sphere_pos 0 66 1513 1429 0 0 0 0 1428 0 0 34 BulletMultiSphereShape::sphere_pos 0

2131 13 sphere_radius 0 66 1517 1430 0 0 0 0 1428 0 0 37 BulletMultiSphereShape::sphere_radius 0

2132 5 plane 0 2 1600 1433 0 0 0 0 0 0 0 23 BulletPlaneShape::plane 0

2133 12 plane_normal 0 2 1515 1434 0 0 0 0 0 0 0 30 BulletPlaneShape::plane_normal 0

2134 14 plane_constant 0 2 1517 1435 0 0 0 0 0 0 0 32 BulletPlaneShape::plane_constant 0

2135 10 linear_pos 0 2 1517 1439 0 0 0 0 0 0 0 34 BulletSliderConstraint::linear_pos 0

2136 11 angular_pos 0 2 1517 1440 0 0 0 0 0 0 0 35 BulletSliderConstraint::angular_pos 0

2137 18 lower_linear_limit 0 6 1517 1441 1445 0 0 0 0 0 0 42 BulletSliderConstraint::lower_linear_limit 9
// Limits

2138 18 upper_linear_limit 0 6 1517 1442 1446 0 0 0 0 0 0 42 BulletSliderConstraint::upper_linear_limit 0

2139 19 lower_angular_limit 0 6 1517 1443 1447 0 0 0 0 0 0 43 BulletSliderConstraint::lower_angular_limit 0

2140 19 upper_angular_limit 0 6 1517 1444 1448 0 0 0 0 0 0 43 BulletSliderConstraint::upper_angular_limit 0

2141 20 powered_linear_motor 0 6 1525 1452 1449 0 0 0 0 0 0 44 BulletSliderConstraint::powered_linear_motor 0

2142 28 target_linear_motor_velocity 0 6 1517 1453 1450 0 0 0 0 0 0 52 BulletSliderConstraint::target_linear_motor_velocity 0

2143 22 max_linear_motor_force 0 6 1517 1454 1451 0 0 0 0 0 0 46 BulletSliderConstraint::max_linear_motor_force 0

2144 21 powered_angular_motor 0 6 1525 1458 1455 0 0 0 0 0 0 45 BulletSliderConstraint::powered_angular_motor 0

2145 29 target_angular_motor_velocity 0 6 1517 1459 1456 0 0 0 0 0 0 53 BulletSliderConstraint::target_angular_motor_velocity 0

2146 23 max_angular_motor_force 0 6 1517 1460 1457 0 0 0 0 0 0 47 BulletSliderConstraint::max_angular_motor_force 0

2147 7 frame_a 0 2 1535 1462 0 0 0 0 0 0 0 31 BulletSliderConstraint::frame_a 0

2148 7 frame_b 0 2 1535 1463 0 0 0 0 0 0 0 31 BulletSliderConstraint::frame_b 0

2149 4 body 0 2 1579 1473 0 0 0 0 0 0 0 25 BulletSoftBodyShape::body 0

2150 6 radius 0 2 1517 1476 0 0 0 0 0 0 0 25 BulletSphereShape::radius 0

2151 7 pivot_a 0 6 1513 1482 1480 0 0 0 0 0 0 34 BulletSphericalConstraint::pivot_a 0

2152 7 pivot_b 0 6 1513 1483 1481 0 0 0 0 0 0 34 BulletSphericalConstraint::pivot_b 0

2153 8 timestep 0 2 1517 1486 0 0 0 0 0 0 0 32 BulletTickCallbackData::timestep 0

2154 16 welding_distance 0 6 1517 1496 1493 0 0 0 0 0 0 36 BulletTriangleMesh::welding_distance 0

2155 8 vertices 0 66 1513 1500 0 0 0 0 1499 0 0 28 BulletTriangleMesh::vertices 0

2156 9 triangles 0 66 1612 1501 0 0 0 0 1495 0 0 29 BulletTriangleMesh::triangles 0

2157 6 static 0 2 1525 1505 0 0 0 0 0 0 0 31 BulletTriangleMeshShape::static 0

2158 7 dynamic 0 2 1525 1506 0 0 0 0 0 0 0 32 BulletTriangleMeshShape::dynamic 0

15
2159 8 get_hits 0 777 778 32 BulletAllHitsRayResult::get_hits 0

2160 10 get_shapes 0 796 797 26 BulletBodyNode::get_shapes 0

2161 12 get_contacts 0 1018 1019 33 BulletContactResult::get_contacts 0

2162 21 get_overlapping_nodes 0 1033 1034 38 BulletGhostNode::get_overlapping_nodes 0

2163 13 get_materials 0 1078 1079 33 BulletSoftBodyNode::get_materials 0

2164 9 get_nodes 0 1081 1082 29 BulletSoftBodyNode::get_nodes 0

2165 10 get_wheels 0 1191 1192 25 BulletVehicle::get_wheels 0

2166 10 get_ghosts 0 1267 1268 23 BulletWorld::get_ghosts 0

2167 16 get_rigid_bodies 0 1269 1270 29 BulletWorld::get_rigid_bodies 0

2168 15 get_soft_bodies 0 1271 1272 28 BulletWorld::get_soft_bodies 0

2169 14 get_characters 0 1273 1274 27 BulletWorld::get_characters 0

2170 12 get_vehicles 0 1275 1276 25 BulletWorld::get_vehicles 0

2171 15 get_constraints 0 1277 1278 28 BulletWorld::get_constraints 0

2172 13 get_manifolds 0 1285 1286 26 BulletWorld::get_manifolds 0

2173 19 get_manifold_points 0 1300 1301 45 BulletPersistentManifold::get_manifold_points 0

