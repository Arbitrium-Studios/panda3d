1713074363
3 3
12 libp3express 4 vDgf 12 panda3d.core 
697
714 7 is_null 0 4 1415 22 PointerToVoid::is_null 0 1 20 130
/**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */
50
constexpr bool PointerToVoid::is_null(void) const;

715 8 get_hash 0 4 1415 23 PointerToVoid::get_hash 0 1 21 10
/**
 *
 */
55
inline std::size_t PointerToVoid::get_hash(void) const;

716 14 ~PointerToVoid 0 516 1415 29 PointerToVoid::~PointerToVoid 0 0 0
36
PointerToVoid::~PointerToVoid(void);

717 5 clear 0 4 1414 56 PointerToBase< ReferenceCountedVector< double > >::clear 0 1 18 0
75
inline void PointerToBase< ReferenceCountedVector< double > >::clear(void);

718 6 output 0 4 1414 57 PointerToBase< ReferenceCountedVector< double > >::output 0 1 19 0
88
void PointerToBase< ReferenceCountedVector< double > >::output(std::ostream &out) const;

719 19 ~PointerToArrayBase 0 516 1413 49 PointerToArrayBase< double >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< double >::~PointerToArrayBase(void);

720 11 operator == 0 4 1413 41 PointerToArrayBase< double >::operator == 0 1 16 64
// These are implemented in PointerToVoid, but expose them here.
103
inline bool PointerToArrayBase< double >::operator ==(PointerToArrayBase< double > const &other) const;

721 11 operator != 0 4 1413 41 PointerToArrayBase< double >::operator != 0 1 17 0
103
inline bool PointerToArrayBase< double >::operator !=(PointerToArrayBase< double > const &other) const;

722 19 ConstPointerToArray 0 260 1412 50 ConstPointerToArray< double >::ConstPointerToArray 0 2 1 2 0
198
inline ConstPointerToArray< double >::ConstPointerToArray(PointerToArray< double > const &copy);
inline ConstPointerToArray< double >::ConstPointerToArray(ConstPointerToArray< double > const &copy);

723 5 clear 0 4 1412 36 ConstPointerToArray< double >::clear 0 1 3 0
55
inline void ConstPointerToArray< double >::clear(void);

724 4 size 0 4 1412 35 ConstPointerToArray< double >::size 0 1 4 0
78
inline unsigned long long int ConstPointerToArray< double >::size(void) const;

725 11 get_element 0 4 1412 42 ConstPointerToArray< double >::get_element 0 1 5 0
96
inline double const &ConstPointerToArray< double >::get_element(unsigned long long int n) const;

726 11 __getitem__ 0 4 1412 42 ConstPointerToArray< double >::__getitem__ 0 1 6 0
89
double const &ConstPointerToArray< double >::__getitem__(unsigned long long int n) const;

727 8 get_data 0 4 1412 39 ConstPointerToArray< double >::get_data 0 1 7 0
62
PyObject *ConstPointerToArray< double >::get_data(void) const;

728 11 get_subdata 0 4 1412 42 ConstPointerToArray< double >::get_subdata 0 1 8 0
115
PyObject *ConstPointerToArray< double >::get_subdata(unsigned long long int n, unsigned long long int count) const;

729 13 get_ref_count 0 4 1412 44 ConstPointerToArray< double >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< double >::get_ref_count(void) const;

730 18 get_node_ref_count 0 4 1412 49 ConstPointerToArray< double >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< double >::get_node_ref_count(void) const;

731 5 count 0 4 1412 36 ConstPointerToArray< double >::count 0 1 11 0
89
inline unsigned long long int ConstPointerToArray< double >::count(double const &) const;

732 10 __reduce__ 0 4 1412 41 ConstPointerToArray< double >::__reduce__ 0 1 12 0
74
PyObject *ConstPointerToArray< double >::__reduce__(PyObject *self) const;

733 13 __getbuffer__ 0 4 1412 44 ConstPointerToArray< double >::__getbuffer__ 0 1 13 0
99
int ConstPointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

734 17 __releasebuffer__ 0 4 1412 48 ConstPointerToArray< double >::__releasebuffer__ 0 1 14 0
93
void ConstPointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

735 12 __deepcopy__ 0 4 1412 43 ConstPointerToArray< double >::__deepcopy__ 0 1 15 0
96
ConstPointerToArray< double > ConstPointerToArray< double >::__deepcopy__(PyObject *memo) const;

736 20 ~ConstPointerToArray 0 516 1412 51 ConstPointerToArray< double >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< double >::~ConstPointerToArray(void);

737 5 clear 0 4 1420 55 PointerToBase< ReferenceCountedVector< float > >::clear 0 1 39 0
74
inline void PointerToBase< ReferenceCountedVector< float > >::clear(void);

738 6 output 0 4 1420 56 PointerToBase< ReferenceCountedVector< float > >::output 0 1 40 0
87
void PointerToBase< ReferenceCountedVector< float > >::output(std::ostream &out) const;

739 19 ~PointerToArrayBase 0 516 1419 48 PointerToArrayBase< float >::~PointerToArrayBase 0 0 0
62
inline PointerToArrayBase< float >::~PointerToArrayBase(void);

740 11 operator == 0 4 1419 40 PointerToArrayBase< float >::operator == 0 1 37 64
// These are implemented in PointerToVoid, but expose them here.
101
inline bool PointerToArrayBase< float >::operator ==(PointerToArrayBase< float > const &other) const;

741 11 operator != 0 4 1419 40 PointerToArrayBase< float >::operator != 0 1 38 0
101
inline bool PointerToArrayBase< float >::operator !=(PointerToArrayBase< float > const &other) const;

742 19 ConstPointerToArray 0 260 1418 49 ConstPointerToArray< float >::ConstPointerToArray 0 2 22 23 0
194
inline ConstPointerToArray< float >::ConstPointerToArray(PointerToArray< float > const &copy);
inline ConstPointerToArray< float >::ConstPointerToArray(ConstPointerToArray< float > const &copy);

743 5 clear 0 4 1418 35 ConstPointerToArray< float >::clear 0 1 24 0
54
inline void ConstPointerToArray< float >::clear(void);

744 4 size 0 4 1418 34 ConstPointerToArray< float >::size 0 1 25 0
77
inline unsigned long long int ConstPointerToArray< float >::size(void) const;

745 11 get_element 0 4 1418 41 ConstPointerToArray< float >::get_element 0 1 26 0
94
inline float const &ConstPointerToArray< float >::get_element(unsigned long long int n) const;

746 11 __getitem__ 0 4 1418 41 ConstPointerToArray< float >::__getitem__ 0 1 27 0
87
float const &ConstPointerToArray< float >::__getitem__(unsigned long long int n) const;

747 8 get_data 0 4 1418 38 ConstPointerToArray< float >::get_data 0 1 28 0
61
PyObject *ConstPointerToArray< float >::get_data(void) const;

748 11 get_subdata 0 4 1418 41 ConstPointerToArray< float >::get_subdata 0 1 29 0
114
PyObject *ConstPointerToArray< float >::get_subdata(unsigned long long int n, unsigned long long int count) const;

749 13 get_ref_count 0 4 1418 43 ConstPointerToArray< float >::get_ref_count 0 1 30 0
67
inline int ConstPointerToArray< float >::get_ref_count(void) const;

750 18 get_node_ref_count 0 4 1418 48 ConstPointerToArray< float >::get_node_ref_count 0 1 31 0
72
inline int ConstPointerToArray< float >::get_node_ref_count(void) const;

751 5 count 0 4 1418 35 ConstPointerToArray< float >::count 0 1 32 0
87
inline unsigned long long int ConstPointerToArray< float >::count(float const &) const;

752 10 __reduce__ 0 4 1418 40 ConstPointerToArray< float >::__reduce__ 0 1 33 0
73
PyObject *ConstPointerToArray< float >::__reduce__(PyObject *self) const;

753 13 __getbuffer__ 0 4 1418 43 ConstPointerToArray< float >::__getbuffer__ 0 1 34 0
98
int ConstPointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

754 17 __releasebuffer__ 0 4 1418 47 ConstPointerToArray< float >::__releasebuffer__ 0 1 35 0
92
void ConstPointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

755 12 __deepcopy__ 0 4 1418 42 ConstPointerToArray< float >::__deepcopy__ 0 1 36 0
94
ConstPointerToArray< float > ConstPointerToArray< float >::__deepcopy__(PyObject *memo) const;

756 20 ~ConstPointerToArray 0 516 1418 50 ConstPointerToArray< float >::~ConstPointerToArray 0 0 0
57
ConstPointerToArray< float >::~ConstPointerToArray(void);

757 5 clear 0 4 1424 53 PointerToBase< ReferenceCountedVector< int > >::clear 0 1 58 0
72
inline void PointerToBase< ReferenceCountedVector< int > >::clear(void);

758 6 output 0 4 1424 54 PointerToBase< ReferenceCountedVector< int > >::output 0 1 59 0
85
void PointerToBase< ReferenceCountedVector< int > >::output(std::ostream &out) const;

759 19 ~PointerToArrayBase 0 516 1423 46 PointerToArrayBase< int >::~PointerToArrayBase 0 0 0
60
inline PointerToArrayBase< int >::~PointerToArrayBase(void);

760 11 operator == 0 4 1423 38 PointerToArrayBase< int >::operator == 0 1 56 64
// These are implemented in PointerToVoid, but expose them here.
97
inline bool PointerToArrayBase< int >::operator ==(PointerToArrayBase< int > const &other) const;

761 11 operator != 0 4 1423 38 PointerToArrayBase< int >::operator != 0 1 57 0
97
inline bool PointerToArrayBase< int >::operator !=(PointerToArrayBase< int > const &other) const;

762 19 ConstPointerToArray 0 260 1422 47 ConstPointerToArray< int >::ConstPointerToArray 0 2 41 42 0
186
inline ConstPointerToArray< int >::ConstPointerToArray(PointerToArray< int > const &copy);
inline ConstPointerToArray< int >::ConstPointerToArray(ConstPointerToArray< int > const &copy);

763 5 clear 0 4 1422 33 ConstPointerToArray< int >::clear 0 1 43 0
52
inline void ConstPointerToArray< int >::clear(void);

764 4 size 0 4 1422 32 ConstPointerToArray< int >::size 0 1 44 0
75
inline unsigned long long int ConstPointerToArray< int >::size(void) const;

765 11 get_element 0 4 1422 39 ConstPointerToArray< int >::get_element 0 1 45 0
90
inline int const &ConstPointerToArray< int >::get_element(unsigned long long int n) const;

766 11 __getitem__ 0 4 1422 39 ConstPointerToArray< int >::__getitem__ 0 1 46 0
83
int const &ConstPointerToArray< int >::__getitem__(unsigned long long int n) const;

767 8 get_data 0 4 1422 36 ConstPointerToArray< int >::get_data 0 1 47 0
59
PyObject *ConstPointerToArray< int >::get_data(void) const;

768 11 get_subdata 0 4 1422 39 ConstPointerToArray< int >::get_subdata 0 1 48 0
112
PyObject *ConstPointerToArray< int >::get_subdata(unsigned long long int n, unsigned long long int count) const;

769 13 get_ref_count 0 4 1422 41 ConstPointerToArray< int >::get_ref_count 0 1 49 0
65
inline int ConstPointerToArray< int >::get_ref_count(void) const;

770 18 get_node_ref_count 0 4 1422 46 ConstPointerToArray< int >::get_node_ref_count 0 1 50 0
70
inline int ConstPointerToArray< int >::get_node_ref_count(void) const;

771 5 count 0 4 1422 33 ConstPointerToArray< int >::count 0 1 51 0
83
inline unsigned long long int ConstPointerToArray< int >::count(int const &) const;

772 10 __reduce__ 0 4 1422 38 ConstPointerToArray< int >::__reduce__ 0 1 52 0
71
PyObject *ConstPointerToArray< int >::__reduce__(PyObject *self) const;

773 13 __getbuffer__ 0 4 1422 41 ConstPointerToArray< int >::__getbuffer__ 0 1 53 0
96
int ConstPointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

774 17 __releasebuffer__ 0 4 1422 45 ConstPointerToArray< int >::__releasebuffer__ 0 1 54 0
90
void ConstPointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

775 12 __deepcopy__ 0 4 1422 40 ConstPointerToArray< int >::__deepcopy__ 0 1 55 0
90
ConstPointerToArray< int > ConstPointerToArray< int >::__deepcopy__(PyObject *memo) const;

776 20 ~ConstPointerToArray 0 516 1422 48 ConstPointerToArray< int >::~ConstPointerToArray 0 0 0
55
ConstPointerToArray< int >::~ConstPointerToArray(void);

777 5 clear 0 4 1428 63 PointerToBase< ReferenceCountedVector< unsigned char > >::clear 0 1 77 0
82
inline void PointerToBase< ReferenceCountedVector< unsigned char > >::clear(void);

778 6 output 0 4 1428 64 PointerToBase< ReferenceCountedVector< unsigned char > >::output 0 1 78 0
95
void PointerToBase< ReferenceCountedVector< unsigned char > >::output(std::ostream &out) const;

779 19 ~PointerToArrayBase 0 516 1427 56 PointerToArrayBase< unsigned char >::~PointerToArrayBase 0 0 0
70
inline PointerToArrayBase< unsigned char >::~PointerToArrayBase(void);

780 11 operator == 0 4 1427 48 PointerToArrayBase< unsigned char >::operator == 0 1 75 64
// These are implemented in PointerToVoid, but expose them here.
117
inline bool PointerToArrayBase< unsigned char >::operator ==(PointerToArrayBase< unsigned char > const &other) const;

781 11 operator != 0 4 1427 48 PointerToArrayBase< unsigned char >::operator != 0 1 76 0
117
inline bool PointerToArrayBase< unsigned char >::operator !=(PointerToArrayBase< unsigned char > const &other) const;

782 19 ConstPointerToArray 0 260 1426 57 ConstPointerToArray< unsigned char >::ConstPointerToArray 0 2 60 61 0
226
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(PointerToArray< unsigned char > const &copy);
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(ConstPointerToArray< unsigned char > const &copy);

783 5 clear 0 4 1426 43 ConstPointerToArray< unsigned char >::clear 0 1 62 0
62
inline void ConstPointerToArray< unsigned char >::clear(void);

784 4 size 0 4 1426 42 ConstPointerToArray< unsigned char >::size 0 1 63 0
85
inline unsigned long long int ConstPointerToArray< unsigned char >::size(void) const;

785 11 get_element 0 4 1426 49 ConstPointerToArray< unsigned char >::get_element 0 1 64 0
110
inline unsigned char const &ConstPointerToArray< unsigned char >::get_element(unsigned long long int n) const;

786 11 __getitem__ 0 4 1426 49 ConstPointerToArray< unsigned char >::__getitem__ 0 1 65 0
103
unsigned char const &ConstPointerToArray< unsigned char >::__getitem__(unsigned long long int n) const;

787 8 get_data 0 4 1426 46 ConstPointerToArray< unsigned char >::get_data 0 1 66 0
69
PyObject *ConstPointerToArray< unsigned char >::get_data(void) const;

788 11 get_subdata 0 4 1426 49 ConstPointerToArray< unsigned char >::get_subdata 0 1 67 0
122
PyObject *ConstPointerToArray< unsigned char >::get_subdata(unsigned long long int n, unsigned long long int count) const;

789 13 get_ref_count 0 4 1426 51 ConstPointerToArray< unsigned char >::get_ref_count 0 1 68 0
75
inline int ConstPointerToArray< unsigned char >::get_ref_count(void) const;

790 18 get_node_ref_count 0 4 1426 56 ConstPointerToArray< unsigned char >::get_node_ref_count 0 1 69 0
80
inline int ConstPointerToArray< unsigned char >::get_node_ref_count(void) const;

791 5 count 0 4 1426 43 ConstPointerToArray< unsigned char >::count 0 1 70 0
103
inline unsigned long long int ConstPointerToArray< unsigned char >::count(unsigned char const &) const;

792 10 __reduce__ 0 4 1426 48 ConstPointerToArray< unsigned char >::__reduce__ 0 1 71 0
81
PyObject *ConstPointerToArray< unsigned char >::__reduce__(PyObject *self) const;

793 13 __getbuffer__ 0 4 1426 51 ConstPointerToArray< unsigned char >::__getbuffer__ 0 1 72 0
106
int ConstPointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

794 17 __releasebuffer__ 0 4 1426 55 ConstPointerToArray< unsigned char >::__releasebuffer__ 0 1 73 0
100
void ConstPointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

795 12 __deepcopy__ 0 4 1426 50 ConstPointerToArray< unsigned char >::__deepcopy__ 0 1 74 0
110
ConstPointerToArray< unsigned char > ConstPointerToArray< unsigned char >::__deepcopy__(PyObject *memo) const;

796 20 ~ConstPointerToArray 0 516 1426 58 ConstPointerToArray< unsigned char >::~ConstPointerToArray 0 0 0
65
ConstPointerToArray< unsigned char >::~ConstPointerToArray(void);

797 14 PointerToArray 0 260 1430 40 PointerToArray< double >::PointerToArray 0 3 79 80 81 0
279
inline PointerToArray< double >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((double const *)(0))));
inline PointerToArray< double >::PointerToArray(PointerToArray< double > const &copy);
PointerToArray< double >::PointerToArray(PyObject *self, PyObject *source);

798 11 empty_array 0 4 1430 37 PointerToArray< double >::empty_array 0 1 82 0
171
static inline PointerToArray< double > PointerToArray< double >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((double const *)(0))));

799 5 clear 0 4 1430 31 PointerToArray< double >::clear 0 1 83 0
50
inline void PointerToArray< double >::clear(void);

800 4 size 0 4 1430 30 PointerToArray< double >::size 0 1 84 0
73
inline unsigned long long int PointerToArray< double >::size(void) const;

801 9 push_back 0 4 1430 35 PointerToArray< double >::push_back 0 1 85 0
65
inline void PointerToArray< double >::push_back(double const &x);

802 8 pop_back 0 4 1430 34 PointerToArray< double >::pop_back 0 1 86 0
53
inline void PointerToArray< double >::pop_back(void);

803 11 get_element 0 4 1430 37 PointerToArray< double >::get_element 0 1 87 0
91
inline double const &PointerToArray< double >::get_element(unsigned long long int n) const;

804 11 set_element 0 4 1430 37 PointerToArray< double >::set_element 0 1 88 0
97
inline void PointerToArray< double >::set_element(unsigned long long int n, double const &value);

805 11 __getitem__ 0 4 1430 37 PointerToArray< double >::__getitem__ 0 1 89 0
84
double const &PointerToArray< double >::__getitem__(unsigned long long int n) const;

806 11 __setitem__ 0 4 1430 37 PointerToArray< double >::__setitem__ 0 1 90 0
90
void PointerToArray< double >::__setitem__(unsigned long long int n, double const &value);

807 8 get_data 0 4 1430 34 PointerToArray< double >::get_data 0 1 91 0
57
PyObject *PointerToArray< double >::get_data(void) const;

808 8 set_data 0 4 1430 34 PointerToArray< double >::set_data 0 1 92 0
56
void PointerToArray< double >::set_data(PyObject *data);

809 11 get_subdata 0 4 1430 37 PointerToArray< double >::get_subdata 0 1 93 0
110
PyObject *PointerToArray< double >::get_subdata(unsigned long long int n, unsigned long long int count) const;

810 11 set_subdata 0 4 1430 37 PointerToArray< double >::set_subdata 0 1 94 0
145
inline void PointerToArray< double >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

811 13 get_ref_count 0 4 1430 39 PointerToArray< double >::get_ref_count 0 1 95 0
63
inline int PointerToArray< double >::get_ref_count(void) const;

812 18 get_node_ref_count 0 4 1430 44 PointerToArray< double >::get_node_ref_count 0 1 96 0
68
inline int PointerToArray< double >::get_node_ref_count(void) const;

813 5 count 0 4 1430 31 PointerToArray< double >::count 0 1 97 0
84
inline unsigned long long int PointerToArray< double >::count(double const &) const;

814 10 __reduce__ 0 4 1430 36 PointerToArray< double >::__reduce__ 0 1 98 0
69
PyObject *PointerToArray< double >::__reduce__(PyObject *self) const;

815 13 __getbuffer__ 0 4 1430 39 PointerToArray< double >::__getbuffer__ 0 1 99 0
88
int PointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

816 17 __releasebuffer__ 0 4 1430 43 PointerToArray< double >::__releasebuffer__ 0 1 100 0
88
void PointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

817 12 __deepcopy__ 0 4 1430 38 PointerToArray< double >::__deepcopy__ 0 1 101 0
86
PointerToArray< double > PointerToArray< double >::__deepcopy__(PyObject *memo) const;

818 15 ~PointerToArray 0 516 1430 41 PointerToArray< double >::~PointerToArray 0 0 0
48
PointerToArray< double >::~PointerToArray(void);

819 14 PointerToArray 0 260 1432 39 PointerToArray< float >::PointerToArray 0 3 102 103 104 0
274
inline PointerToArray< float >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((float const *)(0))));
inline PointerToArray< float >::PointerToArray(PointerToArray< float > const &copy);
PointerToArray< float >::PointerToArray(PyObject *self, PyObject *source);

820 11 empty_array 0 4 1432 36 PointerToArray< float >::empty_array 0 1 105 0
168
static inline PointerToArray< float > PointerToArray< float >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((float const *)(0))));

821 5 clear 0 4 1432 30 PointerToArray< float >::clear 0 1 106 0
49
inline void PointerToArray< float >::clear(void);

822 4 size 0 4 1432 29 PointerToArray< float >::size 0 1 107 0
72
inline unsigned long long int PointerToArray< float >::size(void) const;

823 9 push_back 0 4 1432 34 PointerToArray< float >::push_back 0 1 108 0
63
inline void PointerToArray< float >::push_back(float const &x);

824 8 pop_back 0 4 1432 33 PointerToArray< float >::pop_back 0 1 109 0
52
inline void PointerToArray< float >::pop_back(void);

825 11 get_element 0 4 1432 36 PointerToArray< float >::get_element 0 1 110 0
89
inline float const &PointerToArray< float >::get_element(unsigned long long int n) const;

826 11 set_element 0 4 1432 36 PointerToArray< float >::set_element 0 1 111 0
95
inline void PointerToArray< float >::set_element(unsigned long long int n, float const &value);

827 11 __getitem__ 0 4 1432 36 PointerToArray< float >::__getitem__ 0 1 112 0
82
float const &PointerToArray< float >::__getitem__(unsigned long long int n) const;

828 11 __setitem__ 0 4 1432 36 PointerToArray< float >::__setitem__ 0 1 113 0
88
void PointerToArray< float >::__setitem__(unsigned long long int n, float const &value);

829 8 get_data 0 4 1432 33 PointerToArray< float >::get_data 0 1 114 0
56
PyObject *PointerToArray< float >::get_data(void) const;

830 8 set_data 0 4 1432 33 PointerToArray< float >::set_data 0 1 115 0
55
void PointerToArray< float >::set_data(PyObject *data);

831 11 get_subdata 0 4 1432 36 PointerToArray< float >::get_subdata 0 1 116 0
109
PyObject *PointerToArray< float >::get_subdata(unsigned long long int n, unsigned long long int count) const;

832 11 set_subdata 0 4 1432 36 PointerToArray< float >::set_subdata 0 1 117 0
144
inline void PointerToArray< float >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

833 13 get_ref_count 0 4 1432 38 PointerToArray< float >::get_ref_count 0 1 118 0
62
inline int PointerToArray< float >::get_ref_count(void) const;

834 18 get_node_ref_count 0 4 1432 43 PointerToArray< float >::get_node_ref_count 0 1 119 0
67
inline int PointerToArray< float >::get_node_ref_count(void) const;

835 5 count 0 4 1432 30 PointerToArray< float >::count 0 1 120 0
82
inline unsigned long long int PointerToArray< float >::count(float const &) const;

836 10 __reduce__ 0 4 1432 35 PointerToArray< float >::__reduce__ 0 1 121 0
68
PyObject *PointerToArray< float >::__reduce__(PyObject *self) const;

837 13 __getbuffer__ 0 4 1432 38 PointerToArray< float >::__getbuffer__ 0 1 122 0
87
int PointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

838 17 __releasebuffer__ 0 4 1432 42 PointerToArray< float >::__releasebuffer__ 0 1 123 0
87
void PointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

839 12 __deepcopy__ 0 4 1432 37 PointerToArray< float >::__deepcopy__ 0 1 124 0
84
PointerToArray< float > PointerToArray< float >::__deepcopy__(PyObject *memo) const;

840 15 ~PointerToArray 0 516 1432 40 PointerToArray< float >::~PointerToArray 0 0 0
47
PointerToArray< float >::~PointerToArray(void);

841 14 PointerToArray 0 260 1434 37 PointerToArray< int >::PointerToArray 0 3 125 126 127 0
264
inline PointerToArray< int >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((int const *)(0))));
inline PointerToArray< int >::PointerToArray(PointerToArray< int > const &copy);
PointerToArray< int >::PointerToArray(PyObject *self, PyObject *source);

842 11 empty_array 0 4 1434 34 PointerToArray< int >::empty_array 0 1 128 0
162
static inline PointerToArray< int > PointerToArray< int >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((int const *)(0))));

843 5 clear 0 4 1434 28 PointerToArray< int >::clear 0 1 129 0
47
inline void PointerToArray< int >::clear(void);

844 4 size 0 4 1434 27 PointerToArray< int >::size 0 1 130 0
70
inline unsigned long long int PointerToArray< int >::size(void) const;

845 9 push_back 0 4 1434 32 PointerToArray< int >::push_back 0 1 131 0
59
inline void PointerToArray< int >::push_back(int const &x);

846 8 pop_back 0 4 1434 31 PointerToArray< int >::pop_back 0 1 132 0
50
inline void PointerToArray< int >::pop_back(void);

847 11 get_element 0 4 1434 34 PointerToArray< int >::get_element 0 1 133 0
85
inline int const &PointerToArray< int >::get_element(unsigned long long int n) const;

848 11 set_element 0 4 1434 34 PointerToArray< int >::set_element 0 1 134 0
91
inline void PointerToArray< int >::set_element(unsigned long long int n, int const &value);

849 11 __getitem__ 0 4 1434 34 PointerToArray< int >::__getitem__ 0 1 135 0
78
int const &PointerToArray< int >::__getitem__(unsigned long long int n) const;

850 11 __setitem__ 0 4 1434 34 PointerToArray< int >::__setitem__ 0 1 136 0
84
void PointerToArray< int >::__setitem__(unsigned long long int n, int const &value);

851 8 get_data 0 4 1434 31 PointerToArray< int >::get_data 0 1 137 0
54
PyObject *PointerToArray< int >::get_data(void) const;

852 8 set_data 0 4 1434 31 PointerToArray< int >::set_data 0 1 138 0
53
void PointerToArray< int >::set_data(PyObject *data);

853 11 get_subdata 0 4 1434 34 PointerToArray< int >::get_subdata 0 1 139 0
107
PyObject *PointerToArray< int >::get_subdata(unsigned long long int n, unsigned long long int count) const;

854 11 set_subdata 0 4 1434 34 PointerToArray< int >::set_subdata 0 1 140 0
142
inline void PointerToArray< int >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

855 13 get_ref_count 0 4 1434 36 PointerToArray< int >::get_ref_count 0 1 141 0
60
inline int PointerToArray< int >::get_ref_count(void) const;

856 18 get_node_ref_count 0 4 1434 41 PointerToArray< int >::get_node_ref_count 0 1 142 0
65
inline int PointerToArray< int >::get_node_ref_count(void) const;

857 5 count 0 4 1434 28 PointerToArray< int >::count 0 1 143 0
78
inline unsigned long long int PointerToArray< int >::count(int const &) const;

858 10 __reduce__ 0 4 1434 33 PointerToArray< int >::__reduce__ 0 1 144 0
66
PyObject *PointerToArray< int >::__reduce__(PyObject *self) const;

859 13 __getbuffer__ 0 4 1434 36 PointerToArray< int >::__getbuffer__ 0 1 145 0
85
int PointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

860 17 __releasebuffer__ 0 4 1434 40 PointerToArray< int >::__releasebuffer__ 0 1 146 0
85
void PointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

861 12 __deepcopy__ 0 4 1434 35 PointerToArray< int >::__deepcopy__ 0 1 147 0
80
PointerToArray< int > PointerToArray< int >::__deepcopy__(PyObject *memo) const;

862 15 ~PointerToArray 0 516 1434 38 PointerToArray< int >::~PointerToArray 0 0 0
45
PointerToArray< int >::~PointerToArray(void);

863 14 PointerToArray 0 260 1436 47 PointerToArray< unsigned char >::PointerToArray 0 3 148 149 150 0
314
inline PointerToArray< unsigned char >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((unsigned char const *)(0))));
inline PointerToArray< unsigned char >::PointerToArray(PointerToArray< unsigned char > const &copy);
PointerToArray< unsigned char >::PointerToArray(PyObject *self, PyObject *source);

864 11 empty_array 0 4 1436 44 PointerToArray< unsigned char >::empty_array 0 1 151 0
192
static inline PointerToArray< unsigned char > PointerToArray< unsigned char >::empty_array(unsigned long long int n, TypeHandle type_handle = (::_get_type_handle((unsigned char const *)(0))));

865 5 clear 0 4 1436 38 PointerToArray< unsigned char >::clear 0 1 152 0
57
inline void PointerToArray< unsigned char >::clear(void);

866 4 size 0 4 1436 37 PointerToArray< unsigned char >::size 0 1 153 0
80
inline unsigned long long int PointerToArray< unsigned char >::size(void) const;

867 9 push_back 0 4 1436 42 PointerToArray< unsigned char >::push_back 0 1 154 0
79
inline void PointerToArray< unsigned char >::push_back(unsigned char const &x);

868 8 pop_back 0 4 1436 41 PointerToArray< unsigned char >::pop_back 0 1 155 0
60
inline void PointerToArray< unsigned char >::pop_back(void);

869 11 get_element 0 4 1436 44 PointerToArray< unsigned char >::get_element 0 1 156 0
105
inline unsigned char const &PointerToArray< unsigned char >::get_element(unsigned long long int n) const;

870 11 set_element 0 4 1436 44 PointerToArray< unsigned char >::set_element 0 1 157 0
111
inline void PointerToArray< unsigned char >::set_element(unsigned long long int n, unsigned char const &value);

871 11 __getitem__ 0 4 1436 44 PointerToArray< unsigned char >::__getitem__ 0 1 158 0
98
unsigned char const &PointerToArray< unsigned char >::__getitem__(unsigned long long int n) const;

872 11 __setitem__ 0 4 1436 44 PointerToArray< unsigned char >::__setitem__ 0 1 159 0
104
void PointerToArray< unsigned char >::__setitem__(unsigned long long int n, unsigned char const &value);

873 8 get_data 0 4 1436 41 PointerToArray< unsigned char >::get_data 0 1 160 0
64
PyObject *PointerToArray< unsigned char >::get_data(void) const;

874 8 set_data 0 4 1436 41 PointerToArray< unsigned char >::set_data 0 1 161 0
63
void PointerToArray< unsigned char >::set_data(PyObject *data);

875 11 get_subdata 0 4 1436 44 PointerToArray< unsigned char >::get_subdata 0 1 162 0
117
PyObject *PointerToArray< unsigned char >::get_subdata(unsigned long long int n, unsigned long long int count) const;

876 11 set_subdata 0 4 1436 44 PointerToArray< unsigned char >::set_subdata 0 1 163 0
152
inline void PointerToArray< unsigned char >::set_subdata(unsigned long long int n, unsigned long long int count, std::basic_string< char > const &data);

877 13 get_ref_count 0 4 1436 46 PointerToArray< unsigned char >::get_ref_count 0 1 164 0
70
inline int PointerToArray< unsigned char >::get_ref_count(void) const;

878 18 get_node_ref_count 0 4 1436 51 PointerToArray< unsigned char >::get_node_ref_count 0 1 165 0
75
inline int PointerToArray< unsigned char >::get_node_ref_count(void) const;

879 5 count 0 4 1436 38 PointerToArray< unsigned char >::count 0 1 166 0
98
inline unsigned long long int PointerToArray< unsigned char >::count(unsigned char const &) const;

880 10 __reduce__ 0 4 1436 43 PointerToArray< unsigned char >::__reduce__ 0 1 167 0
76
PyObject *PointerToArray< unsigned char >::__reduce__(PyObject *self) const;

881 13 __getbuffer__ 0 4 1436 46 PointerToArray< unsigned char >::__getbuffer__ 0 1 168 0
95
int PointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

882 17 __releasebuffer__ 0 4 1436 50 PointerToArray< unsigned char >::__releasebuffer__ 0 1 169 0
95
void PointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

883 12 __deepcopy__ 0 4 1436 45 PointerToArray< unsigned char >::__deepcopy__ 0 1 170 0
100
PointerToArray< unsigned char > PointerToArray< unsigned char >::__deepcopy__(PyObject *memo) const;

884 15 ~PointerToArray 0 516 1436 48 PointerToArray< unsigned char >::~PointerToArray 0 0 0
55
PointerToArray< unsigned char >::~PointerToArray(void);

885 11 is_tracking 0 4 1437 24 MemoryUsage::is_tracking 0 1 172 125
/**
 * Returns true if the MemoryUsage object is currently tracking memory (e.g.
 * track-memory-usage is configured #t).
 */
50
static inline bool MemoryUsage::is_tracking(void);

886 11 is_counting 0 4 1437 24 MemoryUsage::is_counting 0 1 173 168
/**
 * Returns true if the MemoryUsage object is currently at least counting
 * memory (e.g.  this is a Windows debug build), even if it's not fully
 * tracking it.
 */
50
static inline bool MemoryUsage::is_counting(void);

887 20 get_current_cpp_size 0 4 1437 33 MemoryUsage::get_current_cpp_size 0 1 174 136
/**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, not including the memory previously frozen.
 */
66
static inline std::size_t MemoryUsage::get_current_cpp_size(void);

888 18 get_total_cpp_size 0 4 1437 31 MemoryUsage::get_total_cpp_size 0 1 175 132
/**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, including the memory previously frozen.
 */
64
static inline std::size_t MemoryUsage::get_total_cpp_size(void);

889 26 get_panda_heap_single_size 0 4 1437 39 MemoryUsage::get_panda_heap_single_size 0 1 176 119
/**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for individual objects.
 */
72
static inline std::size_t MemoryUsage::get_panda_heap_single_size(void);

890 25 get_panda_heap_array_size 0 4 1437 38 MemoryUsage::get_panda_heap_array_size 0 1 177 107
/**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for arrays.
 */
71
static inline std::size_t MemoryUsage::get_panda_heap_array_size(void);

891 23 get_panda_heap_overhead 0 4 1437 36 MemoryUsage::get_panda_heap_overhead 0 1 178 190
/**
 * Returns the extra bytes allocated from the system that are not immediately
 * used for holding allocated objects.  This can only be determined if
 * ALTERNATIVE_MALLOC is enabled.
 */
69
static inline std::size_t MemoryUsage::get_panda_heap_overhead(void);

892 19 get_panda_mmap_size 0 4 1437 32 MemoryUsage::get_panda_mmap_size 0 1 179 110
/**
 * Returns the total number of bytes allocated from the virtual memory pool
 * from code within Panda.
 */
65
static inline std::size_t MemoryUsage::get_panda_mmap_size(void);

893 17 get_external_size 0 4 1437 30 MemoryUsage::get_external_size 0 1 180 496
/**
 * Returns the total number of bytes of allocated memory in the heap that
 * Panda didn't seem to be responsible for.  This includes a few bytes for
 * very low-level objects (like ConfigVariables) that cannot use Panda memory
 * tracking because they are so very low-level.
 *
 * This also includes all of the memory that might have been allocated by a
 * high-level interpreter, like Python.
 *
 * This number is only available if Panda is able to hook into the actual heap
 * callback.
 */
63
static inline std::size_t MemoryUsage::get_external_size(void);

894 14 get_total_size 0 4 1437 27 MemoryUsage::get_total_size 0 1 181 113
/**
 * Returns the total size of allocated memory consumed by the process, as
 * nearly as can be determined.
 */
60
static inline std::size_t MemoryUsage::get_total_size(void);

895 16 get_num_pointers 0 4 1437 29 MemoryUsage::get_num_pointers 0 1 182 59
/**
 * Returns the number of pointers currently active.
 */
54
static inline int MemoryUsage::get_num_pointers(void);

896 12 get_pointers 0 4 1437 25 MemoryUsage::get_pointers 0 1 183 100
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers
 * currently active.
 */
74
static inline void MemoryUsage::get_pointers(MemoryUsagePointers &result);

897 20 get_pointers_of_type 0 4 1437 33 MemoryUsage::get_pointers_of_type 0 1 184 122
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers of the
 * indicated type currently active.
 */
99
static inline void MemoryUsage::get_pointers_of_type(MemoryUsagePointers &result, TypeHandle type);

898 19 get_pointers_of_age 0 4 1437 32 MemoryUsage::get_pointers_of_age 0 1 185 159
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers that
 * were allocated within the range of the indicated number of seconds ago.
 */
105
static inline void MemoryUsage::get_pointers_of_age(MemoryUsagePointers &result, double from, double to);

899 28 get_pointers_with_zero_count 0 4 1437 41 MemoryUsage::get_pointers_with_zero_count 0 1 186 852
/**
 * Fills the indicated MemoryUsagePointers with the set of all currently
 * active pointers (that is, pointers allocated since the last call to
 * freeze(), and not yet freed) that have a zero reference count.
 *
 * Generally, an undeleted pointer with a zero reference count means its
 * reference count has never been incremented beyond zero (since once it has
 * been incremented, the only way it can return to zero would free the
 * pointer).  This may include objects that are allocated statically or on the
 * stack, which are never intended to be deleted.  Or, it might represent a
 * programmer or compiler error.
 *
 * This function has the side-effect of incrementing each of their reference
 * counts by one, thus preventing them from ever being freed--but since they
 * hadn't been freed anyway, probably no additional harm is done.
 */
90
static inline void MemoryUsage::get_pointers_with_zero_count(MemoryUsagePointers &result);

900 6 freeze 0 4 1437 19 MemoryUsage::freeze 0 1 187 285
/**
 * 'Freezes' all pointers currently stored so that they are no longer
 * reported; only newly allocate pointers from this point on will appear in
 * future information requests.  This makes it easier to differentiate between
 * continuous leaks and one-time memory allocations.
 */
45
static inline void MemoryUsage::freeze(void);

901 18 show_current_types 0 4 1437 31 MemoryUsage::show_current_types 0 1 188 70
/**
 * Shows the breakdown of types of all of the active pointers.
 */
57
static inline void MemoryUsage::show_current_types(void);

902 16 show_trend_types 0 4 1437 29 MemoryUsage::show_trend_types 0 1 189 118
/**
 * Shows the breakdown of types of all of the pointers allocated and freed
 * since the last call to freeze().
 */
55
static inline void MemoryUsage::show_trend_types(void);

903 17 show_current_ages 0 4 1437 30 MemoryUsage::show_current_ages 0 1 190 69
/**
 * Shows the breakdown of ages of all of the active pointers.
 */
56
static inline void MemoryUsage::show_current_ages(void);

904 15 show_trend_ages 0 4 1437 28 MemoryUsage::show_trend_ages 0 1 191 117
/**
 * Shows the breakdown of ages of all of the pointers allocated and freed
 * since the last call to freeze().
 */
54
static inline void MemoryUsage::show_trend_ages(void);

905 11 MemoryUsage 0 260 1437 24 MemoryUsage::MemoryUsage 0 1 171 10
/**
 *
 */
63
inline MemoryUsage::MemoryUsage(MemoryUsage const &) = default;

906 12 ~MemoryUsage 0 516 1437 25 MemoryUsage::~MemoryUsage 0 0 0
32
MemoryUsage::~MemoryUsage(void);

907 20 upcast_to_MemoryBase 0 12 1442 36 ReferenceCount::upcast_to_MemoryBase 0 1 198 40
upcast from ReferenceCount to MemoryBase
55
MemoryBase *ReferenceCount::upcast_to_MemoryBase(void);

908 26 downcast_to_ReferenceCount 0 12 1416 38 MemoryBase::downcast_to_ReferenceCount 0 0 42
downcast from MemoryBase to ReferenceCount
61
ReferenceCount *MemoryBase::downcast_to_ReferenceCount(void);

909 15 ~ReferenceCount 0 518 1442 31 ReferenceCount::~ReferenceCount 0 0 10
/**
 *
 */
53
virtual inline ReferenceCount::~ReferenceCount(void);

910 13 get_ref_count 0 4 1442 29 ReferenceCount::get_ref_count 0 1 192 47
/**
 * Returns the current reference count.
 */
53
inline int ReferenceCount::get_ref_count(void) const;

911 3 ref 0 4 1442 19 ReferenceCount::ref 0 1 193 538
/**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */
44
inline void ReferenceCount::ref(void) const;

912 5 unref 0 6 1442 21 ReferenceCount::unref 0 1 194 865
/**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
54
virtual inline bool ReferenceCount::unref(void) const;

913 24 test_ref_count_integrity 0 4 1442 40 ReferenceCount::test_ref_count_integrity 0 1 195 135
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */
65
inline bool ReferenceCount::test_ref_count_integrity(void) const;

914 22 test_ref_count_nonzero 0 4 1442 38 ReferenceCount::test_ref_count_nonzero 0 1 196 144
/**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */
63
inline bool ReferenceCount::test_ref_count_nonzero(void) const;

915 14 get_class_type 0 4 1442 30 ReferenceCount::get_class_type 0 1 197 0
55
static TypeHandle ReferenceCount::get_class_type(void);

916 10 get_length 0 4 1444 18 Buffer::get_length 0 1 200 10
/**
 *
 */
42
inline int Buffer::get_length(void) const;

917 6 Buffer 0 260 1444 14 Buffer::Buffer 0 1 199 10
/**
 *
 */
48
inline Buffer::Buffer(Buffer const &) = default;

918 15 compress_string 0 1 0 15 compress_string 0 1 696 0
78
std::string compress_string(std::string const &source, int compression_level);

919 17 decompress_string 0 1 0 17 decompress_string 0 1 697 0
57
std::string decompress_string(std::string const &source);

920 13 compress_file 0 1 0 13 compress_file 0 1 698 0
88
bool compress_file(Filename const &source, Filename const &dest, int compression_level);

921 15 decompress_file 0 1 0 15 decompress_file 0 1 699 0
67
bool decompress_file(Filename const &source, Filename const &dest);

922 15 compress_stream 0 1 0 15 compress_stream 0 1 700 0
86
bool compress_stream(std::istream &source, std::ostream &dest, int compression_level);

923 17 decompress_stream 0 1 0 17 decompress_stream 0 1 701 0
65
bool decompress_stream(std::istream &source, std::ostream &dest);

924 11 copy_stream 0 1 0 11 copy_stream 0 1 702 0
59
bool copy_stream(std::istream &source, std::ostream &dest);

925 9 add_level 0 6 1445 36 PStatCollectorForwardBase::add_level 0 1 201 0
68
virtual void PStatCollectorForwardBase::add_level(double level) = 0;

926 18 get_node_ref_count 0 4 1446 38 NodeReferenceCount::get_node_ref_count 0 1 202 47
/**
 * Returns the current reference count.
 */
62
inline int NodeReferenceCount::get_node_ref_count(void) const;

927 8 node_ref 0 4 1446 28 NodeReferenceCount::node_ref 0 1 203 107
/**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */
53
inline void NodeReferenceCount::node_ref(void) const;

928 10 node_unref 0 4 1446 30 NodeReferenceCount::node_unref 0 1 204 201
/**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
55
inline bool NodeReferenceCount::node_unref(void) const;

929 24 test_ref_count_integrity 0 4 1446 44 NodeReferenceCount::test_ref_count_integrity 0 1 205 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
69
inline bool NodeReferenceCount::test_ref_count_integrity(void) const;

930 15 node_unref_only 0 4 1446 35 NodeReferenceCount::node_unref_only 0 1 206 186
/**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */
60
inline void NodeReferenceCount::node_unref_only(void) const;

931 14 get_class_type 0 4 1446 34 NodeReferenceCount::get_class_type 0 1 207 0
59
static TypeHandle NodeReferenceCount::get_class_type(void);

932 8 Datagram 0 260 1447 18 Datagram::Datagram 0 3 208 209 210 130
/**
 * Constructs a datagram from an existing block of data.
 */

/**
 * Constructs a datagram from an existing block of data.
 */
221
inline Datagram::Datagram(void) = default;
inline explicit Datagram::Datagram(void const *data, std::size_t size);
inline explicit Datagram::Datagram(vector_uchar data);
Datagram::Datagram(Datagram const &copy) = default;

933 10 operator = 0 4 1447 20 Datagram::operator = 0 1 211 0
58
void Datagram::operator =(Datagram const &copy) = default;

934 5 clear 0 6 1447 15 Datagram::clear 0 1 212 90
/**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */
35
virtual void Datagram::clear(void);

935 8 dump_hex 0 4 1447 18 Datagram::dump_hex 0 1 213 111
/**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */
74
void Datagram::dump_hex(std::ostream &out, unsigned int indent = 0) const;

936 8 add_bool 0 4 1447 18 Datagram::add_bool 0 1 214 48
/**
 * Adds a boolean value to the datagram.
 */
43
inline void Datagram::add_bool(bool value);

937 8 add_int8 0 4 1447 18 Datagram::add_int8 0 1 215 55
/**
 * Adds a signed 8-bit integer to the datagram.
 */
45
inline void Datagram::add_int8(int8_t value);

938 9 add_uint8 0 4 1447 19 Datagram::add_uint8 0 1 216 58
/**
 * Adds an unsigned 8-bit integer to the datagram.
 */
47
inline void Datagram::add_uint8(uint8_t value);

939 9 add_int16 0 4 1447 19 Datagram::add_int16 0 1 217 106
// The default numeric packing is little-endian.

/**
 * Adds a signed 16-bit integer to the datagram.
 */
47
inline void Datagram::add_int16(int16_t value);

940 9 add_int32 0 4 1447 19 Datagram::add_int32 0 1 218 56
/**
 * Adds a signed 32-bit integer to the datagram.
 */
47
inline void Datagram::add_int32(int32_t value);

941 9 add_int64 0 4 1447 19 Datagram::add_int64 0 1 219 56
/**
 * Adds a signed 64-bit integer to the datagram.
 */
47
inline void Datagram::add_int64(int64_t value);

942 10 add_uint16 0 4 1447 20 Datagram::add_uint16 0 1 220 59
/**
 * Adds an unsigned 16-bit integer to the datagram.
 */
49
inline void Datagram::add_uint16(uint16_t value);

943 10 add_uint32 0 4 1447 20 Datagram::add_uint32 0 1 221 59
/**
 * Adds an unsigned 32-bit integer to the datagram.
 */
49
inline void Datagram::add_uint32(uint32_t value);

944 10 add_uint64 0 4 1447 20 Datagram::add_uint64 0 1 222 59
/**
 * Adds an unsigned 64-bit integer to the datagram.
 */
49
inline void Datagram::add_uint64(uint64_t value);

945 11 add_float32 0 4 1447 21 Datagram::add_float32 0 1 223 197
/**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
52
inline void Datagram::add_float32(PN_float32 value);

946 11 add_float64 0 4 1447 21 Datagram::add_float64 0 1 224 63
/**
 * Adds a 64-bit floating-point number to the datagram.
 */
52
inline void Datagram::add_float64(PN_float64 value);

947 12 add_stdfloat 0 4 1447 22 Datagram::add_stdfloat 0 1 225 105
/**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */
54
inline void Datagram::add_stdfloat(PN_stdfloat value);

948 12 add_be_int16 0 4 1447 22 Datagram::add_be_int16 0 1 226 136
// These functions pack numbers big-endian, in case that's desired.

/**
 * Adds a signed 16-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int16(int16_t value);

949 12 add_be_int32 0 4 1447 22 Datagram::add_be_int32 0 1 227 67
/**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int32(int32_t value);

950 12 add_be_int64 0 4 1447 22 Datagram::add_be_int64 0 1 228 67
/**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int64(int64_t value);

951 13 add_be_uint16 0 4 1447 23 Datagram::add_be_uint16 0 1 229 70
/**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint16(uint16_t value);

952 13 add_be_uint32 0 4 1447 23 Datagram::add_be_uint32 0 1 230 70
/**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint32(uint32_t value);

953 13 add_be_uint64 0 4 1447 23 Datagram::add_be_uint64 0 1 231 70
/**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint64(uint64_t value);

954 14 add_be_float32 0 4 1447 24 Datagram::add_be_float32 0 1 232 94
/**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */
55
inline void Datagram::add_be_float32(PN_float32 value);

955 14 add_be_float64 0 4 1447 24 Datagram::add_be_float64 0 1 233 74
/**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */
55
inline void Datagram::add_be_float64(PN_float64 value);

956 10 add_string 0 4 1447 20 Datagram::add_string 0 1 234 109
/**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */
57
inline void Datagram::add_string(std::string const &str);

957 12 add_string32 0 4 1447 22 Datagram::add_string32 0 1 235 116
/**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */
59
inline void Datagram::add_string32(std::string const &str);

958 12 add_z_string 0 4 1447 22 Datagram::add_z_string 0 1 236 86
/**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */
59
inline void Datagram::add_z_string(std::string const &str);

959 16 add_fixed_string 0 4 1447 26 Datagram::add_fixed_string 0 1 237 238
/**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */
81
inline void Datagram::add_fixed_string(std::string const &str, std::size_t size);

960 11 add_wstring 0 4 1447 21 Datagram::add_wstring 0 1 238 58
/**
 * Adds a variable-length wstring to the datagram.
 */
52
void Datagram::add_wstring(std::wstring const &str);

961 8 add_blob 0 4 1447 18 Datagram::add_blob 0 1 239 114
/**
 * Adds a variable-length binary blob to the datagram.  This actually adds a
 * count followed by n bytes.
 */
53
inline void Datagram::add_blob(vector_uchar const &);

962 10 add_blob32 0 4 1447 20 Datagram::add_blob32 0 1 240 119
/**
 * Adds a variable-length binary blob to the datagram, using a 32-bit length
 * field to allow very long blobs.
 */
55
inline void Datagram::add_blob32(vector_uchar const &);

963 9 pad_bytes 0 4 1447 19 Datagram::pad_bytes 0 1 241 67
/**
 * Adds the indicated number of zero bytes to the datagram.
 */
43
void Datagram::pad_bytes(std::size_t size);

964 11 append_data 0 4 1447 21 Datagram::append_data 0 1 242 132
/**
 * Appends some more raw data to the end of the datagram.
 */

/**
 * Appends some more raw data to the end of the datagram.
 */
124
void Datagram::append_data(void const *data, std::size_t size);
inline void Datagram::append_data(vector_uchar const &data);

965 11 get_message 0 4 1447 21 Datagram::get_message 0 1 243 51
/**
 * Returns the datagram's data as a string.
 */
51
inline PyObject *Datagram::get_message(void) const;

966 9 __bytes__ 0 4 1447 19 Datagram::__bytes__ 0 1 244 0
49
inline PyObject *Datagram::__bytes__(void) const;

967 10 __reduce__ 0 4 1447 20 Datagram::__reduce__ 0 1 245 0
43
PyObject *Datagram::__reduce__(void) const;

968 10 get_length 0 4 1447 20 Datagram::get_length 0 1 246 55
/**
 * Returns the number of bytes in the datagram.
 */
52
inline std::size_t Datagram::get_length(void) const;

969 9 set_array 0 4 1447 19 Datagram::set_array 0 1 247 199
/**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */
48
inline void Datagram::set_array(PTA_uchar data);

970 10 copy_array 0 4 1447 20 Datagram::copy_array 0 1 248 237
/**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */
50
inline void Datagram::copy_array(CPTA_uchar data);

971 9 get_array 0 4 1447 19 Datagram::get_array 0 1 249 70
/**
 * Returns a const pointer to the actual data in the Datagram.
 */
50
inline CPTA_uchar Datagram::get_array(void) const;

972 12 modify_array 0 4 1447 22 Datagram::modify_array 0 1 250 75
/**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */
46
inline PTA_uchar Datagram::modify_array(void);

973 19 set_stdfloat_double 0 4 1447 29 Datagram::set_stdfloat_double 0 1 251 343
/**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */
64
inline void Datagram::set_stdfloat_double(bool stdfloat_double);

974 19 get_stdfloat_double 0 4 1447 29 Datagram::get_stdfloat_double 0 1 252 72
/**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */
54
inline bool Datagram::get_stdfloat_double(void) const;

975 11 operator == 0 4 1447 21 Datagram::operator == 0 1 253 0
63
inline bool Datagram::operator ==(Datagram const &other) const;

976 11 operator != 0 4 1447 21 Datagram::operator != 0 1 254 0
63
inline bool Datagram::operator !=(Datagram const &other) const;

977 10 operator < 0 4 1447 20 Datagram::operator < 0 1 255 0
62
inline bool Datagram::operator <(Datagram const &other) const;

978 6 output 0 4 1447 16 Datagram::output 0 1 256 67
/**
 * Write a string representation of this instance to <out>.
 */
47
void Datagram::output(std::ostream &out) const;

979 5 write 0 4 1447 15 Datagram::write 0 1 257 67
/**
 * Write a string representation of this instance to <out>.
 */
71
void Datagram::write(std::ostream &out, unsigned int indent = 0) const;

980 14 get_class_type 0 4 1447 24 Datagram::get_class_type 0 1 258 0
49
static TypeHandle Datagram::get_class_type(void);

981 18 ~DatagramGenerator 0 518 1449 37 DatagramGenerator::~DatagramGenerator 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
52
virtual DatagramGenerator::~DatagramGenerator(void);

982 12 get_datagram 0 6 1449 31 DatagramGenerator::get_datagram 0 1 259 0
65
virtual bool DatagramGenerator::get_datagram(Datagram &data) = 0;

983 13 save_datagram 0 6 1449 32 DatagramGenerator::save_datagram 0 1 260 391
/**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */
65
virtual bool DatagramGenerator::save_datagram(SubfileInfo &info);

984 6 is_eof 0 6 1449 25 DatagramGenerator::is_eof 0 1 261 0
49
virtual bool DatagramGenerator::is_eof(void) = 0;

985 8 is_error 0 6 1449 27 DatagramGenerator::is_error 0 1 262 0
51
virtual bool DatagramGenerator::is_error(void) = 0;

986 12 get_filename 0 6 1449 31 DatagramGenerator::get_filename 0 1 263 159
/**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */
62
virtual Filename const &DatagramGenerator::get_filename(void);

987 13 get_timestamp 0 6 1449 32 DatagramGenerator::get_timestamp 0 1 264 138
/**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */
60
virtual time_t DatagramGenerator::get_timestamp(void) const;

988 8 get_file 0 6 1449 27 DatagramGenerator::get_file 0 1 265 156
/**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */
63
virtual FileReference const *DatagramGenerator::get_file(void);

989 9 get_vfile 0 6 1449 28 DatagramGenerator::get_vfile 0 1 266 153
/**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */
56
virtual VirtualFile *DatagramGenerator::get_vfile(void);

990 12 get_file_pos 0 6 1449 31 DatagramGenerator::get_file_pos 0 1 267 327
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */
61
virtual std::streamoff DatagramGenerator::get_file_pos(void);

991 16 DatagramIterator 0 260 1450 34 DatagramIterator::DatagramIterator 0 3 268 269 270 22
/**
 *
 */

/**
 *
 */
220
inline DatagramIterator::DatagramIterator(void);
inline DatagramIterator::DatagramIterator(Datagram const &datagram, std::size_t offset = 0);
inline DatagramIterator::DatagramIterator(DatagramIterator const &) = default;

992 8 get_bool 0 4 1450 26 DatagramIterator::get_bool 0 1 271 36
/**
 * Extracts a boolean value.
 */
45
inline bool DatagramIterator::get_bool(void);

993 8 get_int8 0 4 1450 26 DatagramIterator::get_int8 0 1 272 43
/**
 * Extracts a signed 8-bit integer.
 */
47
inline int8_t DatagramIterator::get_int8(void);

994 9 get_uint8 0 4 1450 27 DatagramIterator::get_uint8 0 1 273 46
/**
 * Extracts an unsigned 8-bit integer.
 */
49
inline uint8_t DatagramIterator::get_uint8(void);

995 10 peek_int16 0 4 1450 28 DatagramIterator::peek_int16 0 1 274 75
/**
 * Extracts a signed 16-bit integer without advancing the iterator.
 */
50
inline int16_t DatagramIterator::peek_int16(void);

996 11 peek_uint16 0 4 1450 29 DatagramIterator::peek_uint16 0 1 275 78
/**
 * Extracts an unsigned 16-bit integer without advancing the iterator.
 */
52
inline uint16_t DatagramIterator::peek_uint16(void);

997 9 get_int16 0 4 1450 27 DatagramIterator::get_int16 0 1 276 44
/**
 * Extracts a signed 16-bit integer.
 */
49
inline int16_t DatagramIterator::get_int16(void);

998 9 get_int32 0 4 1450 27 DatagramIterator::get_int32 0 1 277 44
/**
 * Extracts a signed 32-bit integer.
 */
49
inline int32_t DatagramIterator::get_int32(void);

999 9 get_int64 0 4 1450 27 DatagramIterator::get_int64 0 1 278 44
/**
 * Extracts a signed 64-bit integer.
 */
49
inline int64_t DatagramIterator::get_int64(void);

1000 10 get_uint16 0 4 1450 28 DatagramIterator::get_uint16 0 1 279 47
/**
 * Extracts an unsigned 16-bit integer.
 */
51
inline uint16_t DatagramIterator::get_uint16(void);

1001 10 get_uint32 0 4 1450 28 DatagramIterator::get_uint32 0 1 280 47
/**
 * Extracts an unsigned 32-bit integer.
 */
51
inline uint32_t DatagramIterator::get_uint32(void);

1002 10 get_uint64 0 4 1450 28 DatagramIterator::get_uint64 0 1 281 47
/**
 * Extracts an unsigned 64-bit integer.
 */
51
inline uint64_t DatagramIterator::get_uint64(void);

1003 11 get_float32 0 4 1450 29 DatagramIterator::get_float32 0 1 282 68
/**
 * Extracts a 32-bit single-precision floating-point number.
 */
54
inline PN_float32 DatagramIterator::get_float32(void);

1004 11 get_float64 0 4 1450 29 DatagramIterator::get_float64 0 1 283 51
/**
 * Extracts a 64-bit floating-point number.
 */
54
inline PN_float64 DatagramIterator::get_float64(void);

1005 12 get_stdfloat 0 4 1450 30 DatagramIterator::get_stdfloat 0 1 284 119
/**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */
56
inline PN_stdfloat DatagramIterator::get_stdfloat(void);

1006 12 get_be_int16 0 4 1450 30 DatagramIterator::get_be_int16 0 1 285 55
/**
 * Extracts a signed 16-bit big-endian integer.
 */
52
inline int16_t DatagramIterator::get_be_int16(void);

1007 12 get_be_int32 0 4 1450 30 DatagramIterator::get_be_int32 0 1 286 55
/**
 * Extracts a signed 32-bit big-endian integer.
 */
52
inline int32_t DatagramIterator::get_be_int32(void);

1008 12 get_be_int64 0 4 1450 30 DatagramIterator::get_be_int64 0 1 287 55
/**
 * Extracts a signed 64-bit big-endian integer.
 */
52
inline int64_t DatagramIterator::get_be_int64(void);

1009 13 get_be_uint16 0 4 1450 31 DatagramIterator::get_be_uint16 0 1 288 58
/**
 * Extracts an unsigned 16-bit big-endian integer.
 */
54
inline uint16_t DatagramIterator::get_be_uint16(void);

1010 13 get_be_uint32 0 4 1450 31 DatagramIterator::get_be_uint32 0 1 289 58
/**
 * Extracts an unsigned 32-bit big-endian integer.
 */
54
inline uint32_t DatagramIterator::get_be_uint32(void);

1011 13 get_be_uint64 0 4 1450 31 DatagramIterator::get_be_uint64 0 1 290 58
/**
 * Extracts an unsigned 64-bit big-endian integer.
 */
54
inline uint64_t DatagramIterator::get_be_uint64(void);

1012 14 get_be_float32 0 4 1450 32 DatagramIterator::get_be_float32 0 1 291 79
/**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */
57
inline PN_float32 DatagramIterator::get_be_float32(void);

1013 14 get_be_float64 0 4 1450 32 DatagramIterator::get_be_float64 0 1 292 62
/**
 * Extracts a 64-bit big-endian floating-point number.
 */
57
inline PN_float64 DatagramIterator::get_be_float64(void);

1014 10 get_string 0 4 1450 28 DatagramIterator::get_string 0 1 293 45
/**
 * Extracts a variable-length string.
 */
47
std::string DatagramIterator::get_string(void);

1015 12 get_string32 0 4 1450 30 DatagramIterator::get_string32 0 1 294 72
/**
 * Extracts a variable-length string with a 32-bit length field.
 */
49
std::string DatagramIterator::get_string32(void);

1016 12 get_z_string 0 4 1450 30 DatagramIterator::get_z_string 0 1 295 74
/**
 * Extracts a variable-length string, as a NULL-terminated string.
 */
49
std::string DatagramIterator::get_z_string(void);

1017 16 get_fixed_string 0 4 1450 34 DatagramIterator::get_fixed_string 0 1 296 128
/**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */
65
std::string DatagramIterator::get_fixed_string(std::size_t size);

1018 11 get_wstring 0 4 1450 29 DatagramIterator::get_wstring 0 1 297 75
/**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */
49
std::wstring DatagramIterator::get_wstring(void);

1019 8 get_blob 0 4 1450 26 DatagramIterator::get_blob 0 1 298 50
/**
 * Extracts a variable-length binary blob.
 */
53
inline vector_uchar DatagramIterator::get_blob(void);

1020 10 get_blob32 0 4 1450 28 DatagramIterator::get_blob32 0 1 299 75
/**
 * Extracts a variable-length binary blob with a 32-bit size field.
 */
55
inline vector_uchar DatagramIterator::get_blob32(void);

1021 10 skip_bytes 0 4 1450 28 DatagramIterator::skip_bytes 0 1 300 68
/**
 * Skips over the indicated number of bytes in the datagram.
 */
59
inline void DatagramIterator::skip_bytes(std::size_t size);

1022 13 extract_bytes 0 4 1450 31 DatagramIterator::extract_bytes 0 1 301 346
/**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */

/**
 * Extracts the indicated number of bytes in the datagram into the given
 * character buffer.  Assumes that the buffer is big enough to hold the
 * requested number of bytes.  Returns the number of bytes that were
 * successfully written.
 */
147
vector_uchar DatagramIterator::extract_bytes(std::size_t size);
std::size_t DatagramIterator::extract_bytes(unsigned char *into, std::size_t size);

1023 19 get_remaining_bytes 0 4 1450 37 DatagramIterator::get_remaining_bytes 0 1 302 115
/**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */
70
inline vector_uchar DatagramIterator::get_remaining_bytes(void) const;

1024 18 get_remaining_size 0 4 1450 36 DatagramIterator::get_remaining_size 0 1 303 49
/**
 * Return the bytes left in the datagram.
 */
68
inline std::size_t DatagramIterator::get_remaining_size(void) const;

1025 12 get_datagram 0 4 1450 30 DatagramIterator::get_datagram 0 1 304 48
/**
 * Return the datagram of this iterator.
 */
66
inline Datagram const &DatagramIterator::get_datagram(void) const;

1026 17 get_current_index 0 4 1450 35 DatagramIterator::get_current_index 0 1 305 100
/**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */
67
inline std::size_t DatagramIterator::get_current_index(void) const;

1027 6 output 0 4 1450 24 DatagramIterator::output 0 1 306 67
/**
 * Write a string representation of this instance to <out>.
 */
55
void DatagramIterator::output(std::ostream &out) const;

1028 5 write 0 4 1450 23 DatagramIterator::write 0 1 307 67
/**
 * Write a string representation of this instance to <out>.
 */
79
void DatagramIterator::write(std::ostream &out, unsigned int indent = 0) const;

1029 14 get_class_type 0 4 1450 32 DatagramIterator::get_class_type 0 1 308 0
57
static TypeHandle DatagramIterator::get_class_type(void);

1030 17 ~DatagramIterator 0 516 1450 35 DatagramIterator::~DatagramIterator 0 0 0
42
DatagramIterator::~DatagramIterator(void);

1031 13 ~DatagramSink 0 518 1451 27 DatagramSink::~DatagramSink 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
42
virtual DatagramSink::~DatagramSink(void);

1032 12 put_datagram 0 6 1451 26 DatagramSink::put_datagram 0 1 309 0
66
virtual bool DatagramSink::put_datagram(Datagram const &data) = 0;

1033 13 copy_datagram 0 6 1451 27 DatagramSink::copy_datagram 0 2 310 311 713
/**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */

/**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */
178
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, Filename const &filename);
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, SubfileInfo const &source);

1034 8 is_error 0 6 1451 22 DatagramSink::is_error 0 1 312 0
46
virtual bool DatagramSink::is_error(void) = 0;

1035 5 flush 0 6 1451 19 DatagramSink::flush 0 1 313 0
43
virtual void DatagramSink::flush(void) = 0;

1036 12 get_filename 0 6 1451 26 DatagramSink::get_filename 0 1 314 159
/**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */
57
virtual Filename const &DatagramSink::get_filename(void);

1037 8 get_file 0 6 1451 22 DatagramSink::get_file 0 1 315 152
/**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */
58
virtual FileReference const *DatagramSink::get_file(void);

1038 12 get_file_pos 0 6 1451 26 DatagramSink::get_file_pos 0 1 316 322
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */
56
virtual std::streamoff DatagramSink::get_file_pos(void);

1039 21 upcast_to_TypedObject 0 12 1457 42 TypedReferenceCount::upcast_to_TypedObject 0 1 322 46
upcast from TypedReferenceCount to TypedObject
62
TypedObject *TypedReferenceCount::upcast_to_TypedObject(void);

1040 31 downcast_to_TypedReferenceCount 0 12 1448 44 TypedObject::downcast_to_TypedReferenceCount 0 0 48
downcast from TypedObject to TypedReferenceCount
72
TypedReferenceCount *TypedObject::downcast_to_TypedReferenceCount(void);

1041 24 upcast_to_ReferenceCount 0 12 1457 45 TypedReferenceCount::upcast_to_ReferenceCount 0 1 323 49
upcast from TypedReferenceCount to ReferenceCount
68
ReferenceCount *TypedReferenceCount::upcast_to_ReferenceCount(void);

1042 31 downcast_to_TypedReferenceCount 0 12 1442 47 ReferenceCount::downcast_to_TypedReferenceCount 0 0 51
downcast from ReferenceCount to TypedReferenceCount
75
TypedReferenceCount *ReferenceCount::downcast_to_TypedReferenceCount(void);

1043 14 get_class_type 0 4 1457 35 TypedReferenceCount::get_class_type 0 1 321 0
60
static TypeHandle TypedReferenceCount::get_class_type(void);

1044 20 ~TypedReferenceCount 0 516 1457 41 TypedReferenceCount::~TypedReferenceCount 0 0 0
48
TypedReferenceCount::~TypedReferenceCount(void);

1045 13 FileReference 0 260 1456 28 FileReference::FileReference 0 2 317 318 10
/**
 *
 */
132
inline FileReference::FileReference(Filename const &filename);
inline FileReference::FileReference(FileReference const &) = default;

1046 12 get_filename 0 4 1456 27 FileReference::get_filename 0 1 319 49
/**
 * Returns the filename of the reference.
 */
63
inline Filename const &FileReference::get_filename(void) const;

1047 14 get_class_type 0 4 1456 29 FileReference::get_class_type 0 1 320 0
54
static TypeHandle FileReference::get_class_type(void);

1048 14 ~FileReference 0 516 1456 29 FileReference::~FileReference 0 0 0
36
FileReference::~FileReference(void);

1049 14 encrypt_string 0 1 0 14 encrypt_string 0 1 703 0
172
vector_uchar encrypt_string(std::string const &source, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

1050 14 decrypt_string 0 1 0 14 decrypt_string 0 1 704 0
84
std::string decrypt_string(vector_uchar const &source, std::string const &password);

1051 12 encrypt_file 0 1 0 12 encrypt_file 0 1 705 0
181
bool encrypt_file(Filename const &source, Filename const &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

1052 12 decrypt_file 0 1 0 12 decrypt_file 0 1 706 0
93
bool decrypt_file(Filename const &source, Filename const &dest, std::string const &password);

1053 14 encrypt_stream 0 1 0 14 encrypt_stream 0 1 707 0
179
bool encrypt_stream(std::istream &source, std::ostream &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

1054 14 decrypt_stream 0 1 0 14 decrypt_stream 0 1 708 0
91
bool decrypt_stream(std::istream &source, std::ostream &dest, std::string const &password);

1055 13 error_to_text 0 1 0 13 error_to_text 0 1 709 10
/**
 *
 */
45
std::string error_to_text(ErrorUtilCode err);

1056 15 get_write_error 0 1 0 15 get_write_error 0 1 710 0
26
int get_write_error(void);

1057 19 handle_socket_error 0 1 0 19 handle_socket_error 0 1 711 10
/**
 *
 */
38
std::string handle_socket_error(void);

1058 17 get_network_error 0 1 0 17 get_network_error 0 1 712 0
28
int get_network_error(void);

1059 7 Ramfile 0 260 1461 16 Ramfile::Ramfile 0 2 324 325 10
/**
 *
 */
82
inline Ramfile::Ramfile(void);
inline Ramfile::Ramfile(Ramfile const &) = default;

1060 4 seek 0 4 1461 13 Ramfile::seek 0 1 326 130
/**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */
43
inline void Ramfile::seek(std::size_t pos);

1061 4 tell 0 4 1461 13 Ramfile::tell 0 1 327 106
/**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */
45
inline std::size_t Ramfile::tell(void) const;

1062 4 read 0 4 1461 13 Ramfile::read 0 1 328 319
/**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */
44
PyObject *Ramfile::read(std::size_t length);

1063 8 readline 0 4 1461 17 Ramfile::readline 0 1 329 303
/**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */
34
PyObject *Ramfile::readline(void);

1064 9 readlines 0 4 1461 18 Ramfile::readlines 0 1 330 0
35
PyObject *Ramfile::readlines(void);

1065 8 get_data 0 4 1461 17 Ramfile::get_data 0 1 331 101
/**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */
40
PyObject *Ramfile::get_data(void) const;

1066 13 get_data_size 0 4 1461 22 Ramfile::get_data_size 0 1 332 58
/**
 * Returns the size of the entire buffer contents.
 */
54
inline std::size_t Ramfile::get_data_size(void) const;

1067 5 clear 0 4 1461 14 Ramfile::clear 0 1 333 47
/**
 * Empties the current buffer contents.
 */
33
inline void Ramfile::clear(void);

1068 12 __getstate__ 0 4 1461 21 Ramfile::__getstate__ 0 1 334 0
44
PyObject *Ramfile::__getstate__(void) const;

1069 12 __setstate__ 0 4 1461 21 Ramfile::__setstate__ 0 1 335 0
44
void Ramfile::__setstate__(PyObject *state);

1070 8 ~Ramfile 0 516 1461 17 Ramfile::~Ramfile 0 0 0
24
Ramfile::~Ramfile(void);

1071 7 HashVal 0 260 1462 16 HashVal::HashVal 0 2 336 337 22
/**
 *
 */

/**
 *
 */
76
inline HashVal::HashVal(void);
inline HashVal::HashVal(HashVal const &copy);

1072 10 operator = 0 4 1462 19 HashVal::operator = 0 1 338 0
53
inline void HashVal::operator =(HashVal const &copy);

1073 11 operator == 0 4 1462 20 HashVal::operator == 0 1 339 0
61
inline bool HashVal::operator ==(HashVal const &other) const;

1074 11 operator != 0 4 1462 20 HashVal::operator != 0 1 340 0
61
inline bool HashVal::operator !=(HashVal const &other) const;

1075 10 operator < 0 4 1462 19 HashVal::operator < 0 1 341 0
60
inline bool HashVal::operator <(HashVal const &other) const;

1076 10 compare_to 0 4 1462 19 HashVal::compare_to 0 1 342 10
/**
 *
 */
59
inline int HashVal::compare_to(HashVal const &other) const;

1077 10 merge_with 0 4 1462 19 HashVal::merge_with 0 1 343 86
/**
 * Generates a new HashVal representing the xor of this one and the other one.
 */
54
inline void HashVal::merge_with(HashVal const &other);

1078 10 output_dec 0 4 1462 19 HashVal::output_dec 0 1 344 65
/**
 * Outputs the HashVal as four unsigned decimal integers.
 */
57
inline void HashVal::output_dec(std::ostream &out) const;

1079 9 input_dec 0 4 1462 18 HashVal::input_dec 0 1 345 64
/**
 * Inputs the HashVal as four unsigned decimal integers.
 */
49
inline void HashVal::input_dec(std::istream &in);

1080 10 output_hex 0 4 1462 19 HashVal::output_hex 0 1 346 64
/**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */
50
void HashVal::output_hex(std::ostream &out) const;

1081 9 input_hex 0 4 1462 18 HashVal::input_hex 0 1 347 63
/**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */
42
void HashVal::input_hex(std::istream &in);

1082 13 output_binary 0 4 1462 22 HashVal::output_binary 0 1 348 128
/**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */
53
void HashVal::output_binary(std::ostream &out) const;

1083 12 input_binary 0 4 1462 21 HashVal::input_binary 0 1 349 125
/**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */
45
void HashVal::input_binary(std::istream &in);

1084 6 output 0 4 1462 15 HashVal::output 0 1 350 10
/**
 *
 */
53
inline void HashVal::output(std::ostream &out) const;

1085 6 as_dec 0 4 1462 15 HashVal::as_dec 0 1 351 69
/**
 * Returns the HashVal as a string with four decimal numbers.
 */
40
std::string HashVal::as_dec(void) const;

1086 12 set_from_dec 0 4 1462 21 HashVal::set_from_dec 0 1 352 112
/**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */
52
bool HashVal::set_from_dec(std::string const &text);

1087 6 as_hex 0 4 1462 15 HashVal::as_hex 0 1 353 63
/**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */
40
std::string HashVal::as_hex(void) const;

1088 12 set_from_hex 0 4 1462 21 HashVal::set_from_hex 0 1 354 111
/**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */
52
bool HashVal::set_from_hex(std::string const &text);

1089 6 as_bin 0 4 1462 15 HashVal::as_bin 0 1 355 58
/**
 * Returns the HashVal as a 16-byte binary string.
 */
41
vector_uchar HashVal::as_bin(void) const;

1090 12 set_from_bin 0 4 1462 21 HashVal::set_from_bin 0 1 356 106
/**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */
53
bool HashVal::set_from_bin(vector_uchar const &text);

1091 14 write_datagram 0 4 1462 23 HashVal::write_datagram 0 1 357 10
/**
 *
 */
65
inline void HashVal::write_datagram(Datagram &destination) const;

1092 13 read_datagram 0 4 1462 22 HashVal::read_datagram 0 1 358 10
/**
 *
 */
61
inline void HashVal::read_datagram(DatagramIterator &source);

1093 12 write_stream 0 4 1462 21 HashVal::write_stream 0 1 359 10
/**
 *
 */
67
inline void HashVal::write_stream(StreamWriter &destination) const;

1094 11 read_stream 0 4 1462 20 HashVal::read_stream 0 1 360 10
/**
 *
 */
55
inline void HashVal::read_stream(StreamReader &source);

1095 9 hash_file 0 4 1462 18 HashVal::hash_file 0 1 361 123
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.
 */
50
bool HashVal::hash_file(Filename const &filename);

1096 11 hash_stream 0 4 1462 20 HashVal::hash_stream 0 1 362 123
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.
 */
48
bool HashVal::hash_stream(std::istream &stream);

1097 12 hash_ramfile 0 4 1462 21 HashVal::hash_ramfile 0 1 363 66
/**
 * Generates the hash value by hashing the indicated data.
 */
58
inline void HashVal::hash_ramfile(Ramfile const &ramfile);

1098 11 hash_string 0 4 1462 20 HashVal::hash_string 0 1 364 66
/**
 * Generates the hash value by hashing the indicated data.
 */
58
inline void HashVal::hash_string(std::string const &data);

1099 10 hash_bytes 0 4 1462 19 HashVal::hash_bytes 0 1 365 66
/**
 * Generates the hash value by hashing the indicated data.
 */
58
inline void HashVal::hash_bytes(vector_uchar const &data);

1100 11 hash_buffer 0 4 1462 20 HashVal::hash_buffer 0 1 366 66
/**
 * Generates the hash value by hashing the indicated data.
 */
66
void HashVal::hash_buffer(char const *buffer, std::size_t length);

1101 8 ~HashVal 0 516 1462 17 HashVal::~HashVal 0 0 0
24
HashVal::~HashVal(void);

1102 19 MemoryUsagePointers 0 260 1463 40 MemoryUsagePointers::MemoryUsagePointers 0 2 367 368 10
/**
 *
 */
135
MemoryUsagePointers::MemoryUsagePointers(void);
inline MemoryUsagePointers::MemoryUsagePointers(MemoryUsagePointers const &) = default;

1103 20 ~MemoryUsagePointers 0 516 1463 41 MemoryUsagePointers::~MemoryUsagePointers 0 0 10
/**
 *
 */
48
MemoryUsagePointers::~MemoryUsagePointers(void);

1104 16 get_num_pointers 0 4 1463 37 MemoryUsagePointers::get_num_pointers 0 1 369 53
/**
 * Returns the number of pointers in the set.
 */
62
std::size_t MemoryUsagePointers::get_num_pointers(void) const;

1105 11 get_pointer 0 4 1463 32 MemoryUsagePointers::get_pointer 0 1 370 46
/**
 * Returns the nth pointer of the set.
 */
70
ReferenceCount *MemoryUsagePointers::get_pointer(std::size_t n) const;

1106 17 get_typed_pointer 0 4 1463 38 MemoryUsagePointers::get_typed_pointer 0 1 371 175
/**
 * Returns the nth pointer of the set, typecast to a TypedObject if possible.
 * If the pointer is not a TypedObject or if the cast cannot be made, returns
 * nullptr.
 */
73
TypedObject *MemoryUsagePointers::get_typed_pointer(std::size_t n) const;

1107 8 get_type 0 4 1463 29 MemoryUsagePointers::get_type 0 1 372 70
/**
 * Returns the actual type of the nth pointer, if it is known.
 */
62
TypeHandle MemoryUsagePointers::get_type(std::size_t n) const;

1108 13 get_type_name 0 4 1463 34 MemoryUsagePointers::get_type_name 0 1 373 68
/**
 * Returns the type name of the nth pointer, if it is known.
 */
68
std::string MemoryUsagePointers::get_type_name(std::size_t n) const;

1109 7 get_age 0 4 1463 28 MemoryUsagePointers::get_age 0 1 374 197
/**
 * Returns the age of the nth pointer: the number of seconds elapsed between
 * the time it was allocated and the time it was added to this set via a call
 * to MemoryUsage::get_pointers().
 */
57
double MemoryUsagePointers::get_age(std::size_t n) const;

1110 18 get_python_pointer 0 4 1463 39 MemoryUsagePointers::get_python_pointer 0 1 375 0
71
PyObject *MemoryUsagePointers::get_python_pointer(std::size_t n) const;

1111 5 clear 0 4 1463 26 MemoryUsagePointers::clear 0 1 376 39
/**
 * Empties the set of pointers.
 */
38
void MemoryUsagePointers::clear(void);

1112 6 output 0 4 1463 27 MemoryUsagePointers::output 0 1 377 10
/**
 *
 */
58
void MemoryUsagePointers::output(std::ostream &out) const;

1113 10 ISubStream 0 260 1464 22 ISubStream::ISubStream 0 2 378 379 22
/**
 *
 */

/**
 *
 */
142
inline ISubStream::ISubStream(void);
inline explicit ISubStream::ISubStream(IStreamWrapper *source, std::streamoff start, std::streamoff end);

1114 4 open 0 4 1464 16 ISubStream::open 0 1 380 391
/**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */
102
inline ISubStream &ISubStream::open(IStreamWrapper *source, std::streamoff start, std::streamoff end);

1115 5 close 0 4 1464 17 ISubStream::close 0 1 381 92
/**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */
43
inline ISubStream &ISubStream::close(void);

1116 11 ~ISubStream 0 516 1464 23 ISubStream::~ISubStream 0 0 0
30
ISubStream::~ISubStream(void);

1117 10 OSubStream 0 260 1466 22 OSubStream::OSubStream 0 2 382 383 22
/**
 *
 */

/**
 *
 */
161
inline OSubStream::OSubStream(void);
inline explicit OSubStream::OSubStream(OStreamWrapper *dest, std::streamoff start, std::streamoff end, bool append = false);

1118 4 open 0 4 1466 16 OSubStream::open 0 1 384 383
/**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */
121
inline OSubStream &OSubStream::open(OStreamWrapper *dest, std::streamoff start, std::streamoff end, bool append = false);

1119 5 close 0 4 1466 17 OSubStream::close 0 1 385 90
/**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */
43
inline OSubStream &OSubStream::close(void);

1120 11 ~OSubStream 0 516 1466 23 OSubStream::~OSubStream 0 0 0
30
OSubStream::~OSubStream(void);

1121 9 SubStream 0 260 1468 20 SubStream::SubStream 0 2 386 387 22
/**
 *
 */

/**
 *
 */
158
inline SubStream::SubStream(void);
inline explicit SubStream::SubStream(StreamWrapper *nested, std::streamoff start, std::streamoff end, bool append = false);

1122 4 open 0 4 1468 15 SubStream::open 0 1 388 278
/**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */
120
inline SubStream &SubStream::open(StreamWrapper *nested, std::streamoff start, std::streamoff end, bool append = false);

1123 5 close 0 4 1468 16 SubStream::close 0 1 389 92
/**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */
41
inline SubStream &SubStream::close(void);

1124 10 ~SubStream 0 516 1468 21 SubStream::~SubStream 0 0 0
28
SubStream::~SubStream(void);

1125 9 Multifile 0 260 1470 20 Multifile::Multifile 0 1 390 10
/**
 *
 */
27
Multifile::Multifile(void);

1126 9 open_read 0 4 1470 20 Multifile::open_read 0 2 391 392 687
/**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
214
bool Multifile::open_read(Filename const &multifile_name, std::streamoff const &offset = 0);
bool Multifile::open_read(IStreamWrapper *multifile_stream, bool owns_pointer = false, std::streamoff const &offset = 0);

1127 10 open_write 0 4 1470 21 Multifile::open_write 0 2 393 394 755
/**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
146
bool Multifile::open_write(Filename const &multifile_name);
bool Multifile::open_write(std::ostream *multifile_stream, bool owns_pointer = false);

1128 15 open_read_write 0 4 1470 26 Multifile::open_read_write 0 2 395 396 727
/**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
157
bool Multifile::open_read_write(Filename const &multifile_name);
bool Multifile::open_read_write(std::iostream *multifile_stream, bool owns_pointer = false);

1129 5 close 0 4 1470 16 Multifile::close 0 1 397 169
/**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */
28
void Multifile::close(void);

1130 18 get_multifile_name 0 4 1470 29 Multifile::get_multifile_name 0 1 398 69
/**
 * Returns the filename of the Multifile, if it is available.
 */
65
inline Filename const &Multifile::get_multifile_name(void) const;

1131 18 set_multifile_name 0 4 1470 29 Multifile::set_multifile_name 0 1 399 209
/**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */
74
inline void Multifile::set_multifile_name(Filename const &multifile_name);

1132 13 is_read_valid 0 4 1470 24 Multifile::is_read_valid 0 1 400 154
/**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */
49
inline bool Multifile::is_read_valid(void) const;

1133 14 is_write_valid 0 4 1470 25 Multifile::is_write_valid 0 1 401 162
/**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */
50
inline bool Multifile::is_write_valid(void) const;

1134 12 needs_repack 0 4 1470 23 Multifile::needs_repack 0 1 402 118
/**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */
48
inline bool Multifile::needs_repack(void) const;

1135 13 get_timestamp 0 4 1470 24 Multifile::get_timestamp 0 1 403 299
/**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */
51
inline time_t Multifile::get_timestamp(void) const;

1136 13 set_timestamp 0 4 1470 24 Multifile::set_timestamp 0 1 404 206
/**
 * Changes the overall modification timestamp of the multifile.  Note that this
 * will be reset to the current time every time you modify a subfile.
 * Only set this if you know what you are doing!
 */
55
inline void Multifile::set_timestamp(time_t timestamp);

1137 20 set_record_timestamp 0 4 1470 31 Multifile::set_record_timestamp 0 1 405 529
/**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */
67
inline void Multifile::set_record_timestamp(bool record_timestamp);

1138 20 get_record_timestamp 0 4 1470 31 Multifile::get_record_timestamp 0 1 406 137
/**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */
56
inline bool Multifile::get_record_timestamp(void) const;

1139 16 set_scale_factor 0 4 1470 27 Multifile::set_scale_factor 0 1 407 782
/**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */
59
void Multifile::set_scale_factor(std::size_t scale_factor);

1140 16 get_scale_factor 0 4 1470 27 Multifile::get_scale_factor 0 1 408 92
/**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */
59
inline std::size_t Multifile::get_scale_factor(void) const;

1141 19 set_encryption_flag 0 4 1470 30 Multifile::set_encryption_flag 0 1 409 461
/**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */
54
inline void Multifile::set_encryption_flag(bool flag);

1142 19 get_encryption_flag 0 4 1470 30 Multifile::get_encryption_flag 0 1 410 163
/**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */
55
inline bool Multifile::get_encryption_flag(void) const;

1143 24 set_encryption_algorithm 0 4 1470 35 Multifile::set_encryption_algorithm 0 1 411 659
/**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */
89
inline void Multifile::set_encryption_algorithm(std::string const &encryption_algorithm);

1144 24 get_encryption_algorithm 0 4 1470 35 Multifile::get_encryption_algorithm 0 1 412 96
/**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */
74
inline std::string const &Multifile::get_encryption_algorithm(void) const;

1145 25 set_encryption_key_length 0 4 1470 36 Multifile::set_encryption_key_length 0 1 413 611
/**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */
76
inline void Multifile::set_encryption_key_length(int encryption_key_length);

1146 25 get_encryption_key_length 0 4 1470 36 Multifile::get_encryption_key_length 0 1 414 108
/**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */
60
inline int Multifile::get_encryption_key_length(void) const;

1147 30 set_encryption_iteration_count 0 4 1470 41 Multifile::set_encryption_iteration_count 0 1 415 740
/**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */
86
inline void Multifile::set_encryption_iteration_count(int encryption_iteration_count);

1148 30 get_encryption_iteration_count 0 4 1470 41 Multifile::get_encryption_iteration_count 0 1 416 84
/**
 * Returns the value that was specified by set_encryption_iteration_count().
 */
65
inline int Multifile::get_encryption_iteration_count(void) const;

1149 11 add_subfile 0 4 1470 22 Multifile::add_subfile 0 2 417 418 1397
/**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */

/**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */
237
std::string Multifile::add_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);
std::string Multifile::add_subfile(std::string const &subfile_name, std::istream *subfile_data, int compression_level);

1150 14 update_subfile 0 4 1470 25 Multifile::update_subfile 0 1 419 451
/**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */
120
std::string Multifile::update_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);

1151 23 set_encryption_password 0 4 1470 34 Multifile::set_encryption_password 0 1 420 369
/**
 * Specifies the password that will be used to encrypt subfiles subsequently
 * added to the multifile, if the encryption flag is also set true (see
 * set_encryption_flag()).
 *
 * It is possible to apply a different password to different files, but the
 * resulting file can't be mounted via VFS.  Changing this value may cause an
 * implicit call to flush().
 */
89
inline PyObject *Multifile::set_encryption_password(PyObject *encryption_password) const;

1152 23 get_encryption_password 0 4 1470 34 Multifile::get_encryption_password 0 1 421 141
/**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */
64
inline PyObject *Multifile::get_encryption_password(void) const;

1153 13 add_signature 0 4 1470 24 Multifile::add_signature 0 2 422 423 3062
/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The signature certificate is the first certificate on the CertChain object.
 * Any remaining certificates are support certificates to authenticate the
 * first one.
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 */
230
bool Multifile::add_signature(Filename const &certificate, Filename const &chain, Filename const &pkey, std::string const &password = "");
bool Multifile::add_signature(Filename const &composite, std::string const &password = "");

1154 18 get_num_signatures 0 4 1470 29 Multifile::get_num_signatures 0 1 424 555
/**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */
46
int Multifile::get_num_signatures(void) const;

1155 26 get_signature_subject_name 0 4 1470 37 Multifile::get_signature_subject_name 0 1 425 352
/**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */
63
std::string Multifile::get_signature_subject_name(int n) const;

1156 27 get_signature_friendly_name 0 4 1470 38 Multifile::get_signature_friendly_name 0 1 426 299
/**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */
64
std::string Multifile::get_signature_friendly_name(int n) const;

1157 24 get_signature_public_key 0 4 1470 35 Multifile::get_signature_public_key 0 1 427 379
/**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */
61
std::string Multifile::get_signature_public_key(int n) const;

1158 27 print_signature_certificate 0 4 1470 38 Multifile::print_signature_certificate 0 1 428 158
/**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */
76
void Multifile::print_signature_certificate(int n, std::ostream &out) const;

1159 27 write_signature_certificate 0 4 1470 38 Multifile::write_signature_certificate 0 1 429 140
/**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */
76
void Multifile::write_signature_certificate(int n, std::ostream &out) const;

1160 30 validate_signature_certificate 0 4 1470 41 Multifile::validate_signature_certificate 0 1 430 289
/**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */
59
int Multifile::validate_signature_certificate(int n) const;

1161 5 flush 0 4 1470 16 Multifile::flush 0 1 431 691
/**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */
28
bool Multifile::flush(void);

1162 6 repack 0 4 1470 17 Multifile::repack 0 1 432 587
/**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */
29
bool Multifile::repack(void);

1163 16 get_num_subfiles 0 4 1470 27 Multifile::get_num_subfiles 0 1 433 169
/**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */
44
int Multifile::get_num_subfiles(void) const;

1164 12 find_subfile 0 4 1470 23 Multifile::find_subfile 0 1 434 127
/**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */
67
int Multifile::find_subfile(std::string const &subfile_name) const;

1165 13 has_directory 0 4 1470 24 Multifile::has_directory 0 1 435 203
/**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */
69
bool Multifile::has_directory(std::string const &subfile_name) const;

1166 14 scan_directory 0 4 1470 25 Multifile::scan_directory 0 1 436 420
/**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */
95
bool Multifile::scan_directory(vector_string &contents, std::string const &subfile_name) const;

1167 14 remove_subfile 0 4 1470 25 Multifile::remove_subfile 0 2 437 438 912
/**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */

/**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */
114
void Multifile::remove_subfile(int index);
inline bool Multifile::remove_subfile(std::string const &subfile_name);

1168 16 get_subfile_name 0 4 1470 27 Multifile::get_subfile_name 0 1 439 47
/**
 * Returns the name of the nth subfile.
 */
64
std::string const &Multifile::get_subfile_name(int index) const;

1169 18 get_subfile_length 0 4 1470 29 Multifile::get_subfile_length 0 1 440 170
/**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */
59
std::size_t Multifile::get_subfile_length(int index) const;

1170 21 get_subfile_timestamp 0 4 1470 32 Multifile::get_subfile_timestamp 0 1 441 270
/**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */
57
time_t Multifile::get_subfile_timestamp(int index) const;

1171 21 is_subfile_compressed 0 4 1470 32 Multifile::is_subfile_compressed 0 1 442 120
/**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */
55
bool Multifile::is_subfile_compressed(int index) const;

1172 20 is_subfile_encrypted 0 4 1470 31 Multifile::is_subfile_encrypted 0 1 443 119
/**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */
54
bool Multifile::is_subfile_encrypted(int index) const;

1173 15 is_subfile_text 0 4 1470 26 Multifile::is_subfile_text 0 1 444 343
/**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */
49
bool Multifile::is_subfile_text(int index) const;

1174 13 get_index_end 0 4 1470 24 Multifile::get_index_end 0 1 445 371
/**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */
52
std::streamoff Multifile::get_index_end(void) const;

1175 26 get_subfile_internal_start 0 4 1470 37 Multifile::get_subfile_internal_start 0 1 446 338
/**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */
70
std::streamoff Multifile::get_subfile_internal_start(int index) const;

1176 27 get_subfile_internal_length 0 4 1470 38 Multifile::get_subfile_internal_length 0 1 447 322
/**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */
68
std::size_t Multifile::get_subfile_internal_length(int index) const;

1177 12 read_subfile 0 4 1470 23 Multifile::read_subfile 0 1 448 253
/**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */

/**
 * Fills a string with the entire contents of the indicated subfile.
 */

/**
 * Fills a pvector with the entire contents of the indicated subfile.
 */
55
inline vector_uchar Multifile::read_subfile(int index);

1178 17 open_read_subfile 0 4 1470 28 Multifile::open_read_subfile 0 1 449 937
/**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */

/**
 * This variant of open_read_subfile() is used internally only, and accepts a
 * pointer to the internal Subfile object, which is assumed to be valid and
 * written to the multifile.
 */
54
std::istream *Multifile::open_read_subfile(int index);

1179 18 close_read_subfile 0 4 1470 29 Multifile::close_read_subfile 0 1 450 246
/**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
64
static void Multifile::close_read_subfile(std::istream *stream);

1180 15 extract_subfile 0 4 1470 26 Multifile::extract_subfile 0 1 451 68
/**
 * Extracts the nth subfile into a file with the given name.
 */
69
bool Multifile::extract_subfile(int index, Filename const &filename);

1181 18 extract_subfile_to 0 4 1470 29 Multifile::extract_subfile_to 0 1 452 61
/**
 * Extracts the nth subfile to the indicated ostream.
 */
65
bool Multifile::extract_subfile_to(int index, std::ostream &out);

1182 15 compare_subfile 0 4 1470 26 Multifile::compare_subfile 0 1 453 509
/**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */
69
bool Multifile::compare_subfile(int index, Filename const &filename);

1183 6 output 0 4 1470 17 Multifile::output 0 1 454 10
/**
 *
 */
48
void Multifile::output(std::ostream &out) const;

1184 2 ls 0 4 1470 13 Multifile::ls 0 1 455 61
/**
 * Shows a list of all subfiles within the Multifile.
 */
58
void Multifile::ls(std::ostream &out = ::std::cout) const;

1185 16 get_magic_number 0 4 1470 27 Multifile::get_magic_number 0 1 456 108
/**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */
60
static inline std::string Multifile::get_magic_number(void);

1186 17 set_header_prefix 0 4 1470 28 Multifile::set_header_prefix 0 1 457 644
/**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */
68
void Multifile::set_header_prefix(std::string const &header_prefix);

1187 17 get_header_prefix 0 4 1470 28 Multifile::get_header_prefix 0 1 458 113
/**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */
67
inline std::string const &Multifile::get_header_prefix(void) const;

1188 7 Namable 0 260 1473 16 Namable::Namable 0 2 459 460 10
/**
 *
 */
123
inline explicit Namable::Namable(std::string const &initial_name = "");
inline Namable::Namable(Namable const &) = default;

1189 8 set_name 0 4 1473 17 Namable::set_name 0 1 461 10
/**
 *
 */
55
inline void Namable::set_name(std::string const &name);

1190 10 clear_name 0 4 1473 19 Namable::clear_name 0 1 462 46
/**
 * Resets the Namable's name to empty.
 */
38
inline void Namable::clear_name(void);

1191 8 has_name 0 4 1473 17 Namable::has_name 0 1 463 94
/**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */
42
inline bool Namable::has_name(void) const;

1192 8 get_name 0 4 1473 17 Namable::get_name 0 1 464 10
/**
 *
 */
56
inline std::string const &Namable::get_name(void) const;

1193 6 output 0 4 1473 15 Namable::output 0 1 465 251
// In the absence of any definition to the contrary, outputting a Namable
// will write out its name.

/**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */
53
inline void Namable::output(std::ostream &out) const;

1194 14 get_class_type 0 4 1473 23 Namable::get_class_type 0 1 466 0
48
static TypeHandle Namable::get_class_type(void);

1195 8 ~Namable 0 516 1473 17 Namable::~Namable 0 0 0
24
Namable::~Namable(void);

1196 18 clear_certificates 0 4 1475 34 OpenSSLWrapper::clear_certificates 0 1 467 200
/**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */
46
void OpenSSLWrapper::clear_certificates(void);

1197 17 load_certificates 0 4 1475 33 OpenSSLWrapper::load_certificates 0 1 468 436
/**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
64
int OpenSSLWrapper::load_certificates(Filename const &filename);

1198 30 load_certificates_from_pem_ram 0 4 1475 46 OpenSSLWrapper::load_certificates_from_pem_ram 0 2 469 470 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_pem_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_pem_ram(std::string const &data);

1199 30 load_certificates_from_der_ram 0 4 1475 46 OpenSSLWrapper::load_certificates_from_der_ram 0 2 471 472 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_der_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_der_ram(std::string const &data);

1200 14 get_x509_store 0 4 1475 30 OpenSSLWrapper::get_x509_store 0 1 473 378
/**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */
49
X509_STORE *OpenSSLWrapper::get_x509_store(void);

1201 17 notify_ssl_errors 0 4 1475 33 OpenSSLWrapper::notify_ssl_errors 0 1 474 277
/**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */
45
void OpenSSLWrapper::notify_ssl_errors(void);

1202 23 notify_debug_ssl_errors 0 4 1475 39 OpenSSLWrapper::notify_debug_ssl_errors 0 1 475 84
/**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */
51
void OpenSSLWrapper::notify_debug_ssl_errors(void);

1203 14 get_global_ptr 0 4 1475 30 OpenSSLWrapper::get_global_ptr 0 1 476 10
/**
 *
 */
60
static OpenSSLWrapper *OpenSSLWrapper::get_global_ptr(void);

1204 11 SubfileInfo 0 260 1476 24 SubfileInfo::SubfileInfo 0 4 477 478 479 480 46
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
321
inline SubfileInfo::SubfileInfo(void);
inline explicit SubfileInfo::SubfileInfo(FileReference const *file, std::streamoff start, std::streamsize size);
inline explicit SubfileInfo::SubfileInfo(Filename const &filename, std::streamoff start, std::streamsize size);
inline SubfileInfo::SubfileInfo(SubfileInfo const &copy);

1205 10 operator = 0 4 1476 23 SubfileInfo::operator = 0 1 481 0
61
inline void SubfileInfo::operator =(SubfileInfo const &copy);

1206 8 is_empty 0 4 1476 21 SubfileInfo::is_empty 0 1 482 98
/**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */
46
inline bool SubfileInfo::is_empty(void) const;

1207 8 get_file 0 4 1476 21 SubfileInfo::get_file 0 1 483 63
/**
 * Returns the FileReference that represents this file.
 */
62
inline FileReference const *SubfileInfo::get_file(void) const;

1208 12 get_filename 0 4 1476 25 SubfileInfo::get_filename 0 1 484 38
/**
 * A shortcut to the filename.
 */
61
inline Filename const &SubfileInfo::get_filename(void) const;

1209 9 get_start 0 4 1476 22 SubfileInfo::get_start 0 1 485 77
/**
 * Returns the offset within the file at which this file data begins.
 */
57
inline std::streamoff SubfileInfo::get_start(void) const;

1210 8 get_size 0 4 1476 21 SubfileInfo::get_size 0 1 486 115
/**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */
57
inline std::streamsize SubfileInfo::get_size(void) const;

1211 6 output 0 4 1476 19 SubfileInfo::output 0 1 487 10
/**
 *
 */
50
void SubfileInfo::output(std::ostream &out) const;

1212 12 ~SubfileInfo 0 516 1476 25 SubfileInfo::~SubfileInfo 0 0 0
32
SubfileInfo::~SubfileInfo(void);

1213 15 get_file_system 0 6 1477 28 VirtualFile::get_file_system 0 1 488 0
72
virtual VirtualFileSystem *VirtualFile::get_file_system(void) const = 0;

1214 12 get_filename 0 6 1477 25 VirtualFile::get_filename 0 1 489 0
59
virtual Filename VirtualFile::get_filename(void) const = 0;

1215 21 get_original_filename 0 4 1477 34 VirtualFile::get_original_filename 0 1 490 166
/**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */
70
inline Filename const &VirtualFile::get_original_filename(void) const;

1216 8 has_file 0 6 1477 21 VirtualFile::has_file 0 1 491 61
/**
 * Returns true if this file exists, false otherwise.
 */
47
virtual bool VirtualFile::has_file(void) const;

1217 12 is_directory 0 6 1477 25 VirtualFile::is_directory 0 1 492 117
/**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */
51
virtual bool VirtualFile::is_directory(void) const;

1218 15 is_regular_file 0 6 1477 28 VirtualFile::is_regular_file 0 1 493 115
/**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */
54
virtual bool VirtualFile::is_regular_file(void) const;

1219 11 is_writable 0 6 1477 24 VirtualFile::is_writable 0 1 494 153
/**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */
50
virtual bool VirtualFile::is_writable(void) const;

1220 11 delete_file 0 6 1477 24 VirtualFile::delete_file 0 1 495 199
/**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */
44
virtual bool VirtualFile::delete_file(void);

1221 11 rename_file 0 6 1477 24 VirtualFile::rename_file 0 1 496 589
/**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
61
virtual bool VirtualFile::rename_file(VirtualFile *new_file);

1222 9 copy_file 0 6 1477 22 VirtualFile::copy_file 0 1 497 123
/**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */
59
virtual bool VirtualFile::copy_file(VirtualFile *new_file);

1223 14 scan_directory 0 4 1477 27 VirtualFile::scan_directory 0 1 498 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
69
PointerTo< VirtualFileList > VirtualFile::scan_directory(void) const;

1224 6 output 0 4 1477 19 VirtualFile::output 0 1 499 10
/**
 *
 */
50
void VirtualFile::output(std::ostream &out) const;

1225 2 ls 0 4 1477 15 VirtualFile::ls 0 1 500 66
/**
 * If the file represents a directory, lists its contents.
 */
60
void VirtualFile::ls(std::ostream &out = ::std::cout) const;

1226 6 ls_all 0 4 1477 19 VirtualFile::ls_all 0 1 501 113
/**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */
64
void VirtualFile::ls_all(std::ostream &out = ::std::cout) const;

1227 9 read_file 0 4 1477 22 VirtualFile::read_file 0 1 502 352
/**
 * Returns the entire contents of the file as a string.
 */

/**
 * Fills up the indicated string with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */

/**
 * Fills up the indicated pvector with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */
57
PyObject *VirtualFile::read_file(bool auto_unwrap) const;

1228 14 open_read_file 0 6 1477 27 VirtualFile::open_read_file 0 1 503 179
/**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */
74
virtual std::istream *VirtualFile::open_read_file(bool auto_unwrap) const;

1229 15 close_read_file 0 6 1477 28 VirtualFile::close_read_file 0 1 504 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
70
virtual void VirtualFile::close_read_file(std::istream *stream) const;

1230 19 was_read_successful 0 6 1477 32 VirtualFile::was_read_successful 0 1 505 324
/**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */
58
virtual bool VirtualFile::was_read_successful(void) const;

1231 10 write_file 0 4 1477 23 VirtualFile::write_file 0 1 506 197
/**
 * Writes the entire contents of the file as a string, if it is writable.
 */

/**
 * Writes the indicated data to the file, if it is writable.  Returns true on
 * success, false otherwise.
 */
66
PyObject *VirtualFile::write_file(PyObject *data, bool auto_wrap);

1232 15 open_write_file 0 6 1477 28 VirtualFile::open_write_file 0 1 507 179
/**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
82
virtual std::ostream *VirtualFile::open_write_file(bool auto_wrap, bool truncate);

1233 16 open_append_file 0 6 1477 29 VirtualFile::open_append_file 0 1 508 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
58
virtual std::ostream *VirtualFile::open_append_file(void);

1234 16 close_write_file 0 6 1477 29 VirtualFile::close_write_file 0 1 509 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
65
virtual void VirtualFile::close_write_file(std::ostream *stream);

1235 20 open_read_write_file 0 6 1477 33 VirtualFile::open_read_write_file 0 1 510 180
/**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
72
virtual std::iostream *VirtualFile::open_read_write_file(bool truncate);

1236 21 open_read_append_file 0 6 1477 34 VirtualFile::open_read_append_file 0 1 511 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
64
virtual std::iostream *VirtualFile::open_read_append_file(void);

1237 21 close_read_write_file 0 6 1477 34 VirtualFile::close_read_write_file 0 1 512 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
71
virtual void VirtualFile::close_read_write_file(std::iostream *stream);

1238 13 get_file_size 0 6 1477 26 VirtualFile::get_file_size 0 2 513 514 329
/**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */

/**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */
143
virtual std::streamsize VirtualFile::get_file_size(std::istream *stream) const;
virtual std::streamsize VirtualFile::get_file_size(void) const;

1239 13 get_timestamp 0 6 1477 26 VirtualFile::get_timestamp 0 1 515 434
/**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */
54
virtual time_t VirtualFile::get_timestamp(void) const;

1240 15 get_system_info 0 6 1477 28 VirtualFile::get_system_info 0 1 516 330
/**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */
61
virtual bool VirtualFile::get_system_info(SubfileInfo &info);

1241 14 get_class_type 0 4 1477 27 VirtualFile::get_class_type 0 1 517 0
52
static TypeHandle VirtualFile::get_class_type(void);

1242 12 ~VirtualFile 0 516 1477 25 VirtualFile::~VirtualFile 0 0 0
32
VirtualFile::~VirtualFile(void);

1243 14 get_class_type 0 4 1478 36 VirtualFileComposite::get_class_type 0 1 518 0
61
static TypeHandle VirtualFileComposite::get_class_type(void);

1244 21 ~VirtualFileComposite 0 516 1478 43 VirtualFileComposite::~VirtualFileComposite 0 0 0
50
VirtualFileComposite::~VirtualFileComposite(void);

1245 15 get_file_system 0 4 1479 33 VirtualFileMount::get_file_system 0 1 519 68
/**
 * Returns the file system this mount object is attached to.
 */
72
inline VirtualFileSystem *VirtualFileMount::get_file_system(void) const;

1246 15 get_mount_point 0 4 1479 33 VirtualFileMount::get_mount_point 0 1 520 161
/**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */
69
inline Filename const &VirtualFileMount::get_mount_point(void) const;

1247 15 get_mount_flags 0 4 1479 33 VirtualFileMount::get_mount_flags 0 1 521 100
/**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */
57
inline int VirtualFileMount::get_mount_flags(void) const;

1248 6 output 0 6 1479 24 VirtualFileMount::output 0 1 522 10
/**
 *
 */
63
virtual void VirtualFileMount::output(std::ostream &out) const;

1249 5 write 0 6 1479 23 VirtualFileMount::write 0 1 523 10
/**
 *
 */
62
virtual void VirtualFileMount::write(std::ostream &out) const;

1250 14 get_class_type 0 4 1479 32 VirtualFileMount::get_class_type 0 1 524 0
57
static TypeHandle VirtualFileMount::get_class_type(void);

1251 25 VirtualFileMountMultifile 0 260 1480 52 VirtualFileMountMultifile::VirtualFileMountMultifile 0 1 525 10
/**
 *
 */
82
inline VirtualFileMountMultifile::VirtualFileMountMultifile(Multifile *multifile);

1252 13 get_multifile 0 4 1480 40 VirtualFileMountMultifile::get_multifile 0 1 526 76
/**
 * Returns the Multifile pointer that this mount object is based on.
 */
71
inline Multifile *VirtualFileMountMultifile::get_multifile(void) const;

1253 14 get_class_type 0 4 1480 41 VirtualFileMountMultifile::get_class_type 0 1 527 0
66
static TypeHandle VirtualFileMountMultifile::get_class_type(void);

1254 23 VirtualFileMountRamdisk 0 260 1481 48 VirtualFileMountRamdisk::VirtualFileMountRamdisk 0 1 528 10
/**
 *
 */
55
VirtualFileMountRamdisk::VirtualFileMountRamdisk(void);

1255 14 get_class_type 0 4 1481 39 VirtualFileMountRamdisk::get_class_type 0 1 529 0
64
static TypeHandle VirtualFileMountRamdisk::get_class_type(void);

1256 24 ~VirtualFileMountRamdisk 0 516 1481 49 VirtualFileMountRamdisk::~VirtualFileMountRamdisk 0 0 0
56
VirtualFileMountRamdisk::~VirtualFileMountRamdisk(void);

1257 22 VirtualFileMountSystem 0 260 1482 46 VirtualFileMountSystem::VirtualFileMountSystem 0 1 530 10
/**
 *
 */
89
inline VirtualFileMountSystem::VirtualFileMountSystem(Filename const &physical_filename);

1258 21 get_physical_filename 0 4 1482 45 VirtualFileMountSystem::get_physical_filename 0 1 531 112
/**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */
81
inline Filename const &VirtualFileMountSystem::get_physical_filename(void) const;

1259 14 get_class_type 0 4 1482 38 VirtualFileMountSystem::get_class_type 0 1 532 0
63
static TypeHandle VirtualFileMountSystem::get_class_type(void);

1260 23 ~VirtualFileMountSystem 0 516 1482 47 VirtualFileMountSystem::~VirtualFileMountSystem 0 0 0
54
VirtualFileMountSystem::~VirtualFileMountSystem(void);

1261 10 ZipArchive 0 260 1483 22 ZipArchive::ZipArchive 0 1 533 10
/**
 *
 */
29
ZipArchive::ZipArchive(void);

1262 9 open_read 0 4 1483 21 ZipArchive::open_read 0 2 534 535 731
/**
 * Opens the named ZipArchive on disk for reading.  The ZipArchive index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */

/**
 * Opens an anonymous ZipArchive for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 *
 * The given stream must be seekable.
 */
132
bool ZipArchive::open_read(Filename const &filename);
bool ZipArchive::open_read(IStreamWrapper *stream, bool owns_pointer = false);

1263 10 open_write 0 4 1483 22 ZipArchive::open_write 0 2 536 537 681
/**
 * Opens the named ZipArchive on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The ZipArchive is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */

/**
 * Opens an anonymous ZipArchive for writing using an ostream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 */
132
bool ZipArchive::open_write(Filename const &filename);
bool ZipArchive::open_write(std::ostream *stream, bool owns_pointer = false);

1264 15 open_read_write 0 4 1483 27 ZipArchive::open_read_write 0 2 538 539 729
/**
 * Opens the named ZipArchive on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */

/**
 * Opens an anonymous ZipArchive for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 */
143
bool ZipArchive::open_read_write(Filename const &filename);
bool ZipArchive::open_read_write(std::iostream *stream, bool owns_pointer = false);

1265 6 verify 0 4 1483 18 ZipArchive::verify 0 1 540 69
/**
 * Verifies the integrity of the contents of the ZIP archive.
 */
30
bool ZipArchive::verify(void);

1266 5 close 0 4 1483 17 ZipArchive::close 0 1 541 170
/**
 * Closes the ZipArchive if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */
29
void ZipArchive::close(void);

1267 12 get_filename 0 4 1483 24 ZipArchive::get_filename 0 1 542 70
/**
 * Returns the filename of the ZipArchive, if it is available.
 */
60
inline Filename const &ZipArchive::get_filename(void) const;

1268 12 set_filename 0 4 1483 24 ZipArchive::set_filename 0 1 543 210
/**
 * Replaces the filename of the ZipArchive.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */
63
inline void ZipArchive::set_filename(Filename const &filename);

1269 13 is_read_valid 0 4 1483 25 ZipArchive::is_read_valid 0 1 544 155
/**
 * Returns true if the ZipArchive has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */
50
inline bool ZipArchive::is_read_valid(void) const;

1270 14 is_write_valid 0 4 1483 26 ZipArchive::is_write_valid 0 1 545 164
/**
 * Returns true if the ZipArchive has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the ZipArchive.
 */
51
inline bool ZipArchive::is_write_valid(void) const;

1271 12 needs_repack 0 4 1483 24 ZipArchive::needs_repack 0 1 546 150
/**
 * Returns true if the ZipArchive index is suboptimal and should be repacked.
 * Call repack() to achieve this.  It is not done automatically.
 */
49
inline bool ZipArchive::needs_repack(void) const;

1272 20 set_record_timestamp 0 4 1483 32 ZipArchive::set_record_timestamp 0 1 547 488
/**
 * Sets the flag indicating whether timestamps should be recorded within the
 * ZipArchive or not.  The default is true, indicating the ZipArchive will
 * record timestamps for each subfile that is added.
 *
 * If this is false, the ZipArchive will not record timestamps internally.  In
 * this case, the return value from get_subfile_timestamp() will be zero.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated ZipArchives.
 */
68
inline void ZipArchive::set_record_timestamp(bool record_timestamp);

1273 20 get_record_timestamp 0 4 1483 32 ZipArchive::get_record_timestamp 0 1 548 138
/**
 * Returns the flag indicating whether timestamps should be recorded within
 * the ZipArchive or not.  See set_record_timestamp().
 */
57
inline bool ZipArchive::get_record_timestamp(void) const;

1274 11 add_subfile 0 4 1483 23 ZipArchive::add_subfile 0 2 549 550 956
/**
 * Adds a file on disk as a subfile to the ZipArchive.  The file named by
 * filename will be read and added to the ZipArchive immediately, but the index
 * will not be updated until you call flush().  If there already exists a
 * subfile with the indicated name, it is replaced without examining its
 * contents (but see also update_subfile).
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */

/**
 * Adds a file from a stream as a subfile to the ZipArchive.  The indicated
 * istream will be read and its contents added to the end of the current ZIP
 * file immediately.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the index of the ZIP archive will be
 * rewritten to the end of the file.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */
239
std::string ZipArchive::add_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);
std::string ZipArchive::add_subfile(std::string const &subfile_name, std::istream *subfile_data, int compression_level);

1275 14 update_subfile 0 4 1483 26 ZipArchive::update_subfile 0 1 551 450
/**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the ZIP file is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */
121
std::string ZipArchive::update_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);

1276 17 add_jar_signature 0 4 1483 29 ZipArchive::add_jar_signature 0 1 552 1351
/**
 * Adds a new JAR-style signature to the .zip file.  The file must have been
 * opened in read/write mode.
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_jar_signature() reads the certificate and private key
 * from a PEM-formatted file, for instance as generated by the openssl command.
 * If the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 *
 * It's possible to add multiple signatures, by providing multiple unique
 * aliases.  Note that aliases are considered case-insensitively and only the
 * first 8 characters are considered.
 *
 * There is no separate parameter to pass a certificate chain.  Instead, any
 * necessary certificates are expected to be in the certificate file.
 */

/**
 * Adds a new JAR-style signature to the .zip file.  The file must have been
 * opened in read/write mode.
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * It's possible to add multiple signatures, by providing multiple unique
 * aliases.  Note that aliases are considered case-insensitively and only the
 * first 8 characters are considered.
 *
 * The private key is expected to match the first certificate in the chain.
 */
155
bool ZipArchive::add_jar_signature(Filename const &certificate, Filename const &pkey, std::string const &password = "", std::string const &alias = "cert");

1277 5 flush 0 4 1483 17 ZipArchive::flush 0 1 553 596
/**
 * Ensures that any changes made to the ZIP archive have been synchronized to
 * disk.  In particular, this causes the central directory to be rewritten at
 * the end of the file.
 *
 * This may result in a suboptimal packing in the ZIP file, especially if
 * existing files were changed or files were removed.  To guarantee that the
 * file is as compact as it can be, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */
29
bool ZipArchive::flush(void);

1278 6 repack 0 4 1483 18 ZipArchive::repack 0 1 554 515
/**
 * Forces a complete rewrite of the ZipArchive and all of its contents, so that
 * the files are tightly packed in the file without any gaps.  This is useful to
 * do after removing files, to ensure that the file size is minimized.
 *
 * It is only valid to call this if the ZipArchive was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the ZipArchive.
 *
 * Returns true on success, false on failure.
 */
30
bool ZipArchive::repack(void);

1279 16 get_num_subfiles 0 4 1483 28 ZipArchive::get_num_subfiles 0 1 555 170
/**
 * Returns the number of subfiles within the ZipArchive.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */
45
int ZipArchive::get_num_subfiles(void) const;

1280 12 find_subfile 0 4 1483 24 ZipArchive::find_subfile 0 1 556 128
/**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the ZipArchive.
 */
68
int ZipArchive::find_subfile(std::string const &subfile_name) const;

1281 13 has_directory 0 4 1483 25 ZipArchive::has_directory 0 1 557 205
/**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the ZipArchive.  That is, the ZipArchive contains at
 * least one file named "subfile_name/...".
 */
70
bool ZipArchive::has_directory(std::string const &subfile_name) const;

1282 14 scan_directory 0 4 1483 26 ZipArchive::scan_directory 0 1 558 422
/**
 * Considers subfile_name to be the name of a subdirectory within the
 * ZipArchive, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a ZipArchive; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */
96
bool ZipArchive::scan_directory(vector_string &contents, std::string const &subfile_name) const;

1283 14 remove_subfile 0 4 1483 26 ZipArchive::remove_subfile 0 2 559 560 916
/**
 * Removes the named subfile from the ZipArchive, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The ZipArchive will not be
 * reduced in size after this operation, until the next call to repack().
 */

/**
 * Removes the nth subfile from the ZipArchive.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The ZipArchive will not be
 * reduced in size after this operation, until the next call to repack().
 */
116
void ZipArchive::remove_subfile(int index);
inline bool ZipArchive::remove_subfile(std::string const &subfile_name);

1284 16 get_subfile_name 0 4 1483 28 ZipArchive::get_subfile_name 0 1 561 47
/**
 * Returns the name of the nth subfile.
 */
65
std::string const &ZipArchive::get_subfile_name(int index) const;

1285 18 get_subfile_length 0 4 1483 30 ZipArchive::get_subfile_length 0 1 562 67
/**
 * Returns the uncompressed data length of the nth subfile.
 */
60
std::size_t ZipArchive::get_subfile_length(int index) const;

1286 21 get_subfile_timestamp 0 4 1483 33 ZipArchive::get_subfile_timestamp 0 1 563 270
/**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .zip file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall ZIP file.
 */
58
time_t ZipArchive::get_subfile_timestamp(int index) const;

1287 21 is_subfile_compressed 0 4 1483 33 ZipArchive::is_subfile_compressed 0 1 564 120
/**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */
56
bool ZipArchive::is_subfile_compressed(int index) const;

1288 20 is_subfile_encrypted 0 4 1483 32 ZipArchive::is_subfile_encrypted 0 1 565 119
/**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */
55
bool ZipArchive::is_subfile_encrypted(int index) const;

1289 26 get_subfile_internal_start 0 4 1483 38 ZipArchive::get_subfile_internal_start 0 1 566 339
/**
 * Returns the starting byte position within the ZipArchive at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */
71
std::streamoff ZipArchive::get_subfile_internal_start(int index) const;

1290 27 get_subfile_internal_length 0 4 1483 39 ZipArchive::get_subfile_internal_length 0 1 567 322
/**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */
69
std::size_t ZipArchive::get_subfile_internal_length(int index) const;

1291 12 read_subfile 0 4 1483 24 ZipArchive::read_subfile 0 1 568 253
/**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */

/**
 * Fills a string with the entire contents of the indicated subfile.
 */

/**
 * Fills a pvector with the entire contents of the indicated subfile.
 */
56
inline vector_uchar ZipArchive::read_subfile(int index);

1292 17 open_read_subfile 0 4 1483 29 ZipArchive::open_read_subfile 0 1 569 939
/**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the ZipArchive itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the ZipArchive destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */

/**
 * This variant of open_read_subfile() is used internally only, and accepts a
 * pointer to the internal Subfile object, which is assumed to be valid and
 * written to the multifile.
 */
55
std::istream *ZipArchive::open_read_subfile(int index);

1293 18 close_read_subfile 0 4 1483 30 ZipArchive::close_read_subfile 0 1 570 246
/**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
65
static void ZipArchive::close_read_subfile(std::istream *stream);

1294 15 extract_subfile 0 4 1483 27 ZipArchive::extract_subfile 0 1 571 68
/**
 * Extracts the nth subfile into a file with the given name.
 */
70
bool ZipArchive::extract_subfile(int index, Filename const &filename);

1295 18 extract_subfile_to 0 4 1483 30 ZipArchive::extract_subfile_to 0 1 572 61
/**
 * Extracts the nth subfile to the indicated ostream.
 */
66
bool ZipArchive::extract_subfile_to(int index, std::ostream &out);

1296 15 compare_subfile 0 4 1483 27 ZipArchive::compare_subfile 0 1 573 509
/**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */
70
bool ZipArchive::compare_subfile(int index, Filename const &filename);

1297 6 output 0 4 1483 18 ZipArchive::output 0 1 574 10
/**
 *
 */
49
void ZipArchive::output(std::ostream &out) const;

1298 2 ls 0 4 1483 14 ZipArchive::ls 0 1 575 62
/**
 * Shows a list of all subfiles within the ZipArchive.
 */
59
void ZipArchive::ls(std::ostream &out = ::std::cout) const;

1299 11 set_comment 0 4 1483 23 ZipArchive::set_comment 0 1 576 136
/**
 * Sets the string which is appended to the very end of the ZIP archive.
 * This string may not be longer than 65535 characters.
 */
57
void ZipArchive::set_comment(std::string const &comment);

1300 11 get_comment 0 4 1483 23 ZipArchive::get_comment 0 1 577 126
/**
 * Returns the comment string that was at the end of the ZIP end-of-directory
 * record, if any.
 * See set_comment().
 */
62
inline std::string const &ZipArchive::get_comment(void) const;

1301 19 VirtualFileMountZip 0 260 1484 40 VirtualFileMountZip::VirtualFileMountZip 0 1 578 10
/**
 *
 */
109
inline VirtualFileMountZip::VirtualFileMountZip(ZipArchive *archive, Filename const &directory = Filename());

1302 11 get_archive 0 4 1484 32 VirtualFileMountZip::get_archive 0 1 579 77
/**
 * Returns the ZipArchive pointer that this mount object is based on.
 */
64
inline ZipArchive *VirtualFileMountZip::get_archive(void) const;

1303 14 get_class_type 0 4 1484 35 VirtualFileMountZip::get_class_type 0 1 580 0
60
static TypeHandle VirtualFileMountZip::get_class_type(void);

1304 9 get_mount 0 4 1485 28 VirtualFileSimple::get_mount 0 1 581 69
/**
 * Returns the VirtualFileMount this file is associated with.
 */
66
inline VirtualFileMount *VirtualFileSimple::get_mount(void) const;

1305 19 is_implicit_pz_file 0 4 1485 38 VirtualFileSimple::is_implicit_pz_file 0 1 582 174
/**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */
63
inline bool VirtualFileSimple::is_implicit_pz_file(void) const;

1306 14 get_class_type 0 4 1485 33 VirtualFileSimple::get_class_type 0 1 583 0
58
static TypeHandle VirtualFileSimple::get_class_type(void);

1307 18 ~VirtualFileSimple 0 516 1485 37 VirtualFileSimple::~VirtualFileSimple 0 0 0
44
VirtualFileSimple::~VirtualFileSimple(void);

1308 13 TemporaryFile 0 260 1486 28 TemporaryFile::TemporaryFile 0 2 584 585 10
/**
 *
 */
141
inline explicit TemporaryFile::TemporaryFile(Filename const &filename);
inline TemporaryFile::TemporaryFile(TemporaryFile const &) = default;

1309 14 get_class_type 0 4 1486 29 TemporaryFile::get_class_type 0 1 586 0
54
static TypeHandle TemporaryFile::get_class_type(void);

1310 17 IDecompressStream 0 260 1487 36 IDecompressStream::IDecompressStream 0 2 587 588 22
/**
 *
 */

/**
 *
 */
200
inline IDecompressStream::IDecompressStream(void);
inline explicit IDecompressStream::IDecompressStream(std::istream *source, bool owns_source, std::streamsize source_length = -1, bool header = true);

1311 4 open 0 4 1487 23 IDecompressStream::open 0 1 589 10
/**
 *
 */
146
inline IDecompressStream &IDecompressStream::open(std::istream *source, bool owns_source, std::streamsize source_length = -1, bool header = true);

1312 5 close 0 4 1487 24 IDecompressStream::close 0 1 590 118
/**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */
57
inline IDecompressStream &IDecompressStream::close(void);

1313 18 ~IDecompressStream 0 516 1487 37 IDecompressStream::~IDecompressStream 0 0 0
44
IDecompressStream::~IDecompressStream(void);

1314 15 OCompressStream 0 260 1488 32 OCompressStream::OCompressStream 0 2 591 592 22
/**
 *
 */

/**
 *
 */
179
inline OCompressStream::OCompressStream(void);
inline explicit OCompressStream::OCompressStream(std::ostream *dest, bool owns_dest, int compression_level = 6, bool header = true);

1315 4 open 0 4 1488 21 OCompressStream::open 0 1 593 10
/**
 *
 */
129
inline OCompressStream &OCompressStream::open(std::ostream *dest, bool owns_dest, int compression_level = 6, bool header = true);

1316 5 close 0 4 1488 22 OCompressStream::close 0 1 594 114
/**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */
53
inline OCompressStream &OCompressStream::close(void);

1317 16 ~OCompressStream 0 516 1488 33 OCompressStream::~OCompressStream 0 0 0
40
OCompressStream::~OCompressStream(void);

1318 13 get_num_files 0 4 1489 30 VirtualFileList::get_num_files 0 1 596 51
/**
 * Returns the number of files in the list.
 */
62
inline std::size_t VirtualFileList::get_num_files(void) const;

1319 8 get_file 0 4 1489 25 VirtualFileList::get_file 0 1 597 44
/**
 * Returns the nth file in the list.
 */
67
inline VirtualFile *VirtualFileList::get_file(std::size_t n) const;

1320 11 operator [] 0 4 1489 28 VirtualFileList::operator [] 0 1 598 44
/**
 * Returns the nth file in the list.
 */
70
inline VirtualFile *VirtualFileList::operator [](std::size_t n) const;

1321 4 size 0 4 1489 21 VirtualFileList::size 0 1 599 51
/**
 * Returns the number of files in the list.
 */
53
inline std::size_t VirtualFileList::size(void) const;

1322 11 operator += 0 4 1489 28 VirtualFileList::operator += 0 1 600 0
71
inline void VirtualFileList::operator +=(VirtualFileList const &other);

1323 10 operator + 0 4 1489 27 VirtualFileList::operator + 0 1 601 0
87
inline VirtualFileList VirtualFileList::operator +(VirtualFileList const &other) const;

1324 15 VirtualFileList 0 260 1489 32 VirtualFileList::VirtualFileList 0 1 595 10
/**
 *
 */
75
inline VirtualFileList::VirtualFileList(VirtualFileList const &) = default;

1325 17 VirtualFileSystem 0 260 1490 36 VirtualFileSystem::VirtualFileSystem 0 1 602 10
/**
 *
 */
43
VirtualFileSystem::VirtualFileSystem(void);

1326 18 ~VirtualFileSystem 0 516 1490 37 VirtualFileSystem::~VirtualFileSystem 0 0 10
/**
 *
 */
44
VirtualFileSystem::~VirtualFileSystem(void);

1327 5 mount 0 4 1490 24 VirtualFileSystem::mount 0 4 603 604 605 606 1358
/**
 * Mounts the indicated Multifile at the given mount point.
 */

/**
 * Mounts the indicated ZipArchive at the given mount point.
 */

/**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */

/**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function than the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */
420
bool VirtualFileSystem::mount(Multifile *multifile, Filename const &mount_point, int flags);
bool VirtualFileSystem::mount(ZipArchive *archive, Filename const &mount_point, int flags);
bool VirtualFileSystem::mount(Filename const &physical_filename, Filename const &mount_point, int flags, std::string const &password = "");
bool VirtualFileSystem::mount(VirtualFileMount *mount, Filename const &mount_point, int flags);

1328 10 mount_loop 0 4 1490 29 VirtualFileSystem::mount_loop 0 1 607 587
/**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */
143
bool VirtualFileSystem::mount_loop(Filename const &virtual_filename, Filename const &mount_point, int flags, std::string const &password = "");

1329 7 unmount 0 4 1490 26 VirtualFileSystem::unmount 0 4 608 609 610 611 554
/**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */

/**
 * Unmounts all appearances of the indicated ZipArchive from the file system.
 * Returns the number of appearances unmounted.
 */

/**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */

/**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */
230
int VirtualFileSystem::unmount(Multifile *multifile);
int VirtualFileSystem::unmount(ZipArchive *archive);
int VirtualFileSystem::unmount(Filename const &physical_filename);
int VirtualFileSystem::unmount(VirtualFileMount *mount);

1330 13 unmount_point 0 4 1490 32 VirtualFileSystem::unmount_point 0 1 612 136
/**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */
66
int VirtualFileSystem::unmount_point(Filename const &mount_point);

1331 11 unmount_all 0 4 1490 30 VirtualFileSystem::unmount_all 0 1 613 96
/**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */
41
int VirtualFileSystem::unmount_all(void);

1332 14 get_num_mounts 0 4 1490 33 VirtualFileSystem::get_num_mounts 0 1 614 65
/**
 * Returns the number of individual mounts in the system.
 */
50
int VirtualFileSystem::get_num_mounts(void) const;

1333 9 get_mount 0 4 1490 28 VirtualFileSystem::get_mount 0 1 615 47
/**
 * Returns the nth mount in the system.
 */
72
PointerTo< VirtualFileMount > VirtualFileSystem::get_mount(int n) const;

1334 5 clear 0 4 1493 40 PointerToBase< VirtualFileMount >::clear 0 1 655 0
59
inline void PointerToBase< VirtualFileMount >::clear(void);

1335 6 output 0 4 1493 41 PointerToBase< VirtualFileMount >::output 0 1 656 0
72
void PointerToBase< VirtualFileMount >::output(std::ostream &out) const;

1336 9 PointerTo 0 260 1492 40 PointerTo< VirtualFileMount >::PointerTo 0 4 646 647 648 649 0
353
inline constexpr PointerTo< VirtualFileMount >::PointerTo(void) noexcept = default;
inline explicit constexpr PointerTo< VirtualFileMount >::PointerTo(decltype(nullptr) ) noexcept;
inline PointerTo< VirtualFileMount >::PointerTo(VirtualFileMount *ptr) noexcept;
inline PointerTo< VirtualFileMount >::PointerTo(PointerTo< VirtualFileMount > const &copy);

1337 1 p 0 4 1492 32 PointerTo< VirtualFileMount >::p 0 1 650 289
// If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness.
82
constexpr VirtualFileMount *PointerTo< VirtualFileMount >::p(void) const noexcept;

1338 10 operator = 0 4 1492 41 PointerTo< VirtualFileMount >::operator = 0 2 651 652 0
175
inline void PointerTo< VirtualFileMount >::operator =(VirtualFileMount *ptr);
inline void PointerTo< VirtualFileMount >::operator =(PointerTo< VirtualFileMount > const &copy);

1339 7 is_null 0 4 1492 38 PointerTo< VirtualFileMount >::is_null 0 1 653 0
63
inline bool PointerTo< VirtualFileMount >::is_null(void) const;

1340 5 clear 0 4 1492 36 PointerTo< VirtualFileMount >::clear 0 1 654 0
55
inline void PointerTo< VirtualFileMount >::clear(void);

1341 10 ~PointerTo 0 516 1492 41 PointerTo< VirtualFileMount >::~PointerTo 0 0 0
48
PointerTo< VirtualFileMount >::~PointerTo(void);

1342 5 chdir 0 4 1490 24 VirtualFileSystem::chdir 0 1 616 171
/**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */
61
bool VirtualFileSystem::chdir(Filename const &new_directory);

1343 7 get_cwd 0 4 1490 26 VirtualFileSystem::get_cwd 0 1 617 60
/**
 * Returns the current directory name.  See chdir().
 */
48
Filename VirtualFileSystem::get_cwd(void) const;

1344 14 make_directory 0 4 1490 33 VirtualFileSystem::make_directory 0 1 618 263
/**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */
65
bool VirtualFileSystem::make_directory(Filename const &filename);

1345 19 make_directory_full 0 4 1490 38 VirtualFileSystem::make_directory_full 0 1 619 169
/**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */
70
bool VirtualFileSystem::make_directory_full(Filename const &filename);

1346 8 get_file 0 4 1490 27 VirtualFileSystem::get_file 0 1 620 537
/**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */
111
PointerTo< VirtualFile > VirtualFileSystem::get_file(Filename const &filename, bool status_only = false) const;

1347 11 create_file 0 4 1490 30 VirtualFileSystem::create_file 0 1 621 298
/**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */
82
PointerTo< VirtualFile > VirtualFileSystem::create_file(Filename const &filename);

1348 9 find_file 0 4 1490 28 VirtualFileSystem::find_file 0 1 622 173
/**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */
143
PointerTo< VirtualFile > VirtualFileSystem::find_file(Filename const &filename, DSearchPath const &searchpath, bool status_only = false) const;

1349 11 delete_file 0 4 1490 30 VirtualFileSystem::delete_file 0 1 623 208
/**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */
62
bool VirtualFileSystem::delete_file(Filename const &filename);

1350 11 rename_file 0 4 1490 30 VirtualFileSystem::rename_file 0 1 624 599
/**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
97
bool VirtualFileSystem::rename_file(Filename const &orig_filename, Filename const &new_filename);

1351 9 copy_file 0 4 1490 28 VirtualFileSystem::copy_file 0 1 625 131
/**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */
95
bool VirtualFileSystem::copy_file(Filename const &orig_filename, Filename const &new_filename);

1352 16 resolve_filename 0 4 1490 35 VirtualFileSystem::resolve_filename 0 1 626 174
/**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */
147
bool VirtualFileSystem::resolve_filename(Filename &filename, DSearchPath const &searchpath, std::string const &default_extension = string()) const;

1353 14 find_all_files 0 4 1490 33 VirtualFileSystem::find_all_files 0 1 627 363
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */
132
int VirtualFileSystem::find_all_files(Filename const &filename, DSearchPath const &searchpath, DSearchPath::Results &results) const;

1354 6 exists 0 4 1490 25 VirtualFileSystem::exists 0 1 628 111
/**
 * Convenience function; returns true if the named file exists in the virtual
 * file system hierarchy.
 */
70
inline bool VirtualFileSystem::exists(Filename const &filename) const;

1355 12 is_directory 0 4 1490 31 VirtualFileSystem::is_directory 0 1 629 126
/**
 * Convenience function; returns true if the named file exists as a directory in
 * the virtual file system hierarchy.
 */
76
inline bool VirtualFileSystem::is_directory(Filename const &filename) const;

1356 15 is_regular_file 0 4 1490 34 VirtualFileSystem::is_regular_file 0 1 630 129
/**
 * Convenience function; returns true if the named file exists as a regular file
 * in the virtual file system hierarchy.
 */
79
inline bool VirtualFileSystem::is_regular_file(Filename const &filename) const;

1357 14 scan_directory 0 4 1490 33 VirtualFileSystem::scan_directory 0 1 631 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
102
inline PointerTo< VirtualFileList > VirtualFileSystem::scan_directory(Filename const &filename) const;

1358 2 ls 0 4 1490 21 VirtualFileSystem::ls 0 1 632 80
/**
 * Convenience function; lists the files within the indicated directory.
 */
66
inline void VirtualFileSystem::ls(Filename const &filename) const;

1359 6 ls_all 0 4 1490 25 VirtualFileSystem::ls_all 0 1 633 117
/**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */
70
inline void VirtualFileSystem::ls_all(Filename const &filename) const;

1360 5 write 0 4 1490 24 VirtualFileSystem::write 0 1 634 75
/**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */
55
void VirtualFileSystem::write(std::ostream &out) const;

1361 14 get_global_ptr 0 4 1490 33 VirtualFileSystem::get_global_ptr 0 1 635 423
/**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */
66
static VirtualFileSystem *VirtualFileSystem::get_global_ptr(void);

1362 9 read_file 0 4 1490 28 VirtualFileSystem::read_file 0 1 636 1244
/**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the string up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the pvector up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
89
PyObject *VirtualFileSystem::read_file(Filename const &filename, bool auto_unwrap) const;

1363 14 open_read_file 0 4 1490 33 VirtualFileSystem::open_read_file 0 1 637 424
/**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
98
std::istream *VirtualFileSystem::open_read_file(Filename const &filename, bool auto_unwrap) const;

1364 15 close_read_file 0 4 1490 34 VirtualFileSystem::close_read_file 0 1 638 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
69
static void VirtualFileSystem::close_read_file(std::istream *stream);

1365 10 write_file 0 4 1490 29 VirtualFileSystem::write_file 0 1 639 409
/**
 * Convenience function; writes the entire contents of the indicated file as a
 * string.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */

/**
 * Convenience function; writes the entire contents of the indicated file as a
 * block of data.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */
98
PyObject *VirtualFileSystem::write_file(Filename const &filename, PyObject *data, bool auto_wrap);

1366 15 open_write_file 0 4 1490 34 VirtualFileSystem::open_write_file 0 1 640 345
/**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */
106
std::ostream *VirtualFileSystem::open_write_file(Filename const &filename, bool auto_wrap, bool truncate);

1367 16 open_append_file 0 4 1490 35 VirtualFileSystem::open_append_file 0 1 641 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
76
std::ostream *VirtualFileSystem::open_append_file(Filename const &filename);

1368 16 close_write_file 0 4 1490 35 VirtualFileSystem::close_write_file 0 1 642 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
70
static void VirtualFileSystem::close_write_file(std::ostream *stream);

1369 20 open_read_write_file 0 4 1490 39 VirtualFileSystem::open_read_write_file 0 1 643 169
/**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */
96
std::iostream *VirtualFileSystem::open_read_write_file(Filename const &filename, bool truncate);

1370 21 open_read_append_file 0 4 1490 40 VirtualFileSystem::open_read_append_file 0 1 644 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
82
std::iostream *VirtualFileSystem::open_read_append_file(Filename const &filename);

1371 21 close_read_write_file 0 4 1490 40 VirtualFileSystem::close_read_write_file 0 1 645 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
76
static void VirtualFileSystem::close_read_write_file(std::iostream *stream);

1372 12 StringStream 0 260 1494 26 StringStream::StringStream 0 2 657 658 194
/**
 *
 */

/**
 * This version of the constructor preloads the buffer with the indicated
 * data.
 */

/**
 * This version of the constructor preloads the buffer with the indicated
 * data.
 */
86
StringStream::StringStream(PyObject *source);
inline StringStream::StringStream(void);

1373 10 clear_data 0 4 1494 24 StringStream::clear_data 0 1 659 30
/**
 * Empties the buffer.
 */
43
inline void StringStream::clear_data(void);

1374 13 get_data_size 0 4 1494 27 StringStream::get_data_size 0 1 660 86
/**
 * Returns the number of characters available to be read from the data stream.
 */
53
inline std::size_t StringStream::get_data_size(void);

1375 8 get_data 0 4 1494 22 StringStream::get_data 0 1 661 63
/**
 * Returns the contents of the data stream as a string.
 */
39
PyObject *StringStream::get_data(void);

1376 8 set_data 0 4 1494 22 StringStream::set_data 0 1 662 168
/**
 * Replaces the contents of the data stream.  This implicitly reseeks to 0.
 */

/**
 * Replaces the contents of the data stream.  This implicitly reseeks to 0.
 */
44
void StringStream::set_data(PyObject *data);

1377 13 ~StringStream 0 516 1494 27 StringStream::~StringStream 0 0 0
34
StringStream::~StringStream(void);

1378 13 get_long_time 0 4 1498 24 TrueClock::get_long_time 0 1 663 420
// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

/**
 *
 */
38
double TrueClock::get_long_time(void);

1379 14 get_short_time 0 4 1498 25 TrueClock::get_short_time 0 1 664 426
// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

/**
 *
 */
46
inline double TrueClock::get_short_time(void);

1380 18 get_short_raw_time 0 4 1498 29 TrueClock::get_short_raw_time 0 1 665 302
// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

/**
 *
 */
43
double TrueClock::get_short_raw_time(void);

1381 15 get_error_count 0 4 1498 26 TrueClock::get_error_count 0 1 666 369
/**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */
50
inline int TrueClock::get_error_count(void) const;

1382 14 get_global_ptr 0 4 1498 25 TrueClock::get_global_ptr 0 1 667 70
/**
 * Returns a pointer to the one TrueClock object in the world.
 */
57
static inline TrueClock *TrueClock::get_global_ptr(void);

1383 16 set_cpu_affinity 0 4 1498 27 TrueClock::set_cpu_affinity 0 1 668 10
/**
 *
 */
54
bool TrueClock::set_cpu_affinity(uint32_t mask) const;

1384 9 Patchfile 0 260 1500 20 Patchfile::Patchfile 0 2 669 670 111
/**
 * Create a patch file and initializes internal data
 */

/**
 * Create patch file with buffer to patch
 */
86
Patchfile::Patchfile(void);
explicit Patchfile::Patchfile(PointerTo< Buffer > buffer);

1385 10 ~Patchfile 0 516 1500 21 Patchfile::~Patchfile 0 0 10
/**
 *
 */
28
Patchfile::~Patchfile(void);

1386 5 build 0 4 1500 16 Patchfile::build 0 1 671 359
/**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */
82
bool Patchfile::build(Filename file_orig, Filename file_new, Filename patch_name);

1387 11 read_header 0 4 1500 22 Patchfile::read_header 0 1 672 193
/**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */
55
int Patchfile::read_header(Filename const &patch_file);

1388 8 initiate 0 4 1500 19 Patchfile::initiate 0 2 673 674 236
/**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */

/**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */
183
int Patchfile::initiate(Filename const &patch_file, Filename const &file);
int Patchfile::initiate(Filename const &patch_file, Filename const &orig_file, Filename const &target_file);

1389 3 run 0 4 1500 14 Patchfile::run 0 1 675 390
/**
 * Perform one buffer's worth of patching.
 * Returns one of the following values:
 * @li @c EU_ok : while patching
 * @li @c EU_success : when done
 * @li @c EU_error_abort : Patching has not been initiated
 * @li @c EU_error_file_invalid : file is corrupted
 * @li @c EU_error_invalid_checksum : incompatible patch file
 * @li @c EU_error_write_file_rename : could not rename file
 */
25
int Patchfile::run(void);

1390 5 apply 0 4 1500 16 Patchfile::apply 0 2 676 677 311
/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */

/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */
155
bool Patchfile::apply(Filename &patch_file, Filename &file);
bool Patchfile::apply(Filename &patch_file, Filename &orig_file, Filename const &target_file);

1391 12 get_progress 0 4 1500 23 Patchfile::get_progress 0 1 678 125
/**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */
55
inline PN_stdfloat Patchfile::get_progress(void) const;

1392 19 set_allow_multifile 0 4 1500 30 Patchfile::set_allow_multifile 0 1 679 362
/**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */
65
inline void Patchfile::set_allow_multifile(bool allow_multifile);

1393 19 get_allow_multifile 0 4 1500 30 Patchfile::get_allow_multifile 0 1 680 37
/**
 * See set_allow_multifile().
 */
49
inline bool Patchfile::get_allow_multifile(void);

1394 20 set_footprint_length 0 4 1500 31 Patchfile::set_footprint_length 0 1 681 10
/**
 *
 */
56
inline void Patchfile::set_footprint_length(int length);

1395 20 get_footprint_length 0 4 1500 31 Patchfile::get_footprint_length 0 1 682 10
/**
 *
 */
49
inline int Patchfile::get_footprint_length(void);

1396 22 reset_footprint_length 0 4 1500 33 Patchfile::reset_footprint_length 0 1 683 10
/**
 *
 */
52
inline void Patchfile::reset_footprint_length(void);

1397 15 has_source_hash 0 4 1500 26 Patchfile::has_source_hash 0 1 684 145
/**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */
51
inline bool Patchfile::has_source_hash(void) const;

1398 15 get_source_hash 0 4 1500 26 Patchfile::get_source_hash 0 1 685 52
/**
 * Returns the MD5 hash for the source file.
 */
61
inline HashVal const &Patchfile::get_source_hash(void) const;

1399 15 get_result_hash 0 4 1500 26 Patchfile::get_result_hash 0 1 686 78
/**
 * Returns the MD5 hash for the file after the patch has been applied.
 */
61
inline HashVal const &Patchfile::get_result_hash(void) const;

1400 13 password_hash 0 1 0 13 password_hash 0 1 713 0
103
std::string password_hash(std::string const &password, std::string const &salt, int iters, int keylen);

1401 11 was_deleted 0 4 1504 30 WeakPointerToVoid::was_deleted 0 1 687 384
/**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.  If this returns true, it means that the pointer can not yet be
 * reused, but it does not guarantee that it can be safely accessed.  See the
 * lock() method for a safe way to access the underlying pointer.
 *
 * This will always return true for a null pointer, unlike is_valid_pointer().
 */
55
inline bool WeakPointerToVoid::was_deleted(void) const;

1402 16 is_valid_pointer 0 4 1504 35 WeakPointerToVoid::is_valid_pointer 0 1 688 122
/**
 * Returns true if the pointer is not null and the object has not been
 * deleted.  See was_deleted() for caveats.
 */
60
inline bool WeakPointerToVoid::is_valid_pointer(void) const;

1403 18 ~WeakPointerToVoid 0 516 1504 37 WeakPointerToVoid::~WeakPointerToVoid 0 0 0
44
WeakPointerToVoid::~WeakPointerToVoid(void);

1404 16 set_string_value 0 4 1505 33 WindowsRegistry::set_string_value 0 1 691 302
/**
 * Sets the registry key to the indicated value as a string.  The supplied
 * string value is automatically converted from whatever encoding is set by
 * TextEncoder::set_default_encoding() and written as a Unicode string.  The
 * registry key must already exist prior to calling this function.
 */
183
static bool WindowsRegistry::set_string_value(std::string const &key, std::string const &name, std::string const &value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1405 13 set_int_value 0 4 1505 30 WindowsRegistry::set_int_value 0 1 692 142
/**
 * Sets the registry key to the indicated value as an integer.  The registry
 * key must already exist prior to calling this function.
 */
165
static bool WindowsRegistry::set_int_value(std::string const &key, std::string const &name, int value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1406 12 get_key_type 0 4 1505 29 WindowsRegistry::get_key_type 0 1 693 115
/**
 * Returns the type of the indicated key, or T_none if the key is not known or
 * is some unsupported type.
 */
170
static WindowsRegistry::Type WindowsRegistry::get_key_type(std::string const &key, std::string const &name, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1407 16 get_string_value 0 4 1505 33 WindowsRegistry::get_string_value 0 1 694 291
/**
 * Returns the value associated with the indicated registry key, assuming it
 * is a string value.  The string value is automatically encoded using
 * TextEncoder::get_default_encoding().  If the key is not defined or is not a
 * string type value, default_value is returned instead.
 */
198
static std::string WindowsRegistry::get_string_value(std::string const &key, std::string const &name, std::string const &default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1408 13 get_int_value 0 4 1505 30 WindowsRegistry::get_int_value 0 1 695 206
/**
 * Returns the value associated with the indicated registry key, assuming it
 * is an integer value.  If the key is not defined or is not an integer type
 * value, default_value is returned instead.
 */
172
static int WindowsRegistry::get_int_value(std::string const &key, std::string const &name, int default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

1409 15 WindowsRegistry 0 260 1505 32 WindowsRegistry::WindowsRegistry 0 2 689 690 0
132
inline WindowsRegistry::WindowsRegistry(void) = default;
inline WindowsRegistry::WindowsRegistry(WindowsRegistry const &) = default;

1410 16 ~WindowsRegistry 0 516 1505 33 WindowsRegistry::~WindowsRegistry 0 0 0
40
WindowsRegistry::~WindowsRegistry(void);

713
1 0 0 15 15 1512 736 0 0 1 4 copy 1 1510  
2 0 0 23 15 1512 736 0 0 1 4 copy 1 1513  
3 0 0 4 16 1515 0 0 0 1 4 this 3 1512  
4 0 0 6 17 1441 0 0 0 1 4 this 3 1510  
5 0 0 6 18 1499 0 0 0 2 4 this 3 1510  1 n 1 1441  
6 0 0 38 19 1499 0 0 0 2 4 this 3 1510  1 n 1 1441  
7 0 0 38 20 1495 0 0 0 1 4 this 3 1510  
8 0 0 38 21 1495 0 0 0 3 4 this 3 1510  1 n 1 1441  5 count 1 1441  
9 0 0 6 22 1443 0 0 0 1 4 this 3 1510  
10 0 0 6 23 1443 0 0 0 1 4 this 3 1510  
11 0 0 6 24 1441 0 0 0 2 4 this 3 1510  6 param0 0 1499  
12 0 0 38 25 1495 0 0 0 1 4 this 3 1510  
13 0 0 38 26 1443 0 0 0 3 4 this 3 1510  4 view 1 1516  5 flags 1 1443  
14 0 0 36 27 1515 0 0 0 2 4 this 3 1510  4 view 1 1516  
15 0 0 39 28 1512 736 0 0 2 4 this 3 1510  4 memo 1 1495  
16 0 0 6 13 1439 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1519  5 other 1 1519  
17 0 0 6 14 1439 0 0 0 2 4 this 3 1519  5 other 1 1519  
18 0 0 4 10 1515 0 0 0 1 4 this 3 1521  
19 0 0 4 11 1515 0 0 0 2 4 this 3 1522  3 out 1 1524  
20 0 0 6 7 1439 0 0 130 /**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */ 1 4 this 3 1525  
21 0 0 6 8 1440 0 0 10 /**
 *
 */ 1 4 this 3 1525  
22 0 0 15 39 1529 756 0 0 1 4 copy 1 1527  
23 0 0 23 39 1529 756 0 0 1 4 copy 1 1530  
24 0 0 4 40 1515 0 0 0 1 4 this 3 1529  
25 0 0 6 41 1441 0 0 0 1 4 this 3 1527  
26 0 0 6 42 1502 0 0 0 2 4 this 3 1527  1 n 1 1441  
27 0 0 38 43 1502 0 0 0 2 4 this 3 1527  1 n 1 1441  
28 0 0 38 44 1495 0 0 0 1 4 this 3 1527  
29 0 0 38 45 1495 0 0 0 3 4 this 3 1527  1 n 1 1441  5 count 1 1441  
30 0 0 6 46 1443 0 0 0 1 4 this 3 1527  
31 0 0 6 47 1443 0 0 0 1 4 this 3 1527  
32 0 0 6 48 1441 0 0 0 2 4 this 3 1527  6 param0 0 1502  
33 0 0 38 49 1495 0 0 0 1 4 this 3 1527  
34 0 0 38 50 1443 0 0 0 3 4 this 3 1527  4 view 1 1516  5 flags 1 1443  
35 0 0 36 51 1515 0 0 0 2 4 this 3 1527  4 view 1 1516  
36 0 0 39 52 1529 756 0 0 2 4 this 3 1527  4 memo 1 1495  
37 0 0 6 37 1439 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1532  5 other 1 1532  
38 0 0 6 38 1439 0 0 0 2 4 this 3 1532  5 other 1 1532  
39 0 0 4 34 1515 0 0 0 1 4 this 3 1534  
40 0 0 4 35 1515 0 0 0 2 4 this 3 1535  3 out 1 1524  
41 0 0 15 63 1539 776 0 0 1 4 copy 1 1537  
42 0 0 23 63 1539 776 0 0 1 4 copy 1 1540  
43 0 0 4 64 1515 0 0 0 1 4 this 3 1539  
44 0 0 6 65 1441 0 0 0 1 4 this 3 1537  
45 0 0 6 66 1443 0 0 0 2 4 this 3 1537  1 n 1 1441  
46 0 0 38 67 1443 0 0 0 2 4 this 3 1537  1 n 1 1441  
47 0 0 38 68 1495 0 0 0 1 4 this 3 1537  
48 0 0 38 69 1495 0 0 0 3 4 this 3 1537  1 n 1 1441  5 count 1 1441  
49 0 0 6 70 1443 0 0 0 1 4 this 3 1537  
50 0 0 6 71 1443 0 0 0 1 4 this 3 1537  
51 0 0 6 72 1441 0 0 0 2 4 this 3 1537  6 param0 0 1443  
52 0 0 38 73 1495 0 0 0 1 4 this 3 1537  
53 0 0 38 74 1443 0 0 0 3 4 this 3 1537  4 view 1 1516  5 flags 1 1443  
54 0 0 36 75 1515 0 0 0 2 4 this 3 1537  4 view 1 1516  
55 0 0 39 76 1539 776 0 0 2 4 this 3 1537  4 memo 1 1495  
56 0 0 6 61 1439 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1542  5 other 1 1542  
57 0 0 6 62 1439 0 0 0 2 4 this 3 1542  5 other 1 1542  
58 0 0 4 58 1515 0 0 0 1 4 this 3 1544  
59 0 0 4 59 1515 0 0 0 2 4 this 3 1545  3 out 1 1524  
60 0 0 15 87 1549 796 0 0 1 4 copy 1 1547  
61 0 0 23 87 1549 796 0 0 1 4 copy 1 1550  
62 0 0 4 88 1515 0 0 0 1 4 this 3 1549  
63 0 0 6 89 1441 0 0 0 1 4 this 3 1547  
64 0 0 6 90 1552 0 0 0 2 4 this 3 1547  1 n 1 1441  
65 0 0 38 91 1552 0 0 0 2 4 this 3 1547  1 n 1 1441  
66 0 0 38 92 1495 0 0 0 1 4 this 3 1547  
67 0 0 38 93 1495 0 0 0 3 4 this 3 1547  1 n 1 1441  5 count 1 1441  
68 0 0 6 94 1443 0 0 0 1 4 this 3 1547  
69 0 0 6 95 1443 0 0 0 1 4 this 3 1547  
70 0 0 6 96 1441 0 0 0 2 4 this 3 1547  6 param0 0 1552  
71 0 0 38 97 1495 0 0 0 1 4 this 3 1547  
72 0 0 38 98 1443 0 0 0 3 4 this 3 1547  4 view 1 1516  5 flags 1 1443  
73 0 0 36 99 1515 0 0 0 2 4 this 3 1547  4 view 1 1516  
74 0 0 39 100 1549 796 0 0 2 4 this 3 1547  4 memo 1 1495  
75 0 0 6 85 1439 0 0 64 // These are implemented in PointerToVoid, but expose them here. 2 4 this 3 1553  5 other 1 1553  
76 0 0 6 86 1439 0 0 0 2 4 this 3 1553  5 other 1 1553  
77 0 0 4 82 1515 0 0 0 1 4 this 3 1555  
78 0 0 4 83 1515 0 0 0 2 4 this 3 1556  3 out 1 1524  
79 0 0 15 104 1558 818 0 0 1 4 copy 1 1513  
80 0 0 55 104 1558 818 0 0 1 6 source 1 1495  
81 0 0 23 104 1558 818 0 0 1 11 type_handle 5 1559  
82 0 0 7 105 1558 818 0 0 2 1 n 1 1441  11 type_handle 5 1559  
83 0 0 4 106 1515 0 0 0 1 4 this 3 1558  
84 0 0 6 107 1441 0 0 0 1 4 this 3 1513  
85 0 0 4 108 1515 0 0 0 2 4 this 3 1558  1 x 1 1499  
86 0 0 4 109 1515 0 0 0 1 4 this 3 1558  
87 0 0 6 110 1499 0 0 0 2 4 this 3 1513  1 n 1 1441  
88 0 0 4 111 1515 0 0 0 3 4 this 3 1558  1 n 1 1441  5 value 1 1499  
89 0 0 38 112 1499 0 0 0 2 4 this 3 1513  1 n 1 1441  
90 0 0 36 113 1515 0 0 0 3 4 this 3 1558  1 n 1 1441  5 value 1 1499  
91 0 0 38 114 1495 0 0 0 1 4 this 3 1513  
92 0 0 36 115 1515 0 0 0 2 4 this 3 1558  4 data 1 1495  
93 0 0 38 116 1495 0 0 0 3 4 this 3 1513  1 n 1 1441  5 count 1 1441  
94 0 0 4 117 1515 0 0 0 4 4 this 3 1558  1 n 1 1441  5 count 1 1441  4 data 1 1561  
95 0 0 6 118 1443 0 0 0 1 4 this 3 1513  
96 0 0 6 119 1443 0 0 0 1 4 this 3 1513  
97 0 0 6 120 1441 0 0 0 2 4 this 3 1513  6 param0 0 1499  
98 0 0 38 121 1495 0 0 0 1 4 this 3 1513  
99 0 0 38 122 1443 0 0 0 3 4 this 3 1558  4 view 1 1516  5 flags 1 1443  
100 0 0 36 123 1515 0 0 0 2 4 this 3 1513  4 view 1 1516  
101 0 0 39 124 1558 818 0 0 2 4 this 3 1513  4 memo 1 1495  
102 0 0 15 128 1562 840 0 0 1 4 copy 1 1530  
103 0 0 55 128 1562 840 0 0 1 6 source 1 1495  
104 0 0 23 128 1562 840 0 0 1 11 type_handle 5 1559  
105 0 0 7 129 1562 840 0 0 2 1 n 1 1441  11 type_handle 5 1559  
106 0 0 4 130 1515 0 0 0 1 4 this 3 1562  
107 0 0 6 131 1441 0 0 0 1 4 this 3 1530  
108 0 0 4 132 1515 0 0 0 2 4 this 3 1562  1 x 1 1502  
109 0 0 4 133 1515 0 0 0 1 4 this 3 1562  
110 0 0 6 134 1502 0 0 0 2 4 this 3 1530  1 n 1 1441  
111 0 0 4 135 1515 0 0 0 3 4 this 3 1562  1 n 1 1441  5 value 1 1502  
112 0 0 38 136 1502 0 0 0 2 4 this 3 1530  1 n 1 1441  
113 0 0 36 137 1515 0 0 0 3 4 this 3 1562  1 n 1 1441  5 value 1 1502  
114 0 0 38 138 1495 0 0 0 1 4 this 3 1530  
115 0 0 36 139 1515 0 0 0 2 4 this 3 1562  4 data 1 1495  
116 0 0 38 140 1495 0 0 0 3 4 this 3 1530  1 n 1 1441  5 count 1 1441  
117 0 0 4 141 1515 0 0 0 4 4 this 3 1562  1 n 1 1441  5 count 1 1441  4 data 1 1561  
118 0 0 6 142 1443 0 0 0 1 4 this 3 1530  
119 0 0 6 143 1443 0 0 0 1 4 this 3 1530  
120 0 0 6 144 1441 0 0 0 2 4 this 3 1530  6 param0 0 1502  
121 0 0 38 145 1495 0 0 0 1 4 this 3 1530  
122 0 0 38 146 1443 0 0 0 3 4 this 3 1562  4 view 1 1516  5 flags 1 1443  
123 0 0 36 147 1515 0 0 0 2 4 this 3 1530  4 view 1 1516  
124 0 0 39 148 1562 840 0 0 2 4 this 3 1530  4 memo 1 1495  
125 0 0 15 152 1563 862 0 0 1 4 copy 1 1540  
126 0 0 55 152 1563 862 0 0 1 6 source 1 1495  
127 0 0 23 152 1563 862 0 0 1 11 type_handle 5 1559  
128 0 0 7 153 1563 862 0 0 2 1 n 1 1441  11 type_handle 5 1559  
129 0 0 4 154 1515 0 0 0 1 4 this 3 1563  
130 0 0 6 155 1441 0 0 0 1 4 this 3 1540  
131 0 0 4 156 1515 0 0 0 2 4 this 3 1563  1 x 1 1443  
132 0 0 4 157 1515 0 0 0 1 4 this 3 1563  
133 0 0 6 158 1443 0 0 0 2 4 this 3 1540  1 n 1 1441  
134 0 0 4 159 1515 0 0 0 3 4 this 3 1563  1 n 1 1441  5 value 1 1443  
135 0 0 38 160 1443 0 0 0 2 4 this 3 1540  1 n 1 1441  
136 0 0 36 161 1515 0 0 0 3 4 this 3 1563  1 n 1 1441  5 value 1 1443  
137 0 0 38 162 1495 0 0 0 1 4 this 3 1540  
138 0 0 36 163 1515 0 0 0 2 4 this 3 1563  4 data 1 1495  
139 0 0 38 164 1495 0 0 0 3 4 this 3 1540  1 n 1 1441  5 count 1 1441  
140 0 0 4 165 1515 0 0 0 4 4 this 3 1563  1 n 1 1441  5 count 1 1441  4 data 1 1561  
141 0 0 6 166 1443 0 0 0 1 4 this 3 1540  
142 0 0 6 167 1443 0 0 0 1 4 this 3 1540  
143 0 0 6 168 1441 0 0 0 2 4 this 3 1540  6 param0 0 1443  
144 0 0 38 169 1495 0 0 0 1 4 this 3 1540  
145 0 0 38 170 1443 0 0 0 3 4 this 3 1563  4 view 1 1516  5 flags 1 1443  
146 0 0 36 171 1515 0 0 0 2 4 this 3 1540  4 view 1 1516  
147 0 0 39 172 1563 862 0 0 2 4 this 3 1540  4 memo 1 1495  
148 0 0 15 176 1564 884 0 0 1 4 copy 1 1550  
149 0 0 55 176 1564 884 0 0 1 6 source 1 1495  
150 0 0 23 176 1564 884 0 0 1 11 type_handle 5 1559  
151 0 0 7 177 1564 884 0 0 2 1 n 1 1441  11 type_handle 5 1559  
152 0 0 4 178 1515 0 0 0 1 4 this 3 1564  
153 0 0 6 179 1441 0 0 0 1 4 this 3 1550  
154 0 0 4 180 1515 0 0 0 2 4 this 3 1564  1 x 1 1552  
155 0 0 4 181 1515 0 0 0 1 4 this 3 1564  
156 0 0 6 182 1552 0 0 0 2 4 this 3 1550  1 n 1 1441  
157 0 0 4 183 1515 0 0 0 3 4 this 3 1564  1 n 1 1441  5 value 1 1552  
158 0 0 38 184 1552 0 0 0 2 4 this 3 1550  1 n 1 1441  
159 0 0 36 185 1515 0 0 0 3 4 this 3 1564  1 n 1 1441  5 value 1 1552  
160 0 0 38 186 1495 0 0 0 1 4 this 3 1550  
161 0 0 36 187 1515 0 0 0 2 4 this 3 1564  4 data 1 1495  
162 0 0 38 188 1495 0 0 0 3 4 this 3 1550  1 n 1 1441  5 count 1 1441  
163 0 0 4 189 1515 0 0 0 4 4 this 3 1564  1 n 1 1441  5 count 1 1441  4 data 1 1561  
164 0 0 6 190 1443 0 0 0 1 4 this 3 1550  
165 0 0 6 191 1443 0 0 0 1 4 this 3 1550  
166 0 0 6 192 1441 0 0 0 2 4 this 3 1550  6 param0 0 1552  
167 0 0 38 193 1495 0 0 0 1 4 this 3 1550  
168 0 0 38 194 1443 0 0 0 3 4 this 3 1564  4 view 1 1516  5 flags 1 1443  
169 0 0 36 195 1515 0 0 0 2 4 this 3 1550  4 view 1 1516  
170 0 0 39 196 1564 884 0 0 2 4 this 3 1550  4 memo 1 1495  
171 0 0 15 233 1567 906 0 0 1 6 param0 0 1565  
172 0 0 6 200 1439 0 0 125 /**
 * Returns true if the MemoryUsage object is currently tracking memory (e.g.
 * track-memory-usage is configured #t).
 */ 0 
173 0 0 6 201 1439 0 0 168 /**
 * Returns true if the MemoryUsage object is currently at least counting
 * memory (e.g.  this is a Windows debug build), even if it's not fully
 * tracking it.
 */ 0 
174 0 0 6 202 1440 0 0 136 /**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, not including the memory previously frozen.
 */ 0 
175 0 0 6 203 1440 0 0 132 /**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, including the memory previously frozen.
 */ 0 
176 0 0 6 204 1440 0 0 119 /**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for individual objects.
 */ 0 
177 0 0 6 205 1440 0 0 107 /**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for arrays.
 */ 0 
178 0 0 6 206 1440 0 0 190 /**
 * Returns the extra bytes allocated from the system that are not immediately
 * used for holding allocated objects.  This can only be determined if
 * ALTERNATIVE_MALLOC is enabled.
 */ 0 
179 0 0 6 207 1440 0 0 110 /**
 * Returns the total number of bytes allocated from the virtual memory pool
 * from code within Panda.
 */ 0 
180 0 0 6 208 1440 0 0 496 /**
 * Returns the total number of bytes of allocated memory in the heap that
 * Panda didn't seem to be responsible for.  This includes a few bytes for
 * very low-level objects (like ConfigVariables) that cannot use Panda memory
 * tracking because they are so very low-level.
 *
 * This also includes all of the memory that might have been allocated by a
 * high-level interpreter, like Python.
 *
 * This number is only available if Panda is able to hook into the actual heap
 * callback.
 */ 0 
181 0 0 6 209 1440 0 0 113 /**
 * Returns the total size of allocated memory consumed by the process, as
 * nearly as can be determined.
 */ 0 
182 0 0 6 210 1443 0 0 59 /**
 * Returns the number of pointers currently active.
 */ 0 
183 0 0 4 211 1515 0 0 100 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers
 * currently active.
 */ 1 6 result 1 1568  
184 0 0 4 212 1515 0 0 122 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers of the
 * indicated type currently active.
 */ 2 6 result 1 1568  4 type 1 1559  
185 0 0 4 213 1515 0 0 159 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers that
 * were allocated within the range of the indicated number of seconds ago.
 */ 3 6 result 1 1568  4 from 1 1499  2 to 1 1499  
186 0 0 4 214 1515 0 0 852 /**
 * Fills the indicated MemoryUsagePointers with the set of all currently
 * active pointers (that is, pointers allocated since the last call to
 * freeze(), and not yet freed) that have a zero reference count.
 *
 * Generally, an undeleted pointer with a zero reference count means its
 * reference count has never been incremented beyond zero (since once it has
 * been incremented, the only way it can return to zero would free the
 * pointer).  This may include objects that are allocated statically or on the
 * stack, which are never intended to be deleted.  Or, it might represent a
 * programmer or compiler error.
 *
 * This function has the side-effect of incrementing each of their reference
 * counts by one, thus preventing them from ever being freed--but since they
 * hadn't been freed anyway, probably no additional harm is done.
 */ 1 6 result 1 1568  
187 0 0 4 215 1515 0 0 285 /**
 * 'Freezes' all pointers currently stored so that they are no longer
 * reported; only newly allocate pointers from this point on will appear in
 * future information requests.  This makes it easier to differentiate between
 * continuous leaks and one-time memory allocations.
 */ 0 
188 0 0 4 216 1515 0 0 70 /**
 * Shows the breakdown of types of all of the active pointers.
 */ 0 
189 0 0 4 217 1515 0 0 118 /**
 * Shows the breakdown of types of all of the pointers allocated and freed
 * since the last call to freeze().
 */ 0 
190 0 0 4 218 1515 0 0 69 /**
 * Shows the breakdown of ages of all of the active pointers.
 */ 0 
191 0 0 4 219 1515 0 0 117 /**
 * Shows the breakdown of ages of all of the pointers allocated and freed
 * since the last call to freeze().
 */ 0 
192 0 0 6 239 1443 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 1569  
193 0 0 4 240 1515 0 0 538 /**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */ 1 4 this 3 1569  
194 0 0 6 241 1439 0 0 865 /**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 1569  
195 0 0 6 244 1439 0 0 135 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 1569  
196 0 0 6 245 1439 0 0 144 /**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 1569  
197 0 0 7 246 1559 0 0 0 0 
198 0 0 6 236 1572 0 0 0 1 4 this 3 1571  
199 0 0 15 249 1575 909 0 0 1 6 param0 0 1573  
200 0 0 6 248 1443 0 0 10 /**
 *
 */ 1 4 this 3 1573  
201 0 0 4 258 1515 0 0 0 2 4 this 3 1576  5 level 1 1499  
202 0 0 6 260 1443 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 1577  
203 0 0 4 261 1515 0 0 107 /**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */ 1 4 this 3 1577  
204 0 0 6 262 1439 0 0 201 /**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 1577  
205 0 0 6 263 1439 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 1577  
206 0 0 4 264 1515 0 0 186 /**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */ 1 4 this 3 1577  
207 0 0 7 265 1559 0 0 0 0 
208 0 0 7 268 1579 0 0 0 0 
209 0 0 15 268 1579 0 0 0 1 4 copy 1 1580  
210 0 0 7 268 1579 0 0 64 /**
 * Constructs a datagram from an existing block of data.
 */ 1 4 data 1 1582  
211 0 0 6 269 1579 0 0 0 2 4 this 3 1579  4 copy 1 1580  
212 0 0 4 270 1515 0 0 90 /**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */ 1 4 this 3 1579  
213 0 0 4 271 1515 0 0 111 /**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */ 3 4 this 3 1580  3 out 1 1524  6 indent 5 1584  
214 0 0 4 272 1515 0 0 48 /**
 * Adds a boolean value to the datagram.
 */ 2 4 this 3 1579  5 value 1 1439  
215 0 0 4 273 1515 0 0 55 /**
 * Adds a signed 8-bit integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1585  
216 0 0 4 274 1515 0 0 58 /**
 * Adds an unsigned 8-bit integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1587  
217 0 0 4 275 1515 0 0 56 /**
 * Adds a signed 16-bit integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1588  
218 0 0 4 276 1515 0 0 56 /**
 * Adds a signed 32-bit integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1590  
219 0 0 4 277 1515 0 0 56 /**
 * Adds a signed 64-bit integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1591  
220 0 0 4 278 1515 0 0 59 /**
 * Adds an unsigned 16-bit integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1592  
221 0 0 4 279 1515 0 0 59 /**
 * Adds an unsigned 32-bit integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1594  
222 0 0 4 280 1515 0 0 59 /**
 * Adds an unsigned 64-bit integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1595  
223 0 0 4 281 1515 0 0 197 /**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 2 4 this 3 1579  5 value 1 1596  
224 0 0 4 282 1515 0 0 63 /**
 * Adds a 64-bit floating-point number to the datagram.
 */ 2 4 this 3 1579  5 value 1 1597  
225 0 0 4 283 1515 0 0 105 /**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */ 2 4 this 3 1579  5 value 1 1501  
226 0 0 4 284 1515 0 0 67 // These functions pack numbers big-endian, in case that's desired. 2 4 this 3 1579  5 value 1 1588  
227 0 0 4 285 1515 0 0 67 /**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1590  
228 0 0 4 286 1515 0 0 67 /**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1591  
229 0 0 4 287 1515 0 0 70 /**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1592  
230 0 0 4 288 1515 0 0 70 /**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1594  
231 0 0 4 289 1515 0 0 70 /**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 1579  5 value 1 1595  
232 0 0 4 290 1515 0 0 94 /**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */ 2 4 this 3 1579  5 value 1 1596  
233 0 0 4 291 1515 0 0 74 /**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */ 2 4 this 3 1579  5 value 1 1597  
234 0 0 4 292 1515 0 0 109 /**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */ 2 4 this 3 1579  3 str 1 1561  
235 0 0 4 293 1515 0 0 116 /**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */ 2 4 this 3 1579  3 str 1 1561  
236 0 0 4 294 1515 0 0 86 /**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */ 2 4 this 3 1579  3 str 1 1561  
237 0 0 4 295 1515 0 0 238 /**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */ 3 4 this 3 1579  3 str 1 1561  4 size 1 1440  
238 0 0 4 296 1515 0 0 58 /**
 * Adds a variable-length wstring to the datagram.
 */ 2 4 this 3 1579  3 str 1 1561  
239 0 0 4 297 1515 0 0 114 /**
 * Adds a variable-length binary blob to the datagram.  This actually adds a
 * count followed by n bytes.
 */ 2 4 this 3 1579  6 param0 0 1582  
240 0 0 4 298 1515 0 0 119 /**
 * Adds a variable-length binary blob to the datagram, using a 32-bit length
 * field to allow very long blobs.
 */ 2 4 this 3 1579  6 param0 0 1582  
241 0 0 4 299 1515 0 0 67 /**
 * Adds the indicated number of zero bytes to the datagram.
 */ 2 4 this 3 1579  4 size 1 1440  
242 0 0 4 300 1515 0 0 65 /**
 * Appends some more raw data to the end of the datagram.
 */ 2 4 this 3 1579  4 data 1 1582  
243 0 0 38 301 1495 0 0 51 /**
 * Returns the datagram's data as a string.
 */ 1 4 this 3 1580  
244 0 0 38 302 1495 0 0 0 1 4 this 3 1580  
245 0 0 38 303 1495 0 0 0 1 4 this 3 1580  
246 0 0 6 304 1440 0 0 55 /**
 * Returns the number of bytes in the datagram.
 */ 1 4 this 3 1580  
247 0 0 4 305 1515 0 0 199 /**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */ 2 4 this 3 1579  4 data 1 1598  
248 0 0 4 306 1515 0 0 237 /**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */ 2 4 this 3 1579  4 data 1 1599  
249 0 0 7 307 1599 0 0 70 /**
 * Returns a const pointer to the actual data in the Datagram.
 */ 1 4 this 3 1580  
250 0 0 7 308 1598 0 0 75 /**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */ 1 4 this 3 1579  
251 0 0 4 309 1515 0 0 343 /**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */ 2 4 this 3 1579  15 stdfloat_double 1 1439  
252 0 0 6 310 1439 0 0 72 /**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */ 1 4 this 3 1580  
253 0 0 6 311 1439 0 0 0 2 4 this 3 1580  5 other 1 1580  
254 0 0 6 312 1439 0 0 0 2 4 this 3 1580  5 other 1 1580  
255 0 0 6 313 1439 0 0 0 2 4 this 3 1580  5 other 1 1580  
256 0 0 4 314 1515 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 1580  3 out 1 1524  
257 0 0 4 315 1515 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 1580  3 out 1 1524  6 indent 5 1584  
258 0 0 7 316 1559 0 0 0 0 
259 0 0 6 319 1439 0 0 0 2 4 this 3 1600  4 data 1 1579  
260 0 0 6 320 1439 0 0 391 /**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */ 2 4 this 3 1600  4 info 1 1601  
261 0 0 6 321 1439 0 0 0 1 4 this 3 1600  
262 0 0 6 322 1439 0 0 0 1 4 this 3 1600  
263 0 0 6 323 1602 0 0 159 /**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 1600  
264 0 0 6 324 1605 0 0 138 /**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */ 1 4 this 3 1603  
265 0 0 7 325 1454 0 0 156 /**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 1600  
266 0 0 7 326 1607 1242 0 153 /**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */ 1 4 this 3 1600  
267 0 0 6 327 1458 0 0 327 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */ 1 4 this 3 1600  
268 0 0 7 329 1608 1030 0 10 /**
 *
 */ 0 
269 0 0 23 329 1608 1030 0 10 /**
 *
 */ 2 8 datagram 1 1580  6 offset 5 1440  
270 0 0 15 329 1608 1030 0 0 1 6 param0 0 1609  
271 0 0 6 330 1439 0 0 36 /**
 * Extracts a boolean value.
 */ 1 4 this 3 1608  
272 0 0 6 331 1585 0 0 43 /**
 * Extracts a signed 8-bit integer.
 */ 1 4 this 3 1608  
273 0 0 6 332 1587 0 0 46 /**
 * Extracts an unsigned 8-bit integer.
 */ 1 4 this 3 1608  
274 0 0 6 333 1588 0 0 75 /**
 * Extracts a signed 16-bit integer without advancing the iterator.
 */ 1 4 this 3 1608  
275 0 0 6 334 1592 0 0 78 /**
 * Extracts an unsigned 16-bit integer without advancing the iterator.
 */ 1 4 this 3 1608  
276 0 0 6 335 1588 0 0 44 /**
 * Extracts a signed 16-bit integer.
 */ 1 4 this 3 1608  
277 0 0 6 336 1590 0 0 44 /**
 * Extracts a signed 32-bit integer.
 */ 1 4 this 3 1608  
278 0 0 6 337 1591 0 0 44 /**
 * Extracts a signed 64-bit integer.
 */ 1 4 this 3 1608  
279 0 0 6 338 1592 0 0 47 /**
 * Extracts an unsigned 16-bit integer.
 */ 1 4 this 3 1608  
280 0 0 6 339 1594 0 0 47 /**
 * Extracts an unsigned 32-bit integer.
 */ 1 4 this 3 1608  
281 0 0 6 340 1595 0 0 47 /**
 * Extracts an unsigned 64-bit integer.
 */ 1 4 this 3 1608  
282 0 0 6 341 1596 0 0 68 /**
 * Extracts a 32-bit single-precision floating-point number.
 */ 1 4 this 3 1608  
283 0 0 6 342 1597 0 0 51 /**
 * Extracts a 64-bit floating-point number.
 */ 1 4 this 3 1608  
284 0 0 6 343 1501 0 0 119 /**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */ 1 4 this 3 1608  
285 0 0 6 344 1588 0 0 55 /**
 * Extracts a signed 16-bit big-endian integer.
 */ 1 4 this 3 1608  
286 0 0 6 345 1590 0 0 55 /**
 * Extracts a signed 32-bit big-endian integer.
 */ 1 4 this 3 1608  
287 0 0 6 346 1591 0 0 55 /**
 * Extracts a signed 64-bit big-endian integer.
 */ 1 4 this 3 1608  
288 0 0 6 347 1592 0 0 58 /**
 * Extracts an unsigned 16-bit big-endian integer.
 */ 1 4 this 3 1608  
289 0 0 6 348 1594 0 0 58 /**
 * Extracts an unsigned 32-bit big-endian integer.
 */ 1 4 this 3 1608  
290 0 0 6 349 1595 0 0 58 /**
 * Extracts an unsigned 64-bit big-endian integer.
 */ 1 4 this 3 1608  
291 0 0 6 350 1596 0 0 79 /**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */ 1 4 this 3 1608  
292 0 0 6 351 1597 0 0 62 /**
 * Extracts a 64-bit big-endian floating-point number.
 */ 1 4 this 3 1608  
293 0 0 6 352 1561 0 0 45 /**
 * Extracts a variable-length string.
 */ 1 4 this 3 1608  
294 0 0 6 353 1561 0 0 72 /**
 * Extracts a variable-length string with a 32-bit length field.
 */ 1 4 this 3 1608  
295 0 0 6 354 1561 0 0 74 /**
 * Extracts a variable-length string, as a NULL-terminated string.
 */ 1 4 this 3 1608  
296 0 0 6 355 1561 0 0 128 /**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */ 2 4 this 3 1608  4 size 1 1440  
297 0 0 6 356 1561 0 0 75 /**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */ 1 4 this 3 1608  
298 0 0 6 357 1582 0 0 50 /**
 * Extracts a variable-length binary blob.
 */ 1 4 this 3 1608  
299 0 0 6 358 1582 0 0 75 /**
 * Extracts a variable-length binary blob with a 32-bit size field.
 */ 1 4 this 3 1608  
300 0 0 4 359 1515 0 0 68 /**
 * Skips over the indicated number of bytes in the datagram.
 */ 2 4 this 3 1608  4 size 1 1440  
301 0 0 6 360 1582 0 0 98 /**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */ 2 4 this 3 1608  4 size 1 1440  
302 0 0 6 361 1582 0 0 115 /**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */ 1 4 this 3 1609  
303 0 0 6 362 1440 0 0 49 /**
 * Return the bytes left in the datagram.
 */ 1 4 this 3 1609  
304 0 0 6 363 1580 0 0 48 /**
 * Return the datagram of this iterator.
 */ 1 4 this 3 1609  
305 0 0 6 364 1440 0 0 100 /**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */ 1 4 this 3 1609  
306 0 0 4 365 1515 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 1609  3 out 1 1524  
307 0 0 4 366 1515 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 1609  3 out 1 1524  6 indent 5 1584  
308 0 0 7 367 1559 0 0 0 0 
309 0 0 6 371 1439 0 0 0 2 4 this 3 1611  4 data 1 1580  
310 0 0 6 372 1439 0 0 349 /**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 1611  6 result 1 1601  8 filename 1 1602  
311 0 0 6 372 1439 0 0 362 /**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 1611  6 result 1 1601  6 source 1 1612  
312 0 0 6 373 1439 0 0 0 1 4 this 3 1611  
313 0 0 4 374 1515 0 0 0 1 4 this 3 1611  
314 0 0 6 375 1602 0 0 159 /**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */ 1 4 this 3 1611  
315 0 0 7 376 1454 0 0 152 /**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */ 1 4 this 3 1611  
316 0 0 6 377 1458 0 0 322 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */ 1 4 this 3 1611  
317 0 0 15 392 1614 1048 0 0 1 6 param0 0 1454  
318 0 0 23 392 1614 1048 0 10 /**
 *
 */ 1 8 filename 1 1602  
319 0 0 6 393 1602 0 0 49 /**
 * Returns the filename of the reference.
 */ 1 4 this 3 1454  
320 0 0 7 394 1559 0 0 0 0 
321 0 0 7 390 1559 0 0 0 0 
322 0 0 6 386 1616 0 0 0 1 4 this 3 1615  
323 0 0 7 388 1571 909 0 0 1 4 this 3 1615  
324 0 0 7 411 1617 1070 0 10 /**
 *
 */ 0 
325 0 0 15 411 1617 1070 0 0 1 6 param0 0 1618  
326 0 0 4 412 1515 0 0 130 /**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */ 2 4 this 3 1617  3 pos 1 1440  
327 0 0 6 413 1440 0 0 106 /**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */ 1 4 this 3 1618  
328 0 0 38 414 1495 0 0 319 /**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */ 2 4 this 3 1617  6 length 1 1440  
329 0 0 38 415 1495 0 0 303 /**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */ 1 4 this 3 1617  
330 0 0 38 416 1495 0 0 0 1 4 this 3 1617  
331 0 0 38 417 1495 0 0 101 /**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */ 1 4 this 3 1618  
332 0 0 6 418 1440 0 0 58 /**
 * Returns the size of the entire buffer contents.
 */ 1 4 this 3 1618  
333 0 0 4 419 1515 0 0 47 /**
 * Empties the current buffer contents.
 */ 1 4 this 3 1617  
334 0 0 38 420 1495 0 0 0 1 4 this 3 1618  
335 0 0 36 421 1515 0 0 0 2 4 this 3 1617  5 state 1 1495  
336 0 0 7 424 1620 1101 0 10 /**
 *
 */ 0 
337 0 0 15 424 1620 1101 0 10 /**
 *
 */ 1 4 copy 1 1621  
338 0 0 6 425 1620 0 0 0 2 4 this 3 1620  4 copy 1 1621  
339 0 0 6 426 1439 0 0 0 2 4 this 3 1621  5 other 1 1621  
340 0 0 6 427 1439 0 0 0 2 4 this 3 1621  5 other 1 1621  
341 0 0 6 428 1439 0 0 0 2 4 this 3 1621  5 other 1 1621  
342 0 0 6 429 1443 0 0 10 /**
 *
 */ 2 4 this 3 1621  5 other 1 1621  
343 0 0 4 430 1515 0 0 86 /**
 * Generates a new HashVal representing the xor of this one and the other one.
 */ 2 4 this 3 1620  5 other 1 1621  
344 0 0 4 431 1515 0 0 65 /**
 * Outputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 1621  3 out 1 1524  
345 0 0 4 432 1515 0 0 64 /**
 * Inputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 1620  2 in 1 1622  
346 0 0 4 433 1515 0 0 64 /**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 1621  3 out 1 1524  
347 0 0 4 434 1515 0 0 63 /**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 1620  2 in 1 1622  
348 0 0 4 435 1515 0 0 128 /**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */ 2 4 this 3 1621  3 out 1 1524  
349 0 0 4 436 1515 0 0 125 /**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */ 2 4 this 3 1620  2 in 1 1622  
350 0 0 4 437 1515 0 0 10 /**
 *
 */ 2 4 this 3 1621  3 out 1 1524  
351 0 0 6 438 1561 0 0 69 /**
 * Returns the HashVal as a string with four decimal numbers.
 */ 1 4 this 3 1621  
352 0 0 6 439 1439 0 0 112 /**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */ 2 4 this 3 1620  4 text 1 1561  
353 0 0 6 440 1561 0 0 63 /**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */ 1 4 this 3 1621  
354 0 0 6 441 1439 0 0 111 /**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */ 2 4 this 3 1620  4 text 1 1561  
355 0 0 6 442 1582 0 0 58 /**
 * Returns the HashVal as a 16-byte binary string.
 */ 1 4 this 3 1621  
356 0 0 6 443 1439 0 0 106 /**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */ 2 4 this 3 1620  4 text 1 1582  
357 0 0 4 444 1515 0 0 10 /**
 *
 */ 2 4 this 3 1621  11 destination 1 1579  
358 0 0 4 445 1515 0 0 10 /**
 *
 */ 2 4 this 3 1620  6 source 1 1608  
359 0 0 4 446 1515 0 0 10 /**
 *
 */ 2 4 this 3 1621  11 destination 1 1623  
360 0 0 4 447 1515 0 0 10 /**
 *
 */ 2 4 this 3 1620  6 source 1 1625  
361 0 0 6 448 1439 0 0 123 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.
 */ 2 4 this 3 1620  8 filename 1 1602  
362 0 0 6 449 1439 0 0 123 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.
 */ 2 4 this 3 1620  6 stream 1 1622  
363 0 0 4 450 1515 0 0 66 /**
 * Generates the hash value by hashing the indicated data.
 */ 2 4 this 3 1620  7 ramfile 1 1618  
364 0 0 4 451 1515 0 0 66 /**
 * Generates the hash value by hashing the indicated data.
 */ 2 4 this 3 1620  4 data 1 1561  
365 0 0 4 452 1515 0 0 66 /**
 * Generates the hash value by hashing the indicated data.
 */ 2 4 this 3 1620  4 data 1 1582  
366 0 0 4 453 1515 0 0 66 /**
 * Generates the hash value by hashing the indicated data.
 */ 3 4 this 3 1620  6 buffer 1 1561  6 length 1 1440  
367 0 0 7 456 1568 1103 0 10 /**
 *
 */ 0 
368 0 0 15 456 1568 1103 0 0 1 6 param0 0 1627  
369 0 0 6 458 1440 0 0 53 /**
 * Returns the number of pointers in the set.
 */ 1 4 this 3 1627  
370 0 0 7 459 1571 909 0 46 /**
 * Returns the nth pointer of the set.
 */ 2 4 this 3 1627  1 n 1 1440  
371 0 0 6 461 1616 0 0 175 /**
 * Returns the nth pointer of the set, typecast to a TypedObject if possible.
 * If the pointer is not a TypedObject or if the cast cannot be made, returns
 * nullptr.
 */ 2 4 this 3 1627  1 n 1 1440  
372 0 0 7 463 1559 0 0 70 /**
 * Returns the actual type of the nth pointer, if it is known.
 */ 2 4 this 3 1627  1 n 1 1440  
373 0 0 6 464 1561 0 0 68 /**
 * Returns the type name of the nth pointer, if it is known.
 */ 2 4 this 3 1627  1 n 1 1440  
374 0 0 6 465 1499 0 0 197 /**
 * Returns the age of the nth pointer: the number of seconds elapsed between
 * the time it was allocated and the time it was added to this set via a call
 * to MemoryUsage::get_pointers().
 */ 2 4 this 3 1627  1 n 1 1440  
375 0 0 38 466 1495 0 0 0 2 4 this 3 1627  1 n 1 1440  
376 0 0 4 467 1515 0 0 39 /**
 * Empties the set of pointers.
 */ 1 4 this 3 1568  
377 0 0 4 468 1515 0 0 10 /**
 *
 */ 2 4 this 3 1627  3 out 1 1524  
378 0 0 7 471 1629 1116 0 10 /**
 *
 */ 0 
379 0 0 7 471 1629 1116 0 10 /**
 *
 */ 3 6 source 1 1630  5 start 1 1458  3 end 1 1458  
380 0 0 6 472 1629 0 0 391 /**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */ 4 4 this 3 1629  6 source 1 1630  5 start 1 1458  3 end 1 1458  
381 0 0 6 473 1629 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */ 1 4 this 3 1629  
382 0 0 7 477 1632 1120 0 10 /**
 *
 */ 0 
383 0 0 7 477 1632 1120 0 10 /**
 *
 */ 4 4 dest 1 1633  5 start 1 1458  3 end 1 1458  6 append 5 1439  
384 0 0 6 478 1632 0 0 383 /**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */ 5 4 this 3 1632  4 dest 1 1633  5 start 1 1458  3 end 1 1458  6 append 5 1439  
385 0 0 6 479 1632 0 0 90 /**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */ 1 4 this 3 1632  
386 0 0 7 483 1635 1124 0 10 /**
 *
 */ 0 
387 0 0 7 483 1635 1124 0 10 /**
 *
 */ 4 6 nested 1 1636  5 start 1 1458  3 end 1 1458  6 append 5 1439  
388 0 0 6 484 1635 0 0 278 /**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */ 5 4 this 3 1635  6 nested 1 1636  5 start 1 1458  3 end 1 1458  6 append 5 1439  
389 0 0 6 485 1635 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */ 1 4 this 3 1635  
390 0 0 7 488 1638 909 0 10 /**
 *
 */ 0 
391 0 0 6 489 1439 0 0 352 /**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */ 3 4 this 3 1638  14 multifile_name 1 1602  6 offset 5 1458  
392 0 0 6 489 1439 0 0 333 /**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 4 4 this 3 1638  16 multifile_stream 1 1630  12 owns_pointer 5 1439  6 offset 5 1458  
393 0 0 6 490 1439 0 0 420 /**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 1638  14 multifile_name 1 1602  
394 0 0 6 490 1439 0 0 333 /**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 1638  16 multifile_stream 1 1524  12 owns_pointer 5 1439  
395 0 0 6 491 1439 0 0 360 /**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */ 2 4 this 3 1638  14 multifile_name 1 1602  
396 0 0 6 491 1439 0 0 365 /**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 1638  16 multifile_stream 1 1639  12 owns_pointer 5 1439  
397 0 0 4 492 1515 0 0 169 /**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */ 1 4 this 3 1638  
398 0 0 6 493 1602 0 0 69 /**
 * Returns the filename of the Multifile, if it is available.
 */ 1 4 this 3 1640  
399 0 0 4 494 1515 0 0 209 /**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */ 2 4 this 3 1638  14 multifile_name 1 1602  
400 0 0 6 495 1439 0 0 154 /**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */ 1 4 this 3 1640  
401 0 0 6 496 1439 0 0 162 /**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */ 1 4 this 3 1640  
402 0 0 6 497 1439 0 0 118 /**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */ 1 4 this 3 1640  
403 0 0 6 498 1605 0 0 299 /**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */ 1 4 this 3 1640  
404 0 0 4 499 1515 0 0 206 /**
 * Changes the overall modification timestamp of the multifile.  Note that this
 * will be reset to the current time every time you modify a subfile.
 * Only set this if you know what you are doing!
 */ 2 4 this 3 1638  9 timestamp 1 1605  
405 0 0 4 500 1515 0 0 529 /**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */ 2 4 this 3 1638  16 record_timestamp 1 1439  
406 0 0 6 501 1439 0 0 137 /**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */ 1 4 this 3 1640  
407 0 0 4 502 1515 0 0 782 /**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */ 2 4 this 3 1638  12 scale_factor 1 1440  
408 0 0 6 503 1440 0 0 92 /**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */ 1 4 this 3 1640  
409 0 0 4 504 1515 0 0 461 /**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */ 2 4 this 3 1638  4 flag 1 1439  
410 0 0 6 505 1439 0 0 163 /**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */ 1 4 this 3 1640  
411 0 0 4 506 1515 0 0 659 /**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */ 2 4 this 3 1638  20 encryption_algorithm 1 1561  
412 0 0 6 507 1561 0 0 96 /**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */ 1 4 this 3 1640  
413 0 0 4 508 1515 0 0 611 /**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */ 2 4 this 3 1638  21 encryption_key_length 1 1443  
414 0 0 6 509 1443 0 0 108 /**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */ 1 4 this 3 1640  
415 0 0 4 510 1515 0 0 740 /**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */ 2 4 this 3 1638  26 encryption_iteration_count 1 1443  
416 0 0 6 511 1443 0 0 84 /**
 * Returns the value that was specified by set_encryption_iteration_count().
 */ 1 4 this 3 1640  
417 0 0 6 512 1561 0 0 618 /**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1638  12 subfile_name 1 1561  8 filename 1 1602  17 compression_level 1 1443  
418 0 0 6 512 1561 0 0 777 /**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1638  12 subfile_name 1 1561  12 subfile_data 1 1622  17 compression_level 1 1443  
419 0 0 6 513 1561 0 0 451 /**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */ 4 4 this 3 1638  12 subfile_name 1 1561  8 filename 1 1602  17 compression_level 1 1443  
420 0 0 38 514 1495 0 0 0 2 4 this 3 1640  19 encryption_password 1 1495  
421 0 0 38 515 1495 0 0 141 /**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */ 1 4 this 3 1640  
422 0 0 6 516 1439 0 0 1292 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */ 5 4 this 3 1638  11 certificate 1 1602  5 chain 1 1602  4 pkey 1 1602  8 password 5 1561  
423 0 0 6 516 1439 0 0 724 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */ 3 4 this 3 1638  9 composite 1 1602  8 password 5 1561  
424 0 0 6 517 1443 0 0 555 /**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */ 1 4 this 3 1640  
425 0 0 6 518 1561 0 0 352 /**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */ 2 4 this 3 1640  1 n 1 1443  
426 0 0 6 519 1561 0 0 299 /**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */ 2 4 this 3 1640  1 n 1 1443  
427 0 0 6 520 1561 0 0 379 /**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */ 2 4 this 3 1640  1 n 1 1443  
428 0 0 4 521 1515 0 0 158 /**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 1640  1 n 1 1443  3 out 1 1524  
429 0 0 4 522 1515 0 0 140 /**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 1640  1 n 1 1443  3 out 1 1524  
430 0 0 6 523 1443 0 0 289 /**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */ 2 4 this 3 1640  1 n 1 1443  
431 0 0 6 524 1439 0 0 691 /**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1638  
432 0 0 6 525 1439 0 0 587 /**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1638  
433 0 0 6 526 1443 0 0 169 /**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */ 1 4 this 3 1640  
434 0 0 6 527 1443 0 0 127 /**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */ 2 4 this 3 1640  12 subfile_name 1 1561  
435 0 0 6 528 1439 0 0 203 /**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */ 2 4 this 3 1640  12 subfile_name 1 1561  
436 0 0 6 529 1439 0 0 420 /**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */ 3 4 this 3 1640  8 contents 1 1642  12 subfile_name 1 1561  
437 0 0 4 530 1515 0 0 435 /**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1638  5 index 1 1443  
438 0 0 6 530 1439 0 0 475 /**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1638  12 subfile_name 1 1561  
439 0 0 6 531 1561 0 0 47 /**
 * Returns the name of the nth subfile.
 */ 2 4 this 3 1640  5 index 1 1443  
440 0 0 6 533 1440 0 0 170 /**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */ 2 4 this 3 1640  5 index 1 1443  
441 0 0 6 534 1605 0 0 270 /**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */ 2 4 this 3 1640  5 index 1 1443  
442 0 0 6 535 1439 0 0 120 /**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */ 2 4 this 3 1640  5 index 1 1443  
443 0 0 6 536 1439 0 0 119 /**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */ 2 4 this 3 1640  5 index 1 1443  
444 0 0 6 537 1439 0 0 343 /**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */ 2 4 this 3 1640  5 index 1 1443  
445 0 0 6 538 1458 0 0 371 /**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */ 1 4 this 3 1640  
446 0 0 6 539 1458 0 0 338 /**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */ 2 4 this 3 1640  5 index 1 1443  
447 0 0 6 540 1440 0 0 322 /**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */ 2 4 this 3 1640  5 index 1 1443  
448 0 0 6 541 1582 0 0 96 /**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */ 2 4 this 3 1638  5 index 1 1443  
449 0 0 6 542 1622 0 0 745 /**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */ 2 4 this 3 1638  5 index 1 1443  
450 0 0 4 543 1515 0 0 246 /**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1622  
451 0 0 6 544 1439 0 0 68 /**
 * Extracts the nth subfile into a file with the given name.
 */ 3 4 this 3 1638  5 index 1 1443  8 filename 1 1602  
452 0 0 6 545 1439 0 0 61 /**
 * Extracts the nth subfile to the indicated ostream.
 */ 3 4 this 3 1638  5 index 1 1443  3 out 1 1524  
453 0 0 6 546 1439 0 0 509 /**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */ 3 4 this 3 1638  5 index 1 1443  8 filename 1 1602  
454 0 0 4 547 1515 0 0 10 /**
 *
 */ 2 4 this 3 1640  3 out 1 1524  
455 0 0 4 548 1515 0 0 61 /**
 * Shows a list of all subfiles within the Multifile.
 */ 2 4 this 3 1640  3 out 5 1524  
456 0 0 6 549 1561 0 0 108 /**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */ 0 
457 0 0 4 553 1515 0 0 644 /**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */ 2 4 this 3 1638  13 header_prefix 1 1561  
458 0 0 6 554 1561 0 0 113 /**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */ 1 4 this 3 1640  
459 0 0 15 556 1647 1195 0 0 1 6 param0 0 1645  
460 0 0 7 556 1647 1195 0 10 /**
 *
 */ 1 12 initial_name 5 1561  
461 0 0 4 557 1515 0 0 10 /**
 *
 */ 2 4 this 3 1647  4 name 1 1561  
462 0 0 4 558 1515 0 0 46 /**
 * Resets the Namable's name to empty.
 */ 1 4 this 3 1647  
463 0 0 6 559 1439 0 0 94 /**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */ 1 4 this 3 1645  
464 0 0 6 560 1561 0 0 10 /**
 *
 */ 1 4 this 3 1645  
465 0 0 4 563 1515 0 0 148 /**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */ 2 4 this 3 1645  3 out 1 1524  
466 0 0 7 564 1559 0 0 0 0 
467 0 0 4 567 1515 0 0 200 /**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */ 1 4 this 3 1648  
468 0 0 6 568 1443 0 0 436 /**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1648  8 filename 1 1602  
469 0 0 6 569 1443 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 1648  4 data 1 1561  9 data_size 1 1440  
470 0 0 6 569 1443 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1648  4 data 1 1561  
471 0 0 6 570 1443 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 1648  4 data 1 1561  9 data_size 1 1440  
472 0 0 6 570 1443 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1648  4 data 1 1561  
473 0 0 6 571 1649 0 0 378 /**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */ 1 4 this 3 1648  
474 0 0 4 572 1515 0 0 277 /**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */ 1 4 this 3 1648  
475 0 0 4 573 1515 0 0 84 /**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */ 1 4 this 3 1648  
476 0 0 6 574 1648 0 0 10 /**
 *
 */ 0 
477 0 0 7 576 1601 1212 0 10 /**
 *
 */ 0 
478 0 0 7 576 1601 1212 0 10 /**
 *
 */ 3 4 file 1 1454  5 start 1 1458  4 size 1 1652  
479 0 0 7 576 1601 1212 0 10 /**
 *
 */ 3 8 filename 1 1602  5 start 1 1458  4 size 1 1652  
480 0 0 15 576 1601 1212 0 10 /**
 *
 */ 1 4 copy 1 1612  
481 0 0 6 577 1601 0 0 0 2 4 this 3 1601  4 copy 1 1612  
482 0 0 6 578 1439 0 0 98 /**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */ 1 4 this 3 1612  
483 0 0 7 579 1454 0 0 63 /**
 * Returns the FileReference that represents this file.
 */ 1 4 this 3 1612  
484 0 0 6 580 1602 0 0 38 /**
 * A shortcut to the filename.
 */ 1 4 this 3 1612  
485 0 0 6 581 1458 0 0 77 /**
 * Returns the offset within the file at which this file data begins.
 */ 1 4 this 3 1612  
486 0 0 6 582 1652 0 0 115 /**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */ 1 4 this 3 1612  
487 0 0 4 583 1515 0 0 10 /**
 *
 */ 2 4 this 3 1612  3 out 1 1524  
488 0 0 6 586 1655 0 0 0 1 4 this 3 1653  
489 0 0 7 587 1656 0 0 0 1 4 this 3 1653  
490 0 0 6 588 1602 0 0 166 /**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */ 1 4 this 3 1653  
491 0 0 6 589 1439 0 0 61 /**
 * Returns true if this file exists, false otherwise.
 */ 1 4 this 3 1653  
492 0 0 6 590 1439 0 0 117 /**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */ 1 4 this 3 1653  
493 0 0 6 591 1439 0 0 115 /**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */ 1 4 this 3 1653  
494 0 0 6 592 1439 0 0 153 /**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */ 1 4 this 3 1653  
495 0 0 6 593 1439 0 0 199 /**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */ 1 4 this 3 1607  
496 0 0 6 594 1439 0 0 589 /**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 2 4 this 3 1607  8 new_file 1 1607  
497 0 0 6 595 1439 0 0 123 /**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 1607  8 new_file 1 1607  
498 0 0 7 596 1657 909 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 1 4 this 3 1653  
499 0 0 4 597 1515 0 0 10 /**
 *
 */ 2 4 this 3 1653  3 out 1 1524  
500 0 0 4 598 1515 0 0 66 /**
 * If the file represents a directory, lists its contents.
 */ 2 4 this 3 1653  3 out 5 1524  
501 0 0 4 599 1515 0 0 113 /**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */ 2 4 this 3 1653  3 out 5 1524  
502 0 0 38 600 1495 0 0 63 /**
 * Returns the entire contents of the file as a string.
 */ 2 4 this 3 1653  11 auto_unwrap 1 1439  
503 0 0 6 601 1622 0 0 179 /**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */ 2 4 this 3 1653  11 auto_unwrap 1 1439  
504 0 0 4 602 1515 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1653  6 stream 1 1622  
505 0 0 6 603 1439 0 0 324 /**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */ 1 4 this 3 1653  
506 0 0 38 604 1495 0 0 0 3 4 this 3 1607  4 data 1 1495  9 auto_wrap 1 1439  
507 0 0 6 605 1524 0 0 179 /**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 3 4 this 3 1607  9 auto_wrap 1 1439  8 truncate 1 1439  
508 0 0 6 606 1524 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 1 4 this 3 1607  
509 0 0 4 607 1515 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1607  6 stream 1 1524  
510 0 0 6 608 1639 0 0 180 /**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 2 4 this 3 1607  8 truncate 1 1439  
511 0 0 6 609 1639 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 1 4 this 3 1607  
512 0 0 4 610 1515 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1607  6 stream 1 1639  
513 0 0 6 611 1652 0 0 105 /**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */ 1 4 this 3 1653  
514 0 0 6 611 1652 0 0 222 /**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */ 2 4 this 3 1653  6 stream 1 1622  
515 0 0 6 612 1605 0 0 434 /**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */ 1 4 this 3 1653  
516 0 0 6 613 1439 0 0 330 /**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */ 2 4 this 3 1607  4 info 1 1601  
517 0 0 7 614 1559 0 0 0 0 
518 0 0 7 617 1559 0 0 0 0 
519 0 0 6 620 1655 0 0 68 /**
 * Returns the file system this mount object is attached to.
 */ 1 4 this 3 1658  
520 0 0 6 621 1602 0 0 161 /**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */ 1 4 this 3 1658  
521 0 0 6 622 1443 0 0 100 /**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */ 1 4 this 3 1658  
522 0 0 4 623 1515 0 0 10 /**
 *
 */ 2 4 this 3 1658  3 out 1 1524  
523 0 0 4 624 1515 0 0 10 /**
 *
 */ 2 4 this 3 1658  3 out 1 1524  
524 0 0 7 625 1559 0 0 0 0 
525 0 0 23 627 1660 1044 0 10 /**
 *
 */ 1 9 multifile 1 1638  
526 0 0 7 628 1638 909 0 76 /**
 * Returns the Multifile pointer that this mount object is based on.
 */ 1 4 this 3 1661  
527 0 0 7 629 1559 0 0 0 0 
528 0 0 7 631 1663 1256 0 10 /**
 *
 */ 0 
529 0 0 7 632 1559 0 0 0 0 
530 0 0 23 635 1664 1260 0 10 /**
 *
 */ 1 17 physical_filename 1 1602  
531 0 0 6 636 1602 0 0 112 /**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */ 1 4 this 3 1665  
532 0 0 7 637 1559 0 0 0 0 
533 0 0 7 640 1667 909 0 10 /**
 *
 */ 0 
534 0 0 6 641 1439 0 0 354 /**
 * Opens the named ZipArchive on disk for reading.  The ZipArchive index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */ 2 4 this 3 1667  8 filename 1 1602  
535 0 0 6 641 1439 0 0 375 /**
 * Opens an anonymous ZipArchive for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 *
 * The given stream must be seekable.
 */ 3 4 this 3 1667  6 stream 1 1630  12 owns_pointer 5 1439  
536 0 0 6 642 1439 0 0 422 /**
 * Opens the named ZipArchive on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The ZipArchive is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 1667  8 filename 1 1602  
537 0 0 6 642 1439 0 0 257 /**
 * Opens an anonymous ZipArchive for writing using an ostream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 */ 3 4 this 3 1667  6 stream 1 1524  12 owns_pointer 5 1439  
538 0 0 6 643 1439 0 0 361 /**
 * Opens the named ZipArchive on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */ 2 4 this 3 1667  8 filename 1 1602  
539 0 0 6 643 1439 0 0 366 /**
 * Opens an anonymous ZipArchive for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the ZipArchive assumes ownership of the stream
 * pointer and will delete it when the ZIP file is closed, including if this
 * function returns false.
 */ 3 4 this 3 1667  6 stream 1 1639  12 owns_pointer 5 1439  
540 0 0 6 644 1439 0 0 69 /**
 * Verifies the integrity of the contents of the ZIP archive.
 */ 1 4 this 3 1667  
541 0 0 4 645 1515 0 0 170 /**
 * Closes the ZipArchive if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */ 1 4 this 3 1667  
542 0 0 6 646 1602 0 0 70 /**
 * Returns the filename of the ZipArchive, if it is available.
 */ 1 4 this 3 1668  
543 0 0 4 647 1515 0 0 210 /**
 * Replaces the filename of the ZipArchive.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */ 2 4 this 3 1667  8 filename 1 1602  
544 0 0 6 648 1439 0 0 155 /**
 * Returns true if the ZipArchive has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */ 1 4 this 3 1668  
545 0 0 6 649 1439 0 0 164 /**
 * Returns true if the ZipArchive has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the ZipArchive.
 */ 1 4 this 3 1668  
546 0 0 6 650 1439 0 0 150 /**
 * Returns true if the ZipArchive index is suboptimal and should be repacked.
 * Call repack() to achieve this.  It is not done automatically.
 */ 1 4 this 3 1668  
547 0 0 4 651 1515 0 0 488 /**
 * Sets the flag indicating whether timestamps should be recorded within the
 * ZipArchive or not.  The default is true, indicating the ZipArchive will
 * record timestamps for each subfile that is added.
 *
 * If this is false, the ZipArchive will not record timestamps internally.  In
 * this case, the return value from get_subfile_timestamp() will be zero.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated ZipArchives.
 */ 2 4 this 3 1667  16 record_timestamp 1 1439  
548 0 0 6 652 1439 0 0 138 /**
 * Returns the flag indicating whether timestamps should be recorded within
 * the ZipArchive or not.  See set_record_timestamp().
 */ 1 4 this 3 1668  
549 0 0 6 653 1561 0 0 464 /**
 * Adds a file on disk as a subfile to the ZipArchive.  The file named by
 * filename will be read and added to the ZipArchive immediately, but the index
 * will not be updated until you call flush().  If there already exists a
 * subfile with the indicated name, it is replaced without examining its
 * contents (but see also update_subfile).
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1667  12 subfile_name 1 1561  8 filename 1 1602  17 compression_level 1 1443  
550 0 0 6 653 1561 0 0 490 /**
 * Adds a file from a stream as a subfile to the ZipArchive.  The indicated
 * istream will be read and its contents added to the end of the current ZIP
 * file immediately.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the index of the ZIP archive will be
 * rewritten to the end of the file.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1667  12 subfile_name 1 1561  12 subfile_data 1 1622  17 compression_level 1 1443  
551 0 0 6 654 1561 0 0 450 /**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the ZIP file is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */ 4 4 this 3 1667  12 subfile_name 1 1561  8 filename 1 1602  17 compression_level 1 1443  
552 0 0 6 655 1439 0 0 848 /**
 * Adds a new JAR-style signature to the .zip file.  The file must have been
 * opened in read/write mode.
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_jar_signature() reads the certificate and private key
 * from a PEM-formatted file, for instance as generated by the openssl command.
 * If the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 *
 * It's possible to add multiple signatures, by providing multiple unique
 * aliases.  Note that aliases are considered case-insensitively and only the
 * first 8 characters are considered.
 *
 * There is no separate parameter to pass a certificate chain.  Instead, any
 * necessary certificates are expected to be in the certificate file.
 */ 5 4 this 3 1667  11 certificate 1 1602  4 pkey 1 1602  8 password 5 1561  5 alias 5 1561  
553 0 0 6 656 1439 0 0 596 /**
 * Ensures that any changes made to the ZIP archive have been synchronized to
 * disk.  In particular, this causes the central directory to be rewritten at
 * the end of the file.
 *
 * This may result in a suboptimal packing in the ZIP file, especially if
 * existing files were changed or files were removed.  To guarantee that the
 * file is as compact as it can be, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1667  
554 0 0 6 657 1439 0 0 515 /**
 * Forces a complete rewrite of the ZipArchive and all of its contents, so that
 * the files are tightly packed in the file without any gaps.  This is useful to
 * do after removing files, to ensure that the file size is minimized.
 *
 * It is only valid to call this if the ZipArchive was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the ZipArchive.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1667  
555 0 0 6 658 1443 0 0 170 /**
 * Returns the number of subfiles within the ZipArchive.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */ 1 4 this 3 1668  
556 0 0 6 659 1443 0 0 128 /**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the ZipArchive.
 */ 2 4 this 3 1668  12 subfile_name 1 1561  
557 0 0 6 660 1439 0 0 205 /**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the ZipArchive.  That is, the ZipArchive contains at
 * least one file named "subfile_name/...".
 */ 2 4 this 3 1668  12 subfile_name 1 1561  
558 0 0 6 661 1439 0 0 422 /**
 * Considers subfile_name to be the name of a subdirectory within the
 * ZipArchive, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a ZipArchive; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */ 3 4 this 3 1668  8 contents 1 1642  12 subfile_name 1 1561  
559 0 0 4 662 1515 0 0 437 /**
 * Removes the nth subfile from the ZipArchive.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The ZipArchive will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1667  5 index 1 1443  
560 0 0 6 662 1439 0 0 477 /**
 * Removes the named subfile from the ZipArchive, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The ZipArchive will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1667  12 subfile_name 1 1561  
561 0 0 6 663 1561 0 0 47 /**
 * Returns the name of the nth subfile.
 */ 2 4 this 3 1668  5 index 1 1443  
562 0 0 6 665 1440 0 0 67 /**
 * Returns the uncompressed data length of the nth subfile.
 */ 2 4 this 3 1668  5 index 1 1443  
563 0 0 6 666 1605 0 0 270 /**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .zip file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall ZIP file.
 */ 2 4 this 3 1668  5 index 1 1443  
564 0 0 6 667 1439 0 0 120 /**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */ 2 4 this 3 1668  5 index 1 1443  
565 0 0 6 668 1439 0 0 119 /**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */ 2 4 this 3 1668  5 index 1 1443  
566 0 0 6 669 1458 0 0 339 /**
 * Returns the starting byte position within the ZipArchive at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */ 2 4 this 3 1668  5 index 1 1443  
567 0 0 6 670 1440 0 0 322 /**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */ 2 4 this 3 1668  5 index 1 1443  
568 0 0 6 671 1582 0 0 96 /**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */ 2 4 this 3 1667  5 index 1 1443  
569 0 0 6 672 1622 0 0 747 /**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the ZipArchive itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the ZipArchive destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */ 2 4 this 3 1667  5 index 1 1443  
570 0 0 4 673 1515 0 0 246 /**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1622  
571 0 0 6 674 1439 0 0 68 /**
 * Extracts the nth subfile into a file with the given name.
 */ 3 4 this 3 1667  5 index 1 1443  8 filename 1 1602  
572 0 0 6 675 1439 0 0 61 /**
 * Extracts the nth subfile to the indicated ostream.
 */ 3 4 this 3 1667  5 index 1 1443  3 out 1 1524  
573 0 0 6 676 1439 0 0 509 /**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */ 3 4 this 3 1667  5 index 1 1443  8 filename 1 1602  
574 0 0 4 677 1515 0 0 10 /**
 *
 */ 2 4 this 3 1668  3 out 1 1524  
575 0 0 4 678 1515 0 0 62 /**
 * Shows a list of all subfiles within the ZipArchive.
 */ 2 4 this 3 1668  3 out 5 1524  
576 0 0 4 679 1515 0 0 136 /**
 * Sets the string which is appended to the very end of the ZIP archive.
 * This string may not be longer than 65535 characters.
 */ 2 4 this 3 1667  7 comment 1 1561  
577 0 0 6 680 1561 0 0 126 /**
 * Returns the comment string that was at the end of the ZIP end-of-directory
 * record, if any.
 * See set_comment().
 */ 1 4 this 3 1668  
578 0 0 23 682 1670 1044 0 10 /**
 *
 */ 2 7 archive 1 1667  9 directory 5 1602  
579 0 0 7 683 1667 909 0 77 /**
 * Returns the ZipArchive pointer that this mount object is based on.
 */ 1 4 this 3 1671  
580 0 0 7 684 1559 0 0 0 0 
581 0 0 7 686 1675 1044 0 69 /**
 * Returns the VirtualFileMount this file is associated with.
 */ 1 4 this 3 1673  
582 0 0 6 687 1439 0 0 174 /**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */ 1 4 this 3 1673  
583 0 0 7 688 1559 0 0 0 0 
584 0 0 7 691 1676 1048 0 10 /**
 *
 */ 1 8 filename 1 1602  
585 0 0 15 691 1676 1048 0 0 1 6 param0 0 1677  
586 0 0 7 692 1559 0 0 0 0 
587 0 0 7 694 1679 1313 0 10 /**
 *
 */ 0 
588 0 0 7 694 1679 1313 0 10 /**
 *
 */ 4 6 source 1 1622  11 owns_source 1 1439  13 source_length 5 1652  6 header 5 1439  
589 0 0 6 695 1679 0 0 10 /**
 *
 */ 5 4 this 3 1679  6 source 1 1622  11 owns_source 1 1439  13 source_length 5 1652  6 header 5 1439  
590 0 0 6 696 1679 0 0 118 /**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */ 1 4 this 3 1679  
591 0 0 7 699 1680 1317 0 10 /**
 *
 */ 0 
592 0 0 7 699 1680 1317 0 10 /**
 *
 */ 4 4 dest 1 1524  9 owns_dest 1 1439  17 compression_level 5 1443  6 header 5 1439  
593 0 0 6 700 1680 0 0 10 /**
 *
 */ 5 4 this 3 1680  4 dest 1 1524  9 owns_dest 1 1439  17 compression_level 5 1443  6 header 5 1439  
594 0 0 6 701 1680 0 0 114 /**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */ 1 4 this 3 1680  
595 0 0 15 711 1657 909 0 0 1 6 param0 0 1681  
596 0 0 6 704 1440 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 1681  
597 0 0 7 705 1607 1242 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 1681  1 n 1 1440  
598 0 0 7 707 1607 1242 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 1681  1 n 1 1440  
599 0 0 6 708 1440 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 1681  
600 0 0 7 709 1657 909 0 0 2 4 this 3 1657  5 other 1 1681  
601 0 0 7 710 1657 909 0 0 2 4 this 3 1681  5 other 1 1681  
602 0 0 7 713 1655 1326 0 10 /**
 *
 */ 0 
603 0 0 6 716 1439 0 0 1009 /**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */ 5 4 this 3 1655  17 physical_filename 1 1602  11 mount_point 1 1602  5 flags 1 1443  8 password 5 1561  
604 0 0 6 716 1439 0 0 67 /**
 * Mounts the indicated Multifile at the given mount point.
 */ 4 4 this 3 1655  9 multifile 1 1638  11 mount_point 1 1602  5 flags 1 1443  
605 0 0 6 716 1439 0 0 208 /**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function than the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */ 4 4 this 3 1655  5 mount 1 1675  11 mount_point 1 1602  5 flags 1 1443  
606 0 0 6 716 1439 0 0 68 /**
 * Mounts the indicated ZipArchive at the given mount point.
 */ 4 4 this 3 1655  7 archive 1 1667  11 mount_point 1 1602  5 flags 1 1443  
607 0 0 6 717 1439 0 0 587 /**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */ 5 4 this 3 1655  16 virtual_filename 1 1602  11 mount_point 1 1602  5 flags 1 1443  8 password 5 1561  
608 0 0 6 718 1443 0 0 156 /**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 1655  17 physical_filename 1 1602  
609 0 0 6 718 1443 0 0 132 /**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 1655  9 multifile 1 1638  
610 0 0 6 718 1443 0 0 127 /**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 1655  5 mount 1 1675  
611 0 0 6 718 1443 0 0 133 /**
 * Unmounts all appearances of the indicated ZipArchive from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 1655  7 archive 1 1667  
612 0 0 6 719 1443 0 0 136 /**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 1655  11 mount_point 1 1602  
613 0 0 6 720 1443 0 0 96 /**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */ 1 4 this 3 1655  
614 0 0 6 721 1443 0 0 65 /**
 * Returns the number of individual mounts in the system.
 */ 1 4 this 3 1683  
615 0 0 7 722 1675 1044 0 47 /**
 * Returns the nth mount in the system.
 */ 2 4 this 3 1683  1 n 1 1443  
616 0 0 6 735 1439 0 0 171 /**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */ 2 4 this 3 1655  13 new_directory 1 1602  
617 0 0 7 736 1656 0 0 60 /**
 * Returns the current directory name.  See chdir().
 */ 1 4 this 3 1683  
618 0 0 6 737 1439 0 0 263 /**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */ 2 4 this 3 1655  8 filename 1 1602  
619 0 0 6 738 1439 0 0 169 /**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */ 2 4 this 3 1655  8 filename 1 1602  
620 0 0 7 739 1607 1242 0 537 /**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */ 3 4 this 3 1683  8 filename 1 1602  11 status_only 5 1439  
621 0 0 7 740 1607 1242 0 298 /**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */ 2 4 this 3 1655  8 filename 1 1602  
622 0 0 7 741 1607 1242 0 173 /**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */ 4 4 this 3 1683  8 filename 1 1602  10 searchpath 1 1685  11 status_only 5 1439  
623 0 0 6 742 1439 0 0 208 /**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */ 2 4 this 3 1655  8 filename 1 1602  
624 0 0 6 743 1439 0 0 599 /**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 3 4 this 3 1655  13 orig_filename 1 1602  12 new_filename 1 1602  
625 0 0 6 744 1439 0 0 131 /**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */ 3 4 this 3 1655  13 orig_filename 1 1602  12 new_filename 1 1602  
626 0 0 6 745 1439 0 0 174 /**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */ 4 4 this 3 1683  8 filename 1 1656  10 searchpath 1 1685  17 default_extension 5 1561  
627 0 0 6 746 1443 0 0 363 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */ 4 4 this 3 1683  8 filename 1 1602  10 searchpath 1 1685  7 results 1 1688  
628 0 0 6 747 1439 0 0 111 /**
 * Convenience function; returns true if the named file exists in the virtual
 * file system hierarchy.
 */ 2 4 this 3 1683  8 filename 1 1602  
629 0 0 6 748 1439 0 0 126 /**
 * Convenience function; returns true if the named file exists as a directory in
 * the virtual file system hierarchy.
 */ 2 4 this 3 1683  8 filename 1 1602  
630 0 0 6 749 1439 0 0 129 /**
 * Convenience function; returns true if the named file exists as a regular file
 * in the virtual file system hierarchy.
 */ 2 4 this 3 1683  8 filename 1 1602  
631 0 0 7 750 1657 909 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 2 4 this 3 1683  8 filename 1 1602  
632 0 0 4 751 1515 0 0 80 /**
 * Convenience function; lists the files within the indicated directory.
 */ 2 4 this 3 1683  8 filename 1 1602  
633 0 0 4 752 1515 0 0 117 /**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */ 2 4 this 3 1683  8 filename 1 1602  
634 0 0 4 753 1515 0 0 75 /**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */ 2 4 this 3 1683  3 out 1 1524  
635 0 0 6 754 1655 0 0 423 /**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */ 0 
636 0 0 38 755 1495 0 0 365 /**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 1683  8 filename 1 1602  11 auto_unwrap 1 1439  
637 0 0 6 756 1622 0 0 424 /**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 1683  8 filename 1 1602  11 auto_unwrap 1 1439  
638 0 0 4 757 1515 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1622  
639 0 0 38 758 1495 0 0 0 4 4 this 3 1655  8 filename 1 1602  4 data 1 1495  9 auto_wrap 1 1439  
640 0 0 6 759 1524 0 0 345 /**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */ 4 4 this 3 1655  8 filename 1 1602  9 auto_wrap 1 1439  8 truncate 1 1439  
641 0 0 6 760 1524 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 2 4 this 3 1655  8 filename 1 1602  
642 0 0 4 761 1515 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1524  
643 0 0 6 762 1639 0 0 169 /**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */ 3 4 this 3 1655  8 filename 1 1602  8 truncate 1 1439  
644 0 0 6 763 1639 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 2 4 this 3 1655  8 filename 1 1602  
645 0 0 4 764 1515 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1639  
646 0 0 7 729 1690 1341 0 0 0 
647 0 0 15 729 1690 1341 0 0 1 4 copy 1 1675  
648 0 0 23 729 1690 1341 0 0 1 3 ptr 1 1675  
649 0 0 7 729 1690 1341 0 0 1 6 param0 0 1691  
650 0 0 7 730 1675 1044 0 289 // If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness. 1 4 this 3 1692  
651 0 0 6 731 1690 0 0 0 2 4 this 3 1690  4 copy 1 1675  
652 0 0 6 731 1690 0 0 0 2 4 this 3 1690  3 ptr 1 1675  
653 0 0 6 732 1439 0 0 0 1 4 this 3 1692  
654 0 0 4 733 1515 0 0 0 1 4 this 3 1690  
655 0 0 4 727 1515 0 0 0 1 4 this 3 1694  
656 0 0 4 728 1515 0 0 0 2 4 this 3 1695  3 out 1 1524  
657 0 0 7 766 1697 1377 0 10 /**
 *
 */ 0 
658 0 0 55 766 1697 1377 0 0 1 6 source 1 1495  
659 0 0 4 767 1515 0 0 30 /**
 * Empties the buffer.
 */ 1 4 this 3 1697  
660 0 0 6 768 1440 0 0 86 /**
 * Returns the number of characters available to be read from the data stream.
 */ 1 4 this 3 1697  
661 0 0 38 769 1495 0 0 63 /**
 * Returns the contents of the data stream as a string.
 */ 1 4 this 3 1697  
662 0 0 36 770 1515 0 0 0 2 4 this 3 1697  4 data 1 1495  
663 0 0 6 777 1499 0 0 203 // get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul. 1 4 this 3 1698  
664 0 0 6 780 1499 0 0 206 // get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely. 1 4 this 3 1698  
665 0 0 6 782 1499 0 0 144 // get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS. 1 4 this 3 1698  
666 0 0 6 784 1443 0 0 369 /**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */ 1 4 this 3 1699  
667 0 0 6 786 1698 0 0 70 /**
 * Returns a pointer to the one TrueClock object in the world.
 */ 0 
668 0 0 6 787 1439 0 0 10 /**
 *
 */ 2 4 this 3 1699  4 mask 1 1594  
669 0 0 7 789 1701 1385 0 60 /**
 * Create a patch file and initializes internal data
 */ 0 
670 0 0 7 789 1701 1385 0 49 /**
 * Create patch file with buffer to patch
 */ 1 6 buffer 1 1575  
671 0 0 6 791 1439 0 0 359 /**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */ 4 4 this 3 1701  9 file_orig 1 1656  8 file_new 1 1656  10 patch_name 1 1656  
672 0 0 6 792 1443 0 0 193 /**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */ 2 4 this 3 1701  10 patch_file 1 1602  
673 0 0 6 793 1443 0 0 107 /**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */ 3 4 this 3 1701  10 patch_file 1 1602  4 file 1 1602  
674 0 0 6 793 1443 0 0 127 /**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */ 4 4 this 3 1701  10 patch_file 1 1602  9 orig_file 1 1602  11 target_file 1 1602  
675 0 0 6 794 1443 0 0 390 /**
 * Perform one buffer's worth of patching.
 * Returns one of the following values:
 * @li @c EU_ok : while patching
 * @li @c EU_success : when done
 * @li @c EU_error_abort : Patching has not been initiated
 * @li @c EU_error_file_invalid : file is corrupted
 * @li @c EU_error_invalid_checksum : incompatible patch file
 * @li @c EU_error_write_file_rename : could not rename file
 */ 1 4 this 3 1701  
676 0 0 6 795 1439 0 0 171 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */ 3 4 this 3 1701  10 patch_file 1 1656  4 file 1 1656  
677 0 0 6 795 1439 0 0 138 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */ 4 4 this 3 1701  10 patch_file 1 1656  9 orig_file 1 1656  11 target_file 1 1602  
678 0 0 6 796 1501 0 0 125 /**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */ 1 4 this 3 1702  
679 0 0 4 800 1515 0 0 362 /**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */ 2 4 this 3 1701  15 allow_multifile 1 1439  
680 0 0 6 801 1439 0 0 37 /**
 * See set_allow_multifile().
 */ 1 4 this 3 1701  
681 0 0 4 803 1515 0 0 10 /**
 *
 */ 2 4 this 3 1701  6 length 1 1443  
682 0 0 6 804 1443 0 0 10 /**
 *
 */ 1 4 this 3 1701  
683 0 0 4 805 1515 0 0 10 /**
 *
 */ 1 4 this 3 1701  
684 0 0 6 807 1439 0 0 145 /**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */ 1 4 this 3 1702  
685 0 0 6 808 1621 0 0 52 /**
 * Returns the MD5 hash for the source file.
 */ 1 4 this 3 1702  
686 0 0 6 809 1621 0 0 78 /**
 * Returns the MD5 hash for the file after the patch has been applied.
 */ 1 4 this 3 1702  
687 0 0 6 815 1439 0 0 384 /**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.  If this returns true, it means that the pointer can not yet be
 * reused, but it does not guarantee that it can be safely accessed.  See the
 * lock() method for a safe way to access the underlying pointer.
 *
 * This will always return true for a null pointer, unlike is_valid_pointer().
 */ 1 4 this 3 1704  
688 0 0 6 816 1439 0 0 122 /**
 * Returns true if the pointer is not null and the object has not been
 * deleted.  See was_deleted() for caveats.
 */ 1 4 this 3 1704  
689 0 0 7 826 1706 1410 0 0 0 
690 0 0 15 826 1706 1410 0 0 1 6 param0 0 1707  
691 0 0 6 820 1439 0 0 302 /**
 * Sets the registry key to the indicated value as a string.  The supplied
 * string value is automatically converted from whatever encoding is set by
 * TextEncoder::set_default_encoding() and written as a Unicode string.  The
 * registry key must already exist prior to calling this function.
 */ 4 3 key 1 1561  4 name 1 1561  5 value 1 1561  2 rl 5 1506  
692 0 0 6 821 1439 0 0 142 /**
 * Sets the registry key to the indicated value as an integer.  The registry
 * key must already exist prior to calling this function.
 */ 4 3 key 1 1561  4 name 1 1561  5 value 1 1443  2 rl 5 1506  
693 0 0 6 823 1507 0 0 115 /**
 * Returns the type of the indicated key, or T_none if the key is not known or
 * is some unsupported type.
 */ 3 3 key 1 1561  4 name 1 1561  2 rl 5 1506  
694 0 0 6 824 1561 0 0 291 /**
 * Returns the value associated with the indicated registry key, assuming it
 * is a string value.  The string value is automatically encoded using
 * TextEncoder::get_default_encoding().  If the key is not defined or is not a
 * string type value, default_value is returned instead.
 */ 4 3 key 1 1561  4 name 1 1561  13 default_value 1 1561  2 rl 5 1506  
695 0 0 6 825 1443 0 0 206 /**
 * Returns the value associated with the indicated registry key, assuming it
 * is an integer value.  If the key is not defined or is not an integer type
 * value, default_value is returned instead.
 */ 4 3 key 1 1561  4 name 1 1561  13 default_value 1 1443  2 rl 5 1506  
696 0 0 6 250 1561 0 0 0 2 6 source 1 1561  17 compression_level 1 1443  
697 0 0 6 251 1561 0 0 0 1 6 source 1 1561  
698 0 0 6 252 1439 0 0 0 3 6 source 1 1602  4 dest 1 1602  17 compression_level 1 1443  
699 0 0 6 253 1439 0 0 0 2 6 source 1 1602  4 dest 1 1602  
700 0 0 6 254 1439 0 0 0 3 6 source 1 1622  4 dest 1 1524  17 compression_level 1 1443  
701 0 0 6 255 1439 0 0 0 2 6 source 1 1622  4 dest 1 1524  
702 0 0 6 256 1439 0 0 0 2 6 source 1 1622  4 dest 1 1524  
703 0 0 6 399 1582 0 0 0 5 6 source 1 1561  8 password 1 1561  9 algorithm 5 1561  10 key_length 5 1443  15 iteration_count 5 1443  
704 0 0 6 400 1561 0 0 0 2 6 source 1 1582  8 password 1 1561  
705 0 0 6 401 1439 0 0 0 6 6 source 1 1602  4 dest 1 1602  8 password 1 1561  9 algorithm 5 1561  10 key_length 5 1443  15 iteration_count 5 1443  
706 0 0 6 402 1439 0 0 0 3 6 source 1 1602  4 dest 1 1602  8 password 1 1561  
707 0 0 6 403 1439 0 0 0 6 6 source 1 1622  4 dest 1 1524  8 password 1 1561  9 algorithm 5 1561  10 key_length 5 1443  15 iteration_count 5 1443  
708 0 0 6 404 1439 0 0 0 3 6 source 1 1622  4 dest 1 1524  8 password 1 1561  
709 0 0 6 406 1561 0 0 10 /**
 *
 */ 1 3 err 1 1460  
710 0 0 6 407 1443 0 0 0 0 
711 0 0 6 408 1561 0 0 10 /**
 *
 */ 0 
712 0 0 6 409 1443 0 0 0 0 
713 0 0 6 813 1561 0 0 0 4 8 password 1 1561  4 salt 1 1561  5 iters 1 1443  6 keylen 1 1443  
298
1411 11 CPTA_double 0 2105345 11 CPTA_double 11 CPTA_double 0 0 1412 0 0 0 0 0 0 0 0 0 0

1412 29 ConstPointerToArray< double > 0 141313 29 ConstPointerToArray< double > 29 ConstPointerToArray< double > 0 0 0 1 722 736 0 13 723 724 725 726 727 728 729 730 731 732 733 734 735 0 0 1 0 1413 0 0 0 0 0

1413 28 PointerToArrayBase< double > 0 26625 28 PointerToArrayBase< double > 28 PointerToArrayBase< double > 0 0 0 0 719 0 2 720 721 0 0 1 0 1414 0 0 0 0 0

1414 49 PointerToBase< ReferenceCountedVector< double > > 0 43009 49 PointerToBase< ReferenceCountedVector< double > > 49 PointerToBase< ReferenceCountedVector< double > > 0 0 0 0 0 0 2 717 718 0 0 1 0 1415 0 0 0 0 0

1415 13 PointerToVoid 0 141313 13 PointerToVoid 13 PointerToVoid 0 0 0 0 716 0 2 714 715 0 0 1 0 1416 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1416 10 MemoryBase 0 2048 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 428
/**
 * This class is intended to be the base class of all objects in Panda that
 * might be allocated and deleted via the new and delete operators.  It
 * redefines these operators to provide some memory tracking support.
 *
 * We used to try to override the global operator new and delete methods, but
 * that seems to cause problems when including header files for C++-based
 * system libraries (such as are found on OSX).
 */

1417 10 CPTA_float 0 2105345 10 CPTA_float 10 CPTA_float 0 0 1418 0 0 0 0 0 0 0 0 0 0

1418 28 ConstPointerToArray< float > 0 141313 28 ConstPointerToArray< float > 28 ConstPointerToArray< float > 0 0 0 1 742 756 0 13 743 744 745 746 747 748 749 750 751 752 753 754 755 0 0 1 0 1419 0 0 0 0 0

1419 27 PointerToArrayBase< float > 0 26625 27 PointerToArrayBase< float > 27 PointerToArrayBase< float > 0 0 0 0 739 0 2 740 741 0 0 1 0 1420 0 0 0 0 0

1420 48 PointerToBase< ReferenceCountedVector< float > > 0 43009 48 PointerToBase< ReferenceCountedVector< float > > 48 PointerToBase< ReferenceCountedVector< float > > 0 0 0 0 0 0 2 737 738 0 0 1 0 1415 0 0 0 0 0

1421 8 CPTA_int 0 2105345 8 CPTA_int 8 CPTA_int 0 0 1422 0 0 0 0 0 0 0 0 0 0

1422 26 ConstPointerToArray< int > 0 141313 26 ConstPointerToArray< int > 26 ConstPointerToArray< int > 0 0 0 1 762 776 0 13 763 764 765 766 767 768 769 770 771 772 773 774 775 0 0 1 0 1423 0 0 0 0 0

1423 25 PointerToArrayBase< int > 0 26625 25 PointerToArrayBase< int > 25 PointerToArrayBase< int > 0 0 0 0 759 0 2 760 761 0 0 1 0 1424 0 0 0 0 0

1424 46 PointerToBase< ReferenceCountedVector< int > > 0 43009 46 PointerToBase< ReferenceCountedVector< int > > 46 PointerToBase< ReferenceCountedVector< int > > 0 0 0 0 0 0 2 757 758 0 0 1 0 1415 0 0 0 0 0

1425 10 CPTA_uchar 0 2105345 10 CPTA_uchar 10 CPTA_uchar 0 0 1426 0 0 0 0 0 0 0 0 0 0

1426 36 ConstPointerToArray< unsigned char > 0 141313 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 1 782 796 0 13 783 784 785 786 787 788 789 790 791 792 793 794 795 0 0 1 0 1427 0 0 0 0 0

1427 35 PointerToArrayBase< unsigned char > 0 26625 35 PointerToArrayBase< unsigned char > 35 PointerToArrayBase< unsigned char > 0 0 0 0 779 0 2 780 781 0 0 1 0 1428 0 0 0 0 0

1428 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 43009 56 PointerToBase< ReferenceCountedVector< unsigned char > > 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 0 0 0 0 0 2 777 778 0 0 1 0 1415 0 0 0 0 0

1429 10 PTA_double 0 2105345 10 PTA_double 10 PTA_double 0 0 1430 0 0 0 0 0 0 0 0 0 0

1430 24 PointerToArray< double > 0 141313 24 PointerToArray< double > 24 PointerToArray< double > 0 0 0 1 797 818 0 20 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 0 0 1 0 1413 0 0 0 0 0

1431 9 PTA_float 0 2105345 9 PTA_float 9 PTA_float 0 0 1432 0 0 0 0 0 0 0 0 0 0

1432 23 PointerToArray< float > 0 141313 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 1 819 840 0 20 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 0 0 1 0 1419 0 0 0 0 0

1433 7 PTA_int 0 2105345 7 PTA_int 7 PTA_int 0 0 1434 0 0 0 0 0 0 0 0 0 0

1434 21 PointerToArray< int > 0 141313 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 1 841 862 0 20 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 0 0 1 0 1423 0 0 0 0 0

1435 9 PTA_uchar 0 2105345 9 PTA_uchar 9 PTA_uchar 0 0 1436 0 0 0 0 0 0 0 0 0 0

1436 31 PointerToArray< unsigned char > 0 141313 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 1 863 884 0 20 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 0 0 1 0 1427 0 0 0 0 0

1437 11 MemoryUsage 0 141313 11 MemoryUsage 11 MemoryUsage 0 0 0 1 905 906 10 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 20 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 0 0 1 0 1438 0 0 0 0 292
/**
 * This class is used strictly for debugging purposes, specifically for
 * tracking memory leaks of reference-counted objects: it keeps a record of
 * every such object currently allocated.
 *
 * When compiled with NDEBUG set, this entire class does nothing and compiles
 * to a stub.
 */

1438 10 MemoryHook 0 2048 10 MemoryHook 10 MemoryHook 0 0 0 0 0 0 0 0 0 0 0 0 641
/**
 * This class provides a wrapper around the various possible malloc schemes
 * Panda might employ.  It also exists to allow the MemoryUsage class in Panda
 * to insert callback hooks to track the size of allocated pointers.
 *
 * The PANDA_MALLOC_* and PANDA_FREE_* macros are defined to vector through
 * through this class (except in production builds) to facilitate that.  Every
 * memory allocation call in Panda should therefore use these macros instead
 * of direct calls to malloc or free.  (C++ new and delete operators may be
 * employed for classes which inherit from MemoryBase; otherwise, use the
 * PANDA_MALLOC macros.)
 */

1439 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1440 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1441 0 0 0 0 0 0 0 0 0 0

1441 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1442 14 ReferenceCount 0 26625 14 ReferenceCount 14 ReferenceCount 0 0 0 0 909 1 1719 6 910 911 912 913 914 915 0 0 1 3 1416 907 908 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

1443 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1444 6 Buffer 0 75777 6 Buffer 6 Buffer 0 0 0 1 917 909 0 1 916 0 0 1 0 1442 0 0 0 0 10
/**
 *
 */

1445 25 PStatCollectorForwardBase 0 75777 25 PStatCollectorForwardBase 25 PStatCollectorForwardBase 0 0 0 0 909 0 1 925 0 0 1 0 1442 0 0 0 0 282
/**
 * This class serves as a cheap forward reference to a PStatCollector, which
 * is defined in the pstatclient module (and is not directly accessible here
 * in the express module).
 *
 * This is subclassed as PStatCollectorForward, which defines the actual
 * functionality.
 */

1446 18 NodeReferenceCount 0 43009 18 NodeReferenceCount 18 NodeReferenceCount 0 0 0 0 0 0 6 926 927 928 929 930 931 0 0 1 0 1442 0 0 0 0 603
/**
 * This class specializes ReferenceCount to add an additional counter, called
 * node_ref_count, for the purposes of counting the number of times the object
 * is referenced by a "node", whatever that may mean in context.
 *
 * The new methods node_ref() and node_unref() automatically increment and
 * decrement the primary reference count as well.  There also exists a
 * NodePointerTo<> class to maintain the node_ref counters automatically.
 *
 * See also CachedTypedWritableReferenceCount, which is similar in principle,
 * as well as NodeCachedReferenceCount, which combines both of these.
 */

1447 8 Datagram 0 75777 8 Datagram 8 Datagram 0 0 0 1 932 0 0 48 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 0 0 1 0 1448 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

1448 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1449 17 DatagramGenerator 0 26625 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 981 0 9 982 983 984 985 986 987 988 989 990 0 0 0 0 0 125
/**
 * This class defines the abstract interace to any source of datagrams,
 * whether it be from a file or from the net.
 */

1450 16 DatagramIterator 0 141313 16 DatagramIterator 16 DatagramIterator 0 0 0 1 991 1030 0 38 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 0 0 0 0 0 365
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 *
 * Note that it is the responsibility of the caller to ensure that the datagram
 * object is not destructed while this DatagramIterator is in use.
 */

1451 12 DatagramSink 0 26625 12 DatagramSink 12 DatagramSink 0 0 0 0 1031 3 1720 1721 1722 7 1032 1033 1034 1035 1036 1037 1038 0 0 0 0 0 135
/**
 * This class defines the abstract interface to sending datagrams to any
 * target, whether it be into a file or across the net
 */

1452 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1453 0 0 0 0 0 0 0 0 0 0

1453 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 839
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 *
 * Note that the methods of Filename that interact with the filesystem (such
 * as exists(), open_read(), etc.) directly interface with the operating system
 * and are not aware of Panda's virtual file system.  To interact with the VFS,
 * use the methods on VirtualFileSystem instead.
 */

1454 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 1455 0 0 0 0 0 0 0 0 0 0

1455 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 1456 0 0 0 0 0 0 0 0 0 0

1456 13 FileReference 0 141313 13 FileReference 13 FileReference 0 0 0 1 1045 1048 0 2 1046 1047 0 0 1 0 1457 0 0 0 0 149
/**
 * Keeps a reference-counted pointer to a file on disk.  As long as the
 * FileReference is held, someone presumably has a use for this file.
 */

1457 19 TypedReferenceCount 0 141313 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 1044 0 1 1043 0 0 2 3 1448 1039 1040 3 1442 1041 1042 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1458 9 streamoff 0 2105344 14 std::streamoff 14 std::streamoff 0 0 1459 0 0 0 0 0 0 0 0 0 0

1459 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1460 13 ErrorUtilCode 0 532481 13 ErrorUtilCode 13 ErrorUtilCode 0 0 0 0 0 0 0 0 0 0 37 16 EU_http_redirect 16 EU_http_redirect 0
7 6 EU_eof 6 EU_eof 0
6 18 EU_network_no_data 18 EU_network_no_data 0
5 12 EU_write_ram 12 EU_write_ram 0
4 8 EU_write 8 EU_write 0
3 5 EU_ok 5 EU_ok 0
2 10 EU_success 10 EU_success 0
1 14 EU_error_abort 14 EU_error_abort 17
// General errors
-1 19 EU_error_file_empty 19 EU_error_file_empty 0
-2 21 EU_error_file_invalid 21 EU_error_file_invalid 0
-3 25 EU_error_invalid_checksum 25 EU_error_invalid_checksum 0
-4 21 EU_error_network_dead 21 EU_error_network_dead 25
// General network errors
-30 28 EU_error_network_unreachable 28 EU_error_network_unreachable 0
-31 29 EU_error_network_disconnected 29 EU_error_network_disconnected 0
-32 24 EU_error_network_timeout 24 EU_error_network_timeout 0
-33 24 EU_error_network_no_data 24 EU_error_network_no_data 0
-34 37 EU_error_network_disconnected_locally 37 EU_error_network_disconnected_locally 23
// Local network errors
-40 32 EU_error_network_buffer_overflow 32 EU_error_network_buffer_overflow 0
-41 36 EU_error_network_disk_quota_exceeded 36 EU_error_network_disk_quota_exceeded 0
-42 41 EU_error_network_remote_host_disconnected 41 EU_error_network_remote_host_disconnected 29
// Remote host network errors
-50 33 EU_error_network_remote_host_down 33 EU_error_network_remote_host_down 0
-51 40 EU_error_network_remote_host_unreachable 40 EU_error_network_remote_host_unreachable 0
-52 38 EU_error_network_remote_host_not_found 38 EU_error_network_remote_host_not_found 0
-53 40 EU_error_network_remote_host_no_response 40 EU_error_network_remote_host_no_response 0
-54 27 EU_error_write_out_of_files 27 EU_error_write_out_of_files 23
// General local errors
-60 28 EU_error_write_out_of_memory 28 EU_error_write_out_of_memory 0
-61 32 EU_error_write_sharing_violation 32 EU_error_write_sharing_violation 0
-62 24 EU_error_write_disk_full 24 EU_error_write_disk_full 0
-63 29 EU_error_write_disk_not_found 29 EU_error_write_disk_not_found 0
-64 36 EU_error_write_disk_sector_not_found 36 EU_error_write_disk_sector_not_found 0
-65 25 EU_error_write_disk_fault 25 EU_error_write_disk_fault 0
-66 26 EU_error_write_file_rename 26 EU_error_write_file_rename 0
-67 28 EU_error_http_server_timeout 28 EU_error_http_server_timeout 14
// HTTP errors
-70 29 EU_error_http_gateway_timeout 29 EU_error_http_gateway_timeout 0
-71 33 EU_error_http_service_unavailable 33 EU_error_http_service_unavailable 0
-72 34 EU_error_http_proxy_authentication 34 EU_error_http_proxy_authentication 0
-73 13 EU_error_zlib 13 EU_error_zlib 14
// Zlib errors
-80 0 0

1461 7 Ramfile 0 141313 7 Ramfile 7 Ramfile 0 0 0 1 1059 1070 0 10 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 0 0 0 0 0 85
/**
 * An in-memory buffer specifically designed for downloading files to memory.
 */

1462 7 HashVal 0 141313 7 HashVal 7 HashVal 0 0 0 1 1071 1101 0 29 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 0 0 0 0 0 109
/**
 * Stores a 128-bit value that represents the hashed contents (typically MD5)
 * of a file or buffer.
 */

1463 19 MemoryUsagePointers 0 26625 19 MemoryUsagePointers 19 MemoryUsagePointers 0 0 0 1 1102 1103 0 9 1104 1105 1106 1107 1108 1109 1110 1111 1112 2 1736 1737 0 0 0 0 785
/**
 * This is a list of pointers returned by a MemoryUsage object in response to
 * some query.
 *
 * Warning: once pointers are stored in a MemoryUsagePointers object, they are
 * reference-counted, and will not be freed until the MemoryUsagePointers
 * object is freed (or clear() is called on the object).  However, they may
 * not even be freed then; pointers may leak once they have been added to this
 * structure.  This is because we don't store enough information in this
 * structure to correctly free the pointers that have been added.  Since this
 * is intended primarily as a debugging tool, this is not a major issue.
 *
 * This class is just a user interface to talk about pointers stored in a
 * MemoryUsage object.  It doesn't even exist when compiled with NDEBUG.
 */

1464 10 ISubStream 0 141313 10 ISubStream 10 ISubStream 0 0 0 1 1113 1116 0 2 1114 1115 0 0 1 0 1465 0 0 0 0 392
/**
 * An istream object that presents a subwindow into another istream.  The
 * first character read from this stream will be the "start" character from
 * the source istream; just before the file pointer reaches the "end"
 * character, eof is returned.
 *
 * The source stream must be one that we can randomly seek within.  The
 * resulting ISubStream will also support arbitrary seeks.
 */

1465 7 istream 0 2048 12 std::istream 12 std::istream 0 0 0 0 0 0 0 0 0 0 0 0 0

1466 10 OSubStream 0 141313 10 OSubStream 10 OSubStream 0 0 0 1 1117 1120 0 2 1118 1119 0 0 1 0 1467 0 0 0 0 391
/**
 * An ostream object that presents a subwindow into another ostream.  The
 * first character written to this stream will be the "start" character in the
 * dest istream; no characters may be written to character "end" or later
 * (unless end is zero).
 *
 * The dest stream must be one that we can randomly seek within.  The
 * resulting OSubStream will also support arbitrary seeks.
 */

1467 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1468 9 SubStream 0 141313 9 SubStream 9 SubStream 0 0 0 1 1121 1124 0 2 1122 1123 0 0 1 0 1469 0 0 0 0 68
/**
 * Combined ISubStream and OSubStream for bidirectional I/O.
 */

1469 8 iostream 0 2048 13 std::iostream 13 std::iostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1470 9 Multifile 0 75777 9 Multifile 9 Multifile 0 0 0 1 1125 909 1 1723 62 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1 1738 0 1 0 1442 0 0 0 0 47
/**
 * A file that contains a set of files.
 */

1471 6 string 0 2105344 11 std::string 11 std::string 0 0 1472 0 0 0 0 0 0 0 0 0 0

1472 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1473 7 Namable 0 141313 7 Namable 7 Namable 0 0 0 1 1188 1195 1 1724 6 1189 1190 1191 1192 1193 1194 0 0 1 0 1416 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

1474 12 string const 0 8832 17 std::string const 17 std::string const 0 0 1471 0 0 0 0 0 0 0 0 0 0

1475 14 OpenSSLWrapper 0 43009 14 OpenSSLWrapper 14 OpenSSLWrapper 0 0 0 0 0 0 8 1196 1197 1198 1199 1200 1201 1202 1203 0 0 0 0 0 205
/**
 * Provides an interface wrapper around the OpenSSL library, to ensure that
 * the library is properly initialized in the application, and to provide some
 * hooks into global OpenSSL context data.
 */

1476 11 SubfileInfo 0 141313 11 SubfileInfo 11 SubfileInfo 0 0 0 1 1204 1212 0 7 1205 1206 1207 1208 1209 1210 1211 0 0 0 0 0 200
/**
 * This class records a particular byte sub-range within an existing file on
 * disk.  Generally, the filename is understood as a physical file on disk,
 * and not to be looked up via the vfs.
 */

1477 11 VirtualFile 0 141313 11 VirtualFile 11 VirtualFile 0 0 0 0 1242 0 29 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 0 0 1 0 1457 0 0 0 0 91
/**
 * The abstract base class for a file or directory within the
 * VirtualFileSystem.
 */

1478 20 VirtualFileComposite 0 141313 20 VirtualFileComposite 20 VirtualFileComposite 0 0 0 0 1244 0 1 1243 0 0 1 0 1477 0 0 0 0 223
/**
 * A composite directory within the VirtualFileSystem: this maps to more than
 * one directory on different mount points.  The resulting directory appears
 * to be the union of all the individual simple directories.
 */

1479 16 VirtualFileMount 0 75777 16 VirtualFileMount 16 VirtualFileMount 0 0 0 0 1044 0 6 1245 1246 1247 1248 1249 1250 0 0 1 0 1457 0 0 0 0 159
/**
 * The abstract base class for a mount definition used within a
 * VirtualFileSystem.  Normally users don't need to monkey with this class
 * directly.
 */

1480 25 VirtualFileMountMultifile 0 75777 25 VirtualFileMountMultifile 25 VirtualFileMountMultifile 0 0 0 1 1251 1044 0 2 1252 1253 0 0 1 0 1479 0 0 0 0 66
/**
 * Maps a Multifile's contents into the VirtualFileSystem.
 */

1481 23 VirtualFileMountRamdisk 0 141313 23 VirtualFileMountRamdisk 23 VirtualFileMountRamdisk 0 0 0 1 1254 1256 0 1 1255 0 0 1 0 1479 0 0 0 0 384
/**
 * Simulates an actual directory on disk with in-memory storage.  This is
 * useful mainly for performing high level functions that expect disk I/O
 * without actually writing files to disk.  Naturally, there are significant
 * limits to the size of the files that may be written with this system; and
 * "files" written here are not automatically persistent between sessions.
 */

1482 22 VirtualFileMountSystem 0 141313 22 VirtualFileMountSystem 22 VirtualFileMountSystem 0 0 0 1 1257 1260 0 2 1258 1259 0 0 1 0 1479 0 0 0 0 66
/**
 * Maps an actual OS directory into the VirtualFileSystem.
 */

1483 10 ZipArchive 0 75777 10 ZipArchive 10 ZipArchive 0 0 0 1 1261 909 0 39 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1 1739 0 1 0 1442 0 0 0 0 47
/**
 * A file that contains a set of files.
 */

1484 19 VirtualFileMountZip 0 75777 19 VirtualFileMountZip 19 VirtualFileMountZip 0 0 0 1 1301 1044 0 2 1302 1303 0 0 1 0 1479 0 0 0 0 58
/**
 * Maps a .zip archive into the VirtualFileSystem.
 */

1485 17 VirtualFileSimple 0 141313 17 VirtualFileSimple 17 VirtualFileSimple 0 0 0 0 1307 0 3 1304 1305 1306 0 0 1 0 1477 0 0 0 0 183
/**
 * A simple file or directory within the VirtualFileSystem: this maps to
 * exactly one file on one mount point.  Most directories, and all regular
 * files, are of this kind.
 */

1486 13 TemporaryFile 0 75777 13 TemporaryFile 13 TemporaryFile 0 0 0 1 1308 1048 0 1 1309 0 0 1 0 1456 0 0 0 0 206
/**
 * This is a special kind of FileReference class that automatically deletes
 * the file in question when it is deleted.  It is not responsible for
 * creating, opening, or closing the file, however.
 */

1487 17 IDecompressStream 0 141313 17 IDecompressStream 17 IDecompressStream 0 0 0 1 1310 1313 0 2 1311 1312 0 0 1 0 1465 0 0 0 0 323
/**
 * An input stream object that uses zlib to decompress (inflate) the input
 * from another source stream on-the-fly.
 *
 * Attach an IDecompressStream to an existing istream that provides compressed
 * data, and read the corresponding uncompressed data from the
 * IDecompressStream.
 *
 * Seeking is not supported.
 */

1488 15 OCompressStream 0 141313 15 OCompressStream 15 OCompressStream 0 0 0 1 1314 1317 0 2 1315 1316 0 0 1 0 1467 0 0 0 0 311
/**
 * An input stream object that uses zlib to compress (deflate) data to another
 * destination stream on-the-fly.
 *
 * Attach an OCompressStream to an existing ostream that will accept
 * compressed data, and write your uncompressed source data to the
 * OCompressStream.
 *
 * Seeking is not supported.
 */

1489 15 VirtualFileList 0 75777 15 VirtualFileList 15 VirtualFileList 0 0 0 1 1324 909 0 6 1318 1319 1320 1321 1322 1323 1 1740 0 1 0 1442 0 0 0 0 80
/**
 * A list of VirtualFiles, as returned by VirtualFile::scan_directory().
 */

1490 17 VirtualFileSystem 0 26625 17 VirtualFileSystem 17 VirtualFileSystem 0 0 0 1 1325 1326 1 1725 37 1327 1328 1329 1330 1331 1332 1333 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1 1741 0 0 0 1 1491 352
/**
 * A hierarchy of directories and files that appears to be one continuous file
 * system, even though the files may originate from several different sources
 * that may not be related to the actual OS's file system.
 *
 * For instance, a VirtualFileSystem can transparently mount one or more
 * Multifiles as their own subdirectory hierarchies.
 */

1491 10 MountFlags 0 794624 29 VirtualFileSystem::MountFlags 29 VirtualFileSystem::MountFlags 1490 0 0 0 0 0 0 0 0 0 1 12 MF_read_only 31 VirtualFileSystem::MF_read_only 0
2 0 0

1492 29 PointerTo< VirtualFileMount > 0 141313 29 PointerTo< VirtualFileMount > 29 PointerTo< VirtualFileMount > 0 0 0 1 1336 1341 0 4 1337 1338 1339 1340 0 0 1 0 1493 0 0 0 0 0

1493 33 PointerToBase< VirtualFileMount > 0 43009 33 PointerToBase< VirtualFileMount > 33 PointerToBase< VirtualFileMount > 0 0 0 0 0 0 2 1334 1335 0 0 1 0 1415 0 0 0 0 0

1494 12 StringStream 0 141313 12 StringStream 12 StringStream 0 0 0 1 1372 1377 1 1726 4 1373 1374 1375 1376 0 0 1 0 1469 0 0 0 0 186
/**
 * A bi-directional stream object that reads and writes data to an internal
 * buffer, which can be retrieved and/or set as a string in Python 2 or a
 * bytes object in Python 3.
 */

1495 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1496 0 0 0 0 0 0 0 0 0 0

1496 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1497 0 0 0 0 0 0 0 0 0 0

1497 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1498 9 TrueClock 0 43009 9 TrueClock 9 TrueClock 0 0 0 0 0 4 1727 1728 1729 1730 6 1378 1379 1380 1381 1382 1383 0 0 0 0 0 467
/**
 * An interface to whatever real-time clock we might have available in the
 * current environment.  There is only one TrueClock in existence, and it
 * constructs itself.
 *
 * The TrueClock returns elapsed real time in seconds since some undefined
 * epoch.  Since it is not defined at what time precisely the clock indicates
 * zero, this value can only be meaningfully used to measure elapsed time, by
 * sampling it at two different times and subtracting.
 */

1499 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1500 9 Patchfile 0 26625 9 Patchfile 9 Patchfile 0 0 0 1 1384 1385 5 1731 1732 1733 1734 1735 14 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 0 0 0 0 0 10
/**
 *
 */

1501 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1502 0 0 0 0 0 0 0 0 0 0

1502 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1503 13 HashVal const 0 8832 13 HashVal const 13 HashVal const 0 0 1462 0 0 0 0 0 0 0 0 0 0

1504 17 WeakPointerToVoid 0 141313 17 WeakPointerToVoid 17 WeakPointerToVoid 0 0 0 0 1403 0 2 1401 1402 0 0 1 0 1415 0 0 0 0 152
/**
 * This is the specialization of PointerToVoid for weak pointers.  It needs an
 * additional flag to indicate that the pointer has been deleted.
 */

1505 15 WindowsRegistry 0 141313 15 WindowsRegistry 15 WindowsRegistry 0 0 0 1 1409 1410 0 5 1404 1405 1406 1407 1408 0 0 0 0 2 1506 1507 249
/**
 * This class provides a hook to Python to read and write strings and integers
 * to the windows registry.  It automatically converts strings from utf-8
 * encoding and stores them in Unicode (and conversely reconverts them on
 * retrieval).
 */

1506 8 RegLevel 0 794624 25 WindowsRegistry::RegLevel 25 WindowsRegistry::RegLevel 1505 0 0 0 0 0 0 0 0 0 2 10 rl_machine 27 WindowsRegistry::rl_machine 0
0 7 rl_user 24 WindowsRegistry::rl_user 0
1 0 0

1507 4 Type 0 794624 21 WindowsRegistry::Type 21 WindowsRegistry::Type 1505 0 0 0 0 0 0 0 0 0 3 6 T_none 23 WindowsRegistry::T_none 0
0 5 T_int 22 WindowsRegistry::T_int 0
1 8 T_string 25 WindowsRegistry::T_string 0
2 0 0

1508 12 PTA_stdfloat 0 2105345 12 PTA_stdfloat 12 PTA_stdfloat 0 0 1431 0 0 0 0 0 0 0 0 0 0

1509 13 CPTA_stdfloat 0 2105345 13 CPTA_stdfloat 13 CPTA_stdfloat 0 0 1417 0 0 0 0 0 0 0 0 0 0

1510 37 ConstPointerToArray< double > const * 0 8576 37 ConstPointerToArray< double > const * 37 ConstPointerToArray< double > const * 0 0 1511 0 0 0 0 0 0 0 0 0 0

1511 35 ConstPointerToArray< double > const 0 8832 35 ConstPointerToArray< double > const 35 ConstPointerToArray< double > const 0 0 1412 0 0 0 0 0 0 0 0 0 0

1512 31 ConstPointerToArray< double > * 0 8576 31 ConstPointerToArray< double > * 31 ConstPointerToArray< double > * 0 0 1412 0 0 0 0 0 0 0 0 0 0

1513 32 PointerToArray< double > const * 0 8576 32 PointerToArray< double > const * 32 PointerToArray< double > const * 0 0 1514 0 0 0 0 0 0 0 0 0 0

1514 30 PointerToArray< double > const 0 8832 30 PointerToArray< double > const 30 PointerToArray< double > const 0 0 1430 0 0 0 0 0 0 0 0 0 0

1515 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1516 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1517 0 0 0 0 0 0 0 0 0 0

1517 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1518 0 0 0 0 0 0 0 0 0 0

1518 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1519 36 PointerToArrayBase< double > const * 0 8576 36 PointerToArrayBase< double > const * 36 PointerToArrayBase< double > const * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1520 34 PointerToArrayBase< double > const 0 8832 34 PointerToArrayBase< double > const 34 PointerToArrayBase< double > const 0 0 1413 0 0 0 0 0 0 0 0 0 0

1521 51 PointerToBase< ReferenceCountedVector< double > > * 0 8576 51 PointerToBase< ReferenceCountedVector< double > > * 51 PointerToBase< ReferenceCountedVector< double > > * 0 0 1414 0 0 0 0 0 0 0 0 0 0

1522 57 PointerToBase< ReferenceCountedVector< double > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< double > > const * 57 PointerToBase< ReferenceCountedVector< double > > const * 0 0 1523 0 0 0 0 0 0 0 0 0 0

1523 55 PointerToBase< ReferenceCountedVector< double > > const 0 8832 55 PointerToBase< ReferenceCountedVector< double > > const 55 PointerToBase< ReferenceCountedVector< double > > const 0 0 1414 0 0 0 0 0 0 0 0 0 0

1524 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 1467 0 0 0 0 0 0 0 0 0 0

1525 21 PointerToVoid const * 0 8576 21 PointerToVoid const * 21 PointerToVoid const * 0 0 1526 0 0 0 0 0 0 0 0 0 0

1526 19 PointerToVoid const 0 8832 19 PointerToVoid const 19 PointerToVoid const 0 0 1415 0 0 0 0 0 0 0 0 0 0

1527 36 ConstPointerToArray< float > const * 0 8576 36 ConstPointerToArray< float > const * 36 ConstPointerToArray< float > const * 0 0 1528 0 0 0 0 0 0 0 0 0 0

1528 34 ConstPointerToArray< float > const 0 8832 34 ConstPointerToArray< float > const 34 ConstPointerToArray< float > const 0 0 1418 0 0 0 0 0 0 0 0 0 0

1529 30 ConstPointerToArray< float > * 0 8576 30 ConstPointerToArray< float > * 30 ConstPointerToArray< float > * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1530 31 PointerToArray< float > const * 0 8576 31 PointerToArray< float > const * 31 PointerToArray< float > const * 0 0 1531 0 0 0 0 0 0 0 0 0 0

1531 29 PointerToArray< float > const 0 8832 29 PointerToArray< float > const 29 PointerToArray< float > const 0 0 1432 0 0 0 0 0 0 0 0 0 0

1532 35 PointerToArrayBase< float > const * 0 8576 35 PointerToArrayBase< float > const * 35 PointerToArrayBase< float > const * 0 0 1533 0 0 0 0 0 0 0 0 0 0

1533 33 PointerToArrayBase< float > const 0 8832 33 PointerToArrayBase< float > const 33 PointerToArrayBase< float > const 0 0 1419 0 0 0 0 0 0 0 0 0 0

1534 50 PointerToBase< ReferenceCountedVector< float > > * 0 8576 50 PointerToBase< ReferenceCountedVector< float > > * 50 PointerToBase< ReferenceCountedVector< float > > * 0 0 1420 0 0 0 0 0 0 0 0 0 0

1535 56 PointerToBase< ReferenceCountedVector< float > > const * 0 8576 56 PointerToBase< ReferenceCountedVector< float > > const * 56 PointerToBase< ReferenceCountedVector< float > > const * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1536 54 PointerToBase< ReferenceCountedVector< float > > const 0 8832 54 PointerToBase< ReferenceCountedVector< float > > const 54 PointerToBase< ReferenceCountedVector< float > > const 0 0 1420 0 0 0 0 0 0 0 0 0 0

1537 34 ConstPointerToArray< int > const * 0 8576 34 ConstPointerToArray< int > const * 34 ConstPointerToArray< int > const * 0 0 1538 0 0 0 0 0 0 0 0 0 0

1538 32 ConstPointerToArray< int > const 0 8832 32 ConstPointerToArray< int > const 32 ConstPointerToArray< int > const 0 0 1422 0 0 0 0 0 0 0 0 0 0

1539 28 ConstPointerToArray< int > * 0 8576 28 ConstPointerToArray< int > * 28 ConstPointerToArray< int > * 0 0 1422 0 0 0 0 0 0 0 0 0 0

1540 29 PointerToArray< int > const * 0 8576 29 PointerToArray< int > const * 29 PointerToArray< int > const * 0 0 1541 0 0 0 0 0 0 0 0 0 0

1541 27 PointerToArray< int > const 0 8832 27 PointerToArray< int > const 27 PointerToArray< int > const 0 0 1434 0 0 0 0 0 0 0 0 0 0

1542 33 PointerToArrayBase< int > const * 0 8576 33 PointerToArrayBase< int > const * 33 PointerToArrayBase< int > const * 0 0 1543 0 0 0 0 0 0 0 0 0 0

1543 31 PointerToArrayBase< int > const 0 8832 31 PointerToArrayBase< int > const 31 PointerToArrayBase< int > const 0 0 1423 0 0 0 0 0 0 0 0 0 0

1544 48 PointerToBase< ReferenceCountedVector< int > > * 0 8576 48 PointerToBase< ReferenceCountedVector< int > > * 48 PointerToBase< ReferenceCountedVector< int > > * 0 0 1424 0 0 0 0 0 0 0 0 0 0

1545 54 PointerToBase< ReferenceCountedVector< int > > const * 0 8576 54 PointerToBase< ReferenceCountedVector< int > > const * 54 PointerToBase< ReferenceCountedVector< int > > const * 0 0 1546 0 0 0 0 0 0 0 0 0 0

1546 52 PointerToBase< ReferenceCountedVector< int > > const 0 8832 52 PointerToBase< ReferenceCountedVector< int > > const 52 PointerToBase< ReferenceCountedVector< int > > const 0 0 1424 0 0 0 0 0 0 0 0 0 0

1547 44 ConstPointerToArray< unsigned char > const * 0 8576 44 ConstPointerToArray< unsigned char > const * 44 ConstPointerToArray< unsigned char > const * 0 0 1548 0 0 0 0 0 0 0 0 0 0

1548 42 ConstPointerToArray< unsigned char > const 0 8832 42 ConstPointerToArray< unsigned char > const 42 ConstPointerToArray< unsigned char > const 0 0 1426 0 0 0 0 0 0 0 0 0 0

1549 38 ConstPointerToArray< unsigned char > * 0 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 1426 0 0 0 0 0 0 0 0 0 0

1550 39 PointerToArray< unsigned char > const * 0 8576 39 PointerToArray< unsigned char > const * 39 PointerToArray< unsigned char > const * 0 0 1551 0 0 0 0 0 0 0 0 0 0

1551 37 PointerToArray< unsigned char > const 0 8832 37 PointerToArray< unsigned char > const 37 PointerToArray< unsigned char > const 0 0 1436 0 0 0 0 0 0 0 0 0 0

1552 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

1553 43 PointerToArrayBase< unsigned char > const * 0 8576 43 PointerToArrayBase< unsigned char > const * 43 PointerToArrayBase< unsigned char > const * 0 0 1554 0 0 0 0 0 0 0 0 0 0

1554 41 PointerToArrayBase< unsigned char > const 0 8832 41 PointerToArrayBase< unsigned char > const 41 PointerToArrayBase< unsigned char > const 0 0 1427 0 0 0 0 0 0 0 0 0 0

1555 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 8576 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 0 1428 0 0 0 0 0 0 0 0 0 0

1556 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 8576 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 0 1557 0 0 0 0 0 0 0 0 0 0

1557 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 8832 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 0 1428 0 0 0 0 0 0 0 0 0 0

1558 26 PointerToArray< double > * 0 8576 26 PointerToArray< double > * 26 PointerToArray< double > * 0 0 1430 0 0 0 0 0 0 0 0 0 0

1559 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1560 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1561 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1562 25 PointerToArray< float > * 0 8576 25 PointerToArray< float > * 25 PointerToArray< float > * 0 0 1432 0 0 0 0 0 0 0 0 0 0

1563 23 PointerToArray< int > * 0 8576 23 PointerToArray< int > * 23 PointerToArray< int > * 0 0 1434 0 0 0 0 0 0 0 0 0 0

1564 33 PointerToArray< unsigned char > * 0 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 1436 0 0 0 0 0 0 0 0 0 0

1565 19 MemoryUsage const * 0 8576 19 MemoryUsage const * 19 MemoryUsage const * 0 0 1566 0 0 0 0 0 0 0 0 0 0

1566 17 MemoryUsage const 0 8832 17 MemoryUsage const 17 MemoryUsage const 0 0 1437 0 0 0 0 0 0 0 0 0 0

1567 13 MemoryUsage * 0 8576 13 MemoryUsage * 13 MemoryUsage * 0 0 1437 0 0 0 0 0 0 0 0 0 0

1568 21 MemoryUsagePointers * 0 8576 21 MemoryUsagePointers * 21 MemoryUsagePointers * 0 0 1463 0 0 0 0 0 0 0 0 0 0

1569 22 ReferenceCount const * 0 8576 22 ReferenceCount const * 22 ReferenceCount const * 0 0 1570 0 0 0 0 0 0 0 0 0 0

1570 20 ReferenceCount const 0 8832 20 ReferenceCount const 20 ReferenceCount const 0 0 1442 0 0 0 0 0 0 0 0 0 0

1571 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1442 0 0 0 0 0 0 0 0 0 0

1572 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 1416 0 0 0 0 0 0 0 0 0 0

1573 14 Buffer const * 0 8576 14 Buffer const * 14 Buffer const * 0 0 1574 0 0 0 0 0 0 0 0 0 0

1574 12 Buffer const 0 8832 12 Buffer const 12 Buffer const 0 0 1444 0 0 0 0 0 0 0 0 0 0

1575 8 Buffer * 0 8576 8 Buffer * 8 Buffer * 0 0 1444 0 0 0 0 0 0 0 0 0 0

1576 27 PStatCollectorForwardBase * 0 8576 27 PStatCollectorForwardBase * 27 PStatCollectorForwardBase * 0 0 1445 0 0 0 0 0 0 0 0 0 0

1577 26 NodeReferenceCount const * 0 8576 26 NodeReferenceCount const * 26 NodeReferenceCount const * 0 0 1578 0 0 0 0 0 0 0 0 0 0

1578 24 NodeReferenceCount const 0 8832 24 NodeReferenceCount const 24 NodeReferenceCount const 0 0 1446 0 0 0 0 0 0 0 0 0 0

1579 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1447 0 0 0 0 0 0 0 0 0 0

1580 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 1581 0 0 0 0 0 0 0 0 0 0

1581 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 1447 0 0 0 0 0 0 0 0 0 0

1582 12 vector_uchar 0 2105344 12 vector_uchar 12 vector_uchar 0 0 1583 0 0 0 0 0 0 0 0 0 0

1583 24 pvector< unsigned char > 0 2048 24 pvector< unsigned char > 24 pvector< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1584 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1585 6 int8_t 0 2105344 6 int8_t 6 int8_t 0 0 1586 0 0 0 0 0 0 0 0 0 0

1586 11 signed char 0 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0 0

1587 7 uint8_t 0 2105344 7 uint8_t 7 uint8_t 0 0 1552 0 0 0 0 0 0 0 0 0 0

1588 7 int16_t 0 2105344 7 int16_t 7 int16_t 0 0 1589 0 0 0 0 0 0 0 0 0 0

1589 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1590 7 int32_t 0 2105344 7 int32_t 7 int32_t 0 0 1443 0 0 0 0 0 0 0 0 0 0

1591 7 int64_t 0 2105344 7 int64_t 7 int64_t 0 0 1459 0 0 0 0 0 0 0 0 0 0

1592 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 1593 0 0 0 0 0 0 0 0 0 0

1593 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1594 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 1584 0 0 0 0 0 0 0 0 0 0

1595 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 1441 0 0 0 0 0 0 0 0 0 0

1596 10 PN_float32 0 2105344 10 PN_float32 10 PN_float32 0 0 1502 0 0 0 0 0 0 0 0 0 0

1597 10 PN_float64 0 2105344 10 PN_float64 10 PN_float64 0 0 1499 0 0 0 0 0 0 0 0 0 0

1598 11 PTA_uchar * 0 8576 11 PTA_uchar * 11 PTA_uchar * 0 0 1435 0 0 0 0 0 0 0 0 0 0

1599 12 CPTA_uchar * 0 8576 12 CPTA_uchar * 12 CPTA_uchar * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1600 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1449 0 0 0 0 0 0 0 0 0 0

1601 13 SubfileInfo * 0 8576 13 SubfileInfo * 13 SubfileInfo * 0 0 1476 0 0 0 0 0 0 0 0 0 0

1602 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1452 0 0 0 0 0 0 0 0 0 0

1603 25 DatagramGenerator const * 0 8576 25 DatagramGenerator const * 25 DatagramGenerator const * 0 0 1604 0 0 0 0 0 0 0 0 0 0

1604 23 DatagramGenerator const 0 8832 23 DatagramGenerator const 23 DatagramGenerator const 0 0 1449 0 0 0 0 0 0 0 0 0 0

1605 6 time_t 0 2105344 6 time_t 6 time_t 0 0 1606 0 0 0 0 0 0 0 0 0 0

1606 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1607 13 VirtualFile * 0 8576 13 VirtualFile * 13 VirtualFile * 0 0 1477 0 0 0 0 0 0 0 0 0 0

1608 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1450 0 0 0 0 0 0 0 0 0 0

1609 24 DatagramIterator const * 0 8576 24 DatagramIterator const * 24 DatagramIterator const * 0 0 1610 0 0 0 0 0 0 0 0 0 0

1610 22 DatagramIterator const 0 8832 22 DatagramIterator const 22 DatagramIterator const 0 0 1450 0 0 0 0 0 0 0 0 0 0

1611 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1451 0 0 0 0 0 0 0 0 0 0

1612 19 SubfileInfo const * 0 8576 19 SubfileInfo const * 19 SubfileInfo const * 0 0 1613 0 0 0 0 0 0 0 0 0 0

1613 17 SubfileInfo const 0 8832 17 SubfileInfo const 17 SubfileInfo const 0 0 1476 0 0 0 0 0 0 0 0 0 0

1614 15 FileReference * 0 8576 15 FileReference * 15 FileReference * 0 0 1456 0 0 0 0 0 0 0 0 0 0

1615 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 1457 0 0 0 0 0 0 0 0 0 0

1616 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 1448 0 0 0 0 0 0 0 0 0 0

1617 9 Ramfile * 0 8576 9 Ramfile * 9 Ramfile * 0 0 1461 0 0 0 0 0 0 0 0 0 0

1618 15 Ramfile const * 0 8576 15 Ramfile const * 15 Ramfile const * 0 0 1619 0 0 0 0 0 0 0 0 0 0

1619 13 Ramfile const 0 8832 13 Ramfile const 13 Ramfile const 0 0 1461 0 0 0 0 0 0 0 0 0 0

1620 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 1462 0 0 0 0 0 0 0 0 0 0

1621 15 HashVal const * 0 8576 15 HashVal const * 15 HashVal const * 0 0 1503 0 0 0 0 0 0 0 0 0 0

1622 9 istream * 0 8576 14 std::istream * 14 std::istream * 0 0 1465 0 0 0 0 0 0 0 0 0 0

1623 14 StreamWriter * 0 8576 14 StreamWriter * 14 StreamWriter * 0 0 1624 0 0 0 0 0 0 0 0 0 0

1624 12 StreamWriter 0 2048 12 StreamWriter 12 StreamWriter 0 0 0 0 0 0 0 0 0 0 0 0 300
/**
 * A StreamWriter object is used to write sequential binary data directly to
 * an ostream.  Its interface is very similar to Datagram by design; it's
 * primarily intended as a convenience to eliminate the overhead of writing
 * bytes to a Datagram and then writing the Datagram to a stream.
 */

1625 14 StreamReader * 0 8576 14 StreamReader * 14 StreamReader * 0 0 1626 0 0 0 0 0 0 0 0 0 0

1626 12 StreamReader 0 2048 12 StreamReader 12 StreamReader 0 0 0 0 0 0 0 0 0 0 0 0 158
/**
 * A class to read sequential binary data directly from an istream.  Its
 * interface is similar to DatagramIterator by design; see also StreamWriter.
 */

1627 27 MemoryUsagePointers const * 0 8576 27 MemoryUsagePointers const * 27 MemoryUsagePointers const * 0 0 1628 0 0 0 0 0 0 0 0 0 0

1628 25 MemoryUsagePointers const 0 8832 25 MemoryUsagePointers const 25 MemoryUsagePointers const 0 0 1463 0 0 0 0 0 0 0 0 0 0

1629 12 ISubStream * 0 8576 12 ISubStream * 12 ISubStream * 0 0 1464 0 0 0 0 0 0 0 0 0 0

1630 16 IStreamWrapper * 0 8576 16 IStreamWrapper * 16 IStreamWrapper * 0 0 1631 0 0 0 0 0 0 0 0 0 0

1631 14 IStreamWrapper 0 2048 14 IStreamWrapper 14 IStreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * This class provides a locking wrapper around an arbitrary istream pointer.
 * A thread may use this class to perform an atomic seek/read/gcount
 * operation.
 */

1632 12 OSubStream * 0 8576 12 OSubStream * 12 OSubStream * 0 0 1466 0 0 0 0 0 0 0 0 0 0

1633 16 OStreamWrapper * 0 8576 16 OStreamWrapper * 16 OStreamWrapper * 0 0 1634 0 0 0 0 0 0 0 0 0 0

1634 14 OStreamWrapper 0 2048 14 OStreamWrapper 14 OStreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 159
/**
 * This class provides a locking wrapper around an arbitrary ostream pointer.
 * A thread may use this class to perform an atomic seek/write operation.
 */

1635 11 SubStream * 0 8576 11 SubStream * 11 SubStream * 0 0 1468 0 0 0 0 0 0 0 0 0 0

1636 15 StreamWrapper * 0 8576 15 StreamWrapper * 15 StreamWrapper * 0 0 1637 0 0 0 0 0 0 0 0 0 0

1637 13 StreamWrapper 0 2048 13 StreamWrapper 13 StreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 97
/**
 * This class provides a locking wrapper around a combination ostream/istream
 * pointer.
 */

1638 11 Multifile * 0 8576 11 Multifile * 11 Multifile * 0 0 1470 0 0 0 0 0 0 0 0 0 0

1639 10 iostream * 0 8576 15 std::iostream * 15 std::iostream * 0 0 1469 0 0 0 0 0 0 0 0 0 0

1640 17 Multifile const * 0 8576 17 Multifile const * 17 Multifile const * 0 0 1641 0 0 0 0 0 0 0 0 0 0

1641 15 Multifile const 0 8832 15 Multifile const 15 Multifile const 0 0 1470 0 0 0 0 0 0 0 0 0 0

1642 15 vector_string * 0 8576 15 vector_string * 15 vector_string * 0 0 1643 0 0 0 0 0 0 0 0 0 0

1643 13 vector_string 0 2105344 13 vector_string 13 vector_string 0 0 1644 0 0 0 0 0 0 0 0 0 0

1644 17 pvector< string > 0 2048 22 pvector< std::string > 22 pvector< std::string > 0 0 0 0 0 0 0 0 0 0 0 0 0

1645 15 Namable const * 0 8576 15 Namable const * 15 Namable const * 0 0 1646 0 0 0 0 0 0 0 0 0 0

1646 13 Namable const 0 8832 13 Namable const 13 Namable const 0 0 1473 0 0 0 0 0 0 0 0 0 0

1647 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 1473 0 0 0 0 0 0 0 0 0 0

1648 16 OpenSSLWrapper * 0 8576 16 OpenSSLWrapper * 16 OpenSSLWrapper * 0 0 1475 0 0 0 0 0 0 0 0 0 0

1649 12 X509_STORE * 0 8576 12 X509_STORE * 12 X509_STORE * 0 0 1650 0 0 0 0 0 0 0 0 0 0

1650 10 X509_STORE 0 2105344 10 X509_STORE 10 X509_STORE 0 0 1651 0 0 0 0 0 0 0 0 0 0

1651 13 x509_store_st 0 1024 13 x509_store_st 13 x509_store_st 0 0 0 0 0 0 0 0 0 0 0 0 0

1652 10 streamsize 0 2105344 15 std::streamsize 15 std::streamsize 0 0 1459 0 0 0 0 0 0 0 0 0 0

1653 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 1654 0 0 0 0 0 0 0 0 0 0

1654 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 1477 0 0 0 0 0 0 0 0 0 0

1655 19 VirtualFileSystem * 0 8576 19 VirtualFileSystem * 19 VirtualFileSystem * 0 0 1490 0 0 0 0 0 0 0 0 0 0

1656 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1453 0 0 0 0 0 0 0 0 0 0

1657 17 VirtualFileList * 0 8576 17 VirtualFileList * 17 VirtualFileList * 0 0 1489 0 0 0 0 0 0 0 0 0 0

1658 24 VirtualFileMount const * 0 8576 24 VirtualFileMount const * 24 VirtualFileMount const * 0 0 1659 0 0 0 0 0 0 0 0 0 0

1659 22 VirtualFileMount const 0 8832 22 VirtualFileMount const 22 VirtualFileMount const 0 0 1479 0 0 0 0 0 0 0 0 0 0

1660 27 VirtualFileMountMultifile * 0 8576 27 VirtualFileMountMultifile * 27 VirtualFileMountMultifile * 0 0 1480 0 0 0 0 0 0 0 0 0 0

1661 33 VirtualFileMountMultifile const * 0 8576 33 VirtualFileMountMultifile const * 33 VirtualFileMountMultifile const * 0 0 1662 0 0 0 0 0 0 0 0 0 0

1662 31 VirtualFileMountMultifile const 0 8832 31 VirtualFileMountMultifile const 31 VirtualFileMountMultifile const 0 0 1480 0 0 0 0 0 0 0 0 0 0

1663 25 VirtualFileMountRamdisk * 0 8576 25 VirtualFileMountRamdisk * 25 VirtualFileMountRamdisk * 0 0 1481 0 0 0 0 0 0 0 0 0 0

1664 24 VirtualFileMountSystem * 0 8576 24 VirtualFileMountSystem * 24 VirtualFileMountSystem * 0 0 1482 0 0 0 0 0 0 0 0 0 0

1665 30 VirtualFileMountSystem const * 0 8576 30 VirtualFileMountSystem const * 30 VirtualFileMountSystem const * 0 0 1666 0 0 0 0 0 0 0 0 0 0

1666 28 VirtualFileMountSystem const 0 8832 28 VirtualFileMountSystem const 28 VirtualFileMountSystem const 0 0 1482 0 0 0 0 0 0 0 0 0 0

1667 12 ZipArchive * 0 8576 12 ZipArchive * 12 ZipArchive * 0 0 1483 0 0 0 0 0 0 0 0 0 0

1668 18 ZipArchive const * 0 8576 18 ZipArchive const * 18 ZipArchive const * 0 0 1669 0 0 0 0 0 0 0 0 0 0

1669 16 ZipArchive const 0 8832 16 ZipArchive const 16 ZipArchive const 0 0 1483 0 0 0 0 0 0 0 0 0 0

1670 21 VirtualFileMountZip * 0 8576 21 VirtualFileMountZip * 21 VirtualFileMountZip * 0 0 1484 0 0 0 0 0 0 0 0 0 0

1671 27 VirtualFileMountZip const * 0 8576 27 VirtualFileMountZip const * 27 VirtualFileMountZip const * 0 0 1672 0 0 0 0 0 0 0 0 0 0

1672 25 VirtualFileMountZip const 0 8832 25 VirtualFileMountZip const 25 VirtualFileMountZip const 0 0 1484 0 0 0 0 0 0 0 0 0 0

1673 25 VirtualFileSimple const * 0 8576 25 VirtualFileSimple const * 25 VirtualFileSimple const * 0 0 1674 0 0 0 0 0 0 0 0 0 0

1674 23 VirtualFileSimple const 0 8832 23 VirtualFileSimple const 23 VirtualFileSimple const 0 0 1485 0 0 0 0 0 0 0 0 0 0

1675 18 VirtualFileMount * 0 8576 18 VirtualFileMount * 18 VirtualFileMount * 0 0 1479 0 0 0 0 0 0 0 0 0 0

1676 15 TemporaryFile * 0 8576 15 TemporaryFile * 15 TemporaryFile * 0 0 1486 0 0 0 0 0 0 0 0 0 0

1677 21 TemporaryFile const * 0 8576 21 TemporaryFile const * 21 TemporaryFile const * 0 0 1678 0 0 0 0 0 0 0 0 0 0

1678 19 TemporaryFile const 0 8832 19 TemporaryFile const 19 TemporaryFile const 0 0 1486 0 0 0 0 0 0 0 0 0 0

1679 19 IDecompressStream * 0 8576 19 IDecompressStream * 19 IDecompressStream * 0 0 1487 0 0 0 0 0 0 0 0 0 0

1680 17 OCompressStream * 0 8576 17 OCompressStream * 17 OCompressStream * 0 0 1488 0 0 0 0 0 0 0 0 0 0

1681 23 VirtualFileList const * 0 8576 23 VirtualFileList const * 23 VirtualFileList const * 0 0 1682 0 0 0 0 0 0 0 0 0 0

1682 21 VirtualFileList const 0 8832 21 VirtualFileList const 21 VirtualFileList const 0 0 1489 0 0 0 0 0 0 0 0 0 0

1683 25 VirtualFileSystem const * 0 8576 25 VirtualFileSystem const * 25 VirtualFileSystem const * 0 0 1684 0 0 0 0 0 0 0 0 0 0

1684 23 VirtualFileSystem const 0 8832 23 VirtualFileSystem const 23 VirtualFileSystem const 0 0 1490 0 0 0 0 0 0 0 0 0 0

1685 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 1686 0 0 0 0 0 0 0 0 0 0

1686 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 1687 0 0 0 0 0 0 0 0 0 0

1687 11 DSearchPath 0 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 304
/**
 * This class stores a list of directories that can be searched, in order, to
 * locate a particular file.  It is normally constructed by passing it a
 * traditional searchpath-style string, e.g.  a list of directory names
 * delimited by spaces or colons, but it can also be built up explicitly.
 */

1688 9 Results * 0 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 1689 0 0 0 0 0 0 0 0 0 0

1689 7 Results 0 264192 20 DSearchPath::Results 20 DSearchPath::Results 1687 0 0 0 0 0 0 0 0 0 0 0 0

1690 31 PointerTo< VirtualFileMount > * 0 8576 31 PointerTo< VirtualFileMount > * 31 PointerTo< VirtualFileMount > * 0 0 1492 0 0 0 0 0 0 0 0 0 0

1691 17 decltype(nullptr) 0 8194 17 decltype(nullptr) 17 decltype(nullptr) 0 9 0 0 0 0 0 0 0 0 0 0 0

1692 37 PointerTo< VirtualFileMount > const * 0 8576 37 PointerTo< VirtualFileMount > const * 37 PointerTo< VirtualFileMount > const * 0 0 1693 0 0 0 0 0 0 0 0 0 0

1693 35 PointerTo< VirtualFileMount > const 0 8832 35 PointerTo< VirtualFileMount > const 35 PointerTo< VirtualFileMount > const 0 0 1492 0 0 0 0 0 0 0 0 0 0

1694 35 PointerToBase< VirtualFileMount > * 0 8576 35 PointerToBase< VirtualFileMount > * 35 PointerToBase< VirtualFileMount > * 0 0 1493 0 0 0 0 0 0 0 0 0 0

1695 41 PointerToBase< VirtualFileMount > const * 0 8576 41 PointerToBase< VirtualFileMount > const * 41 PointerToBase< VirtualFileMount > const * 0 0 1696 0 0 0 0 0 0 0 0 0 0

1696 39 PointerToBase< VirtualFileMount > const 0 8832 39 PointerToBase< VirtualFileMount > const 39 PointerToBase< VirtualFileMount > const 0 0 1493 0 0 0 0 0 0 0 0 0 0

1697 14 StringStream * 0 8576 14 StringStream * 14 StringStream * 0 0 1494 0 0 0 0 0 0 0 0 0 0

1698 11 TrueClock * 0 8576 11 TrueClock * 11 TrueClock * 0 0 1498 0 0 0 0 0 0 0 0 0 0

1699 17 TrueClock const * 0 8576 17 TrueClock const * 17 TrueClock const * 0 0 1700 0 0 0 0 0 0 0 0 0 0

1700 15 TrueClock const 0 8832 15 TrueClock const 15 TrueClock const 0 0 1498 0 0 0 0 0 0 0 0 0 0

1701 11 Patchfile * 0 8576 11 Patchfile * 11 Patchfile * 0 0 1500 0 0 0 0 0 0 0 0 0 0

1702 17 Patchfile const * 0 8576 17 Patchfile const * 17 Patchfile const * 0 0 1703 0 0 0 0 0 0 0 0 0 0

1703 15 Patchfile const 0 8832 15 Patchfile const 15 Patchfile const 0 0 1500 0 0 0 0 0 0 0 0 0 0

1704 25 WeakPointerToVoid const * 0 8576 25 WeakPointerToVoid const * 25 WeakPointerToVoid const * 0 0 1705 0 0 0 0 0 0 0 0 0 0

1705 23 WeakPointerToVoid const 0 8832 23 WeakPointerToVoid const 23 WeakPointerToVoid const 0 0 1504 0 0 0 0 0 0 0 0 0 0

1706 17 WindowsRegistry * 0 8576 17 WindowsRegistry * 17 WindowsRegistry * 0 0 1505 0 0 0 0 0 0 0 0 0 0

1707 23 WindowsRegistry const * 0 8576 23 WindowsRegistry const * 23 WindowsRegistry const * 0 0 1708 0 0 0 0 0 0 0 0 0 0

1708 21 WindowsRegistry const 0 8832 21 WindowsRegistry const 21 WindowsRegistry const 0 0 1505 0 0 0 0 0 0 0 0 0 0

0
27
1709 8 tracking 0 2 1439 885 0 0 0 0 0 0 0 21 MemoryUsage::tracking 0

1710 8 counting 0 2 1439 886 0 0 0 0 0 0 0 21 MemoryUsage::counting 0

1711 16 current_cpp_size 0 2 1440 887 0 0 0 0 0 0 0 29 MemoryUsage::current_cpp_size 0

1712 14 total_cpp_size 0 2 1440 888 0 0 0 0 0 0 0 27 MemoryUsage::total_cpp_size 0

1713 22 panda_heap_single_size 0 2 1440 889 0 0 0 0 0 0 0 35 MemoryUsage::panda_heap_single_size 0

1714 21 panda_heap_array_size 0 2 1440 890 0 0 0 0 0 0 0 34 MemoryUsage::panda_heap_array_size 0

1715 19 panda_heap_overhead 0 2 1440 891 0 0 0 0 0 0 0 32 MemoryUsage::panda_heap_overhead 0

1716 15 panda_mmap_size 0 2 1440 892 0 0 0 0 0 0 0 28 MemoryUsage::panda_mmap_size 0

1717 13 external_size 0 2 1440 893 0 0 0 0 0 0 0 26 MemoryUsage::external_size 0

1718 10 total_size 0 2 1440 894 0 0 0 0 0 0 0 23 MemoryUsage::total_size 0

1719 9 ref_count 0 2 1443 910 0 0 0 0 0 0 0 25 ReferenceCount::ref_count 31
// The current reference count.

1720 8 filename 0 2 1452 1036 0 0 0 0 0 0 0 22 DatagramSink::filename 0

1721 4 file 0 2 1454 1037 0 0 0 0 0 0 0 18 DatagramSink::file 0

1722 8 file_pos 0 2 1458 1038 0 0 0 0 0 0 0 22 DatagramSink::file_pos 0

1723 12 magic_number 0 2 1471 1185 0 0 0 0 0 0 0 23 Multifile::magic_number 0

1724 4 name 0 6 1474 1192 1189 0 0 0 0 0 0 13 Namable::name 0

1725 6 mounts 0 66 1492 1333 0 0 0 0 1332 0 0 25 VirtualFileSystem::mounts 0

1726 4 data 0 6 1495 1375 1376 0 0 0 0 0 0 18 StringStream::data 0

1727 9 long_time 0 2 1499 1378 0 0 0 0 0 0 0 20 TrueClock::long_time 203
// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

1728 10 short_time 0 2 1499 1379 0 0 0 0 0 0 0 21 TrueClock::short_time 206
// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

1729 14 short_raw_time 0 2 1499 1380 0 0 0 0 0 0 0 25 TrueClock::short_raw_time 144
// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

1730 11 error_count 0 2 1443 1381 0 0 0 0 0 0 0 22 TrueClock::error_count 0

1731 8 progress 0 2 1501 1391 0 0 0 0 0 0 0 19 Patchfile::progress 0

1732 15 allow_multifile 0 6 1439 1393 1392 0 0 0 0 0 0 26 Patchfile::allow_multifile 0

1733 16 footprint_length 0 6 1443 1395 1394 0 0 0 0 0 0 27 Patchfile::footprint_length 0

1734 11 source_hash 0 10 1503 1398 0 1397 0 0 0 0 0 22 Patchfile::source_hash 0

1735 11 result_hash 0 2 1503 1399 0 0 0 0 0 0 0 22 Patchfile::result_hash 0

6
1736 12 get_pointers 0 1104 1105 33 MemoryUsagePointers::get_pointers 0

1737 18 get_typed_pointers 0 1104 1106 39 MemoryUsagePointers::get_typed_pointers 0

1738 17 get_subfile_names 0 1163 1168 28 Multifile::get_subfile_names 0

1739 17 get_subfile_names 0 1279 1284 29 ZipArchive::get_subfile_names 0

1740 9 get_files 0 1318 1319 26 VirtualFileList::get_files 0

1741 10 get_mounts 0 1332 1333 29 VirtualFileSystem::get_mounts 0

