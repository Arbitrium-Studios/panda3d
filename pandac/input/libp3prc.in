1713074349
3 3
8 libp3prc 4 Flsb 12 panda3d.core 
394
396 11 ConfigFlags 0 260 790 24 ConfigFlags::ConfigFlags 0 2 1 2 0
112
inline ConfigFlags::ConfigFlags(void) = default;
inline ConfigFlags::ConfigFlags(ConfigFlags const &) = default;

397 12 ~ConfigFlags 0 516 790 25 ConfigFlags::~ConfigFlags 0 0 0
32
ConfigFlags::~ConfigFlags(void);

398 16 get_default_page 0 4 793 28 ConfigPage::get_default_page 0 1 3 136
/**
 * Returns a pointer to the global "default page".  This is the ConfigPage
 * that lists all variables' original default values.
 */
54
static ConfigPage *ConfigPage::get_default_page(void);

399 14 get_local_page 0 4 793 26 ConfigPage::get_local_page 0 1 4 191
/**
 * Returns a pointer to the global "local page".  This is the ConfigPage that
 * lists the locally-assigned values for any variables in the world that have
 * such a local assignment.
 */
52
static ConfigPage *ConfigPage::get_local_page(void);

400 8 get_name 0 4 793 20 ConfigPage::get_name 0 1 5 115
/**
 * Returns the name of the page.  If the page was loaded from a .prc file,
 * this is usually the filename.
 */
59
inline std::string const &ConfigPage::get_name(void) const;

401 10 is_special 0 4 793 22 ConfigPage::is_special 0 1 6 248
/**
 * Returns true if this is the special "default" or "local" page, or false if
 * it is an ordinary page, e.g.  an implicit page loaded from a prc file at
 * startup, or an explicit page created by
 * ConfigPageManager::make_explicit_page().
 */
47
inline bool ConfigPage::is_special(void) const;

402 11 is_implicit 0 4 793 23 ConfigPage::is_implicit 0 1 7 180
/**
 * Returns true if the page was loaded by implicitly searching the config path
 * on startup, or false if it was explicitly loaded by dynamic code after
 * initial startup.
 */
48
inline bool ConfigPage::is_implicit(void) const;

403 8 set_sort 0 4 793 20 ConfigPage::set_sort 0 1 8 363
/**
 * Changes the explicit sort order of this particular ConfigPage.  Lower-
 * numbered pages supercede higher-numbered pages.  Initially, all explicitly-
 * loaded pages have sort value 0, and implicitly-loaded pages (found on disk)
 * have sort value 10; you may set an individual page higher or lower to
 * influence its priority relative to other pages.
 */
36
void ConfigPage::set_sort(int sort);

404 8 get_sort 0 4 793 20 ConfigPage::get_sort 0 1 9 93
/**
 * Returns the explicit sort order of this particular ConfigPage.  See
 * set_sort().
 */
44
inline int ConfigPage::get_sort(void) const;

405 12 get_page_seq 0 4 793 24 ConfigPage::get_page_seq 0 1 10 413
/**
 * Returns the sequence number of the page.
 *
 * Sequence numbers for a particular class (implicit vs.  explicit) of pages
 * are assigned as each page is loaded; each page is given a higher sequence
 * number than all the pages loaded before it.
 *
 * The implicit_load pages, which are discovered in the file system
 * automatically, have a different set of sequence numbers than the explicit
 * pages.
 */
48
inline int ConfigPage::get_page_seq(void) const;

406 15 get_trust_level 0 4 793 27 ConfigPage::get_trust_level 0 1 11 302
/**
 * Returns the trust level associated with this page.  An untrusted page is
 * trust level 0; if the page was loaded from a signed .prc file, its trust
 * level is the index number of the certificate that signed it.  Generally, a
 * higher trust level value represents a greater level of trust.
 */
51
inline int ConfigPage::get_trust_level(void) const;

407 15 set_trust_level 0 4 793 27 ConfigPage::set_trust_level 0 1 12 195
/**
 * Explicitly sets the trust level on this particular page.  Note that any
 * subsequent changes to the page, or to any variable declarations on it, will
 * reset the trust level to zero.
 */
57
inline void ConfigPage::set_trust_level(int trust_level);

408 13 get_signature 0 4 793 25 ConfigPage::get_signature 0 1 13 153
/**
 * Returns the raw binary signature that was found in the prc file, if any.
 * This method is probably not terribly useful for most applications.
 */
64
inline std::string const &ConfigPage::get_signature(void) const;

409 5 clear 0 4 793 17 ConfigPage::clear 0 1 14 57
/**
 * Removes all of the declarations from the page.
 */
29
void ConfigPage::clear(void);

410 8 read_prc 0 4 793 20 ConfigPage::read_prc 0 1 15 392
/**
 * Reads the contents of a complete prc file, as returned by the indicated
 * istream, into the current page file.  Returns true on success, or false on
 * some I/O error.
 *
 * This is a low-level interface.  Normally you do not need to call it
 * directly.  See the global functions load_prc_file() and unload_prc_file(),
 * defined in panda/src/putil, for a higher-level interface.
 */
44
bool ConfigPage::read_prc(std::istream &in);

411 18 read_encrypted_prc 0 4 793 30 ConfigPage::read_encrypted_prc 0 1 16 155
/**
 * Automatically decrypts and reads the stream, given the indicated password.
 * Note that if the password is incorrect, the result may be garbage.
 */
83
bool ConfigPage::read_encrypted_prc(std::istream &in, std::string const &password);

412 16 make_declaration 0 4 793 28 ConfigPage::make_declaration 0 2 17 18 168
/**
 * Adds the indicated variable/value pair as a new declaration on the page.
 */

/**
 * Adds the indicated variable/value pair as a new declaration on the page.
 */
208
ConfigDeclaration *ConfigPage::make_declaration(std::string const &variable, std::string const &value);
ConfigDeclaration *ConfigPage::make_declaration(ConfigVariableCore *variable, std::string const &value);

413 18 delete_declaration 0 4 793 30 ConfigPage::delete_declaration 0 1 19 171
/**
 * Removes the indicated declaration from the page and deletes it.  Returns
 * true if the declaration is successfully removed, false if it was not on the
 * page.
 */
61
bool ConfigPage::delete_declaration(ConfigDeclaration *decl);

414 20 get_num_declarations 0 4 793 32 ConfigPage::get_num_declarations 0 1 20 58
/**
 * Returns the number of declarations on the page.
 */
57
std::size_t ConfigPage::get_num_declarations(void) const;

415 15 get_declaration 0 4 793 27 ConfigPage::get_declaration 0 1 21 51
/**
 * Returns the nth declaration on the page.
 */
74
ConfigDeclaration const *ConfigPage::get_declaration(std::size_t n) const;

416 18 modify_declaration 0 4 793 30 ConfigPage::modify_declaration 0 1 22 180
/**
 * Returns a modifiable pointer to the nth declaration on the page.  Any
 * modifications will appear in the output, if the page is written out with
 * ConfigPage::write().
 */
65
ConfigDeclaration *ConfigPage::modify_declaration(std::size_t n);

417 17 get_variable_name 0 4 793 29 ConfigPage::get_variable_name 0 1 23 73
/**
 * Returns the variable named by the nth declaration on the page.
 */
63
std::string ConfigPage::get_variable_name(std::size_t n) const;

418 16 get_string_value 0 4 793 28 ConfigPage::get_string_value 0 1 24 73
/**
 * Returns the value assigned by the nth declaration on the page.
 */
62
std::string ConfigPage::get_string_value(std::size_t n) const;

419 16 is_variable_used 0 4 793 28 ConfigPage::is_variable_used 0 1 25 105
/**
 * Returns true if the nth active variable on the page has been used by code,
 * false otherwise.
 */
55
bool ConfigPage::is_variable_used(std::size_t n) const;

420 8 get_page 0 4 800 27 ConfigDeclaration::get_page 0 1 29 67
/**
 * Returns the page on which this declaration can be found.
 */
59
inline ConfigPage *ConfigDeclaration::get_page(void) const;

421 12 get_variable 0 4 800 31 ConfigDeclaration::get_variable 0 1 30 148
/**
 * Returns the variable that this declaration names.  This variable may or may
 * not have been defined by the time the declaration is read.
 */
71
inline ConfigVariableCore *ConfigDeclaration::get_variable(void) const;

422 21 upcast_to_ConfigFlags 0 12 803 41 ConfigVariableCore::upcast_to_ConfigFlags 0 1 81 45
upcast from ConfigVariableCore to ConfigFlags
61
ConfigFlags *ConfigVariableCore::upcast_to_ConfigFlags(void);

423 30 downcast_to_ConfigVariableCore 0 12 790 43 ConfigFlags::downcast_to_ConfigVariableCore 0 0 47
downcast from ConfigFlags to ConfigVariableCore
70
ConfigVariableCore *ConfigFlags::downcast_to_ConfigVariableCore(void);

424 20 upcast_to_MemoryBase 0 12 803 40 ConfigVariableCore::upcast_to_MemoryBase 0 1 82 44
upcast from ConfigVariableCore to MemoryBase
59
MemoryBase *ConfigVariableCore::upcast_to_MemoryBase(void);

425 30 downcast_to_ConfigVariableCore 0 12 804 42 MemoryBase::downcast_to_ConfigVariableCore 0 0 46
downcast from MemoryBase to ConfigVariableCore
69
ConfigVariableCore *MemoryBase::downcast_to_ConfigVariableCore(void);

426 8 get_name 0 4 803 28 ConfigVariableCore::get_name 0 1 53 44
/**
 * Returns the name of the variable.
 */
67
inline std::string const &ConfigVariableCore::get_name(void) const;

427 7 is_used 0 4 803 27 ConfigVariableCore::is_used 0 1 54 118
/**
 * Returns true if the variable has been referenced by a ConfigVariable
 * somewhere in code, false otherwise.
 */
52
inline bool ConfigVariableCore::is_used(void) const;

428 14 get_value_type 0 4 803 34 ConfigVariableCore::get_value_type 0 1 55 125
/**
 * Returns the stated type of this variable.  If the variable has not yet been
 * defined, this will be VT_undefined.
 */
77
inline ConfigFlags::ValueType ConfigVariableCore::get_value_type(void) const;

429 15 get_description 0 4 803 35 ConfigVariableCore::get_description 0 1 56 82
/**
 * Returns the brief description of this variable, if it has been defined.
 */
74
inline std::string const &ConfigVariableCore::get_description(void) const;

430 9 get_flags 0 4 803 29 ConfigVariableCore::get_flags 0 1 57 250
/**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */
53
inline int ConfigVariableCore::get_flags(void) const;

431 9 is_closed 0 4 803 29 ConfigVariableCore::is_closed 0 1 58 413
/**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
54
inline bool ConfigVariableCore::is_closed(void) const;

432 15 get_trust_level 0 4 803 35 ConfigVariableCore::get_trust_level 0 1 59 479
/**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
59
inline int ConfigVariableCore::get_trust_level(void) const;

433 10 is_dynamic 0 4 803 30 ConfigVariableCore::is_dynamic 0 1 60 232
/**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */
55
inline bool ConfigVariableCore::is_dynamic(void) const;

434 17 get_default_value 0 4 803 37 ConfigVariableCore::get_default_value 0 1 61 137
/**
 * Returns the default variable specified for this variable.  If the variable
 * has not yet been defined, this will return NULL.
 */
82
inline ConfigDeclaration const *ConfigVariableCore::get_default_value(void) const;

435 14 set_value_type 0 4 803 34 ConfigVariableCore::set_value_type 0 1 62 212
/**
 * Specifies the type of this variable.  See get_value_type().  It is not an
 * error to call this multiple times, but if the value changes once
 * get_declaration() has been called, a warning is printed.
 */
75
void ConfigVariableCore::set_value_type(ConfigFlags::ValueType value_type);

436 9 set_flags 0 4 803 29 ConfigVariableCore::set_flags 0 1 63 214
/**
 * Specifies the trust level of this variable.  See get_flags().  It is not an
 * error to call this multiple times, but if the value changes once
 * get_declaration() has been called, a warning is printed.
 */
46
void ConfigVariableCore::set_flags(int flags);

437 15 set_description 0 4 803 35 ConfigVariableCore::set_description 0 1 64 232
/**
 * Specifies the one-line description of this variable.  See
 * get_description().  It is not an error to call this multiple times, but if
 * the value changes once get_declaration() has been called, a warning is
 * printed.
 */
73
void ConfigVariableCore::set_description(std::string const &description);

438 17 set_default_value 0 4 803 37 ConfigVariableCore::set_default_value 0 1 65 97
/**
 * Specifies the default value for this variable if it is not defined in any
 * prc file.
 */
77
void ConfigVariableCore::set_default_value(std::string const &default_value);

439 8 set_used 0 4 803 28 ConfigVariableCore::set_used 0 1 66 75
/**
 * Marks that the variable has been "declared" by a ConfigVariable.
 */
47
inline void ConfigVariableCore::set_used(void);

440 16 make_local_value 0 4 803 36 ConfigVariableCore::make_local_value 0 1 67 324
/**
 * Creates a new local value for this variable, if there is not already one
 * specified.  This will shadow any values defined in the various .prc files.
 *
 * If there is already a local value defined for this variable, simply returns
 * that one.
 *
 * Use clear_local_value() to remove the local value definition.
 */
62
ConfigDeclaration *ConfigVariableCore::make_local_value(void);

441 17 clear_local_value 0 4 803 37 ConfigVariableCore::clear_local_value 0 1 68 240
/**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */
49
bool ConfigVariableCore::clear_local_value(void);

442 15 has_local_value 0 4 803 35 ConfigVariableCore::has_local_value 0 1 69 148
/**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */
60
inline bool ConfigVariableCore::has_local_value(void) const;

443 9 has_value 0 4 803 29 ConfigVariableCore::has_value 0 1 70 149
/**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */
47
bool ConfigVariableCore::has_value(void) const;

444 20 get_num_declarations 0 4 803 40 ConfigVariableCore::get_num_declarations 0 1 71 194
/**
 * Returns the number of declarations that contribute to this variable's
 * value.  If the variable has been defined, this will always be at least 1
 * (for the default value, at least).
 */
65
std::size_t ConfigVariableCore::get_num_declarations(void) const;

445 15 get_declaration 0 4 803 35 ConfigVariableCore::get_declaration 0 1 72 285
/**
 * Returns the nth declarations that contributes to this variable's value.
 * The declarations are arranged in order such that earlier declarations
 * shadow later declarations; thus, get_declaration(0) is always defined and
 * always returns the current value of the variable.
 */
82
ConfigDeclaration const *ConfigVariableCore::get_declaration(std::size_t n) const;

446 18 get_num_references 0 4 803 38 ConfigVariableCore::get_num_references 0 1 73 157
/**
 * Returns the number of prc files that reference this variable.  This is not
 * exactly the same as the number of declarations; see get_reference().
 */
70
inline std::size_t ConfigVariableCore::get_num_references(void) const;

447 13 get_reference 0 4 803 33 ConfigVariableCore::get_reference 0 1 74 335
/**
 * Returns the nth declaration in a prc file that references this variable.
 * This is similar, but not identical to, get_declaration().  The difference
 * is that this will list *only* true references in a prc file, and will not
 * list default values or locally-assigned values; it also will list even the
 * untrusted files.
 */
87
inline ConfigDeclaration const *ConfigVariableCore::get_reference(std::size_t n) const;

448 26 get_num_trusted_references 0 4 803 46 ConfigVariableCore::get_num_trusted_references 0 1 75 115
/**
 * Returns the number of trusted prc files that reference this variable.  See
 * also get_num_references().
 */
78
inline std::size_t ConfigVariableCore::get_num_trusted_references(void) const;

449 21 get_trusted_reference 0 4 803 41 ConfigVariableCore::get_trusted_reference 0 1 76 428
/**
 * Returns the nth declaration in a trusted prc file that references this
 * variable.  This is similar, but not identical to, get_declaration().  The
 * difference is that this will list *only* true references in a prc file, and
 * will not list default values or locally-assigned values.
 *
 * This is also similar to get_reference(), except that it only lists the
 * trusted declarations, omitting the untrusted ones.
 */
95
inline ConfigDeclaration const *ConfigVariableCore::get_trusted_reference(std::size_t n) const;

450 25 get_num_unique_references 0 4 803 45 ConfigVariableCore::get_num_unique_references 0 1 77 107
/**
 * Returns the number of trusted, unique (by string value) values there exist
 * for this variable.
 */
77
inline std::size_t ConfigVariableCore::get_num_unique_references(void) const;

451 20 get_unique_reference 0 4 803 40 ConfigVariableCore::get_unique_reference 0 1 78 157
/**
 * Returns the nth trusted, unique value for this variable.  This is similar
 * to get_trusted_reference(), except that duplicate values are removed.
 */
94
inline ConfigDeclaration const *ConfigVariableCore::get_unique_reference(std::size_t n) const;

452 6 output 0 4 803 26 ConfigVariableCore::output 0 1 79 10
/**
 *
 */
57
void ConfigVariableCore::output(std::ostream &out) const;

453 5 write 0 4 803 25 ConfigVariableCore::write 0 1 80 10
/**
 *
 */
56
void ConfigVariableCore::write(std::ostream &out) const;

454 16 get_string_value 0 4 800 35 ConfigDeclaration::get_string_value 0 1 31 186
/**
 * Returns the value assigned to this variable.  This is the original one-line
 * text defined for the variable in the .prc file (or passed to
 * ConfigPage::make_declaration()).
 */
74
inline std::string const &ConfigDeclaration::get_string_value(void) const;

455 16 set_string_value 0 4 800 35 ConfigDeclaration::set_string_value 0 1 32 55
/**
 * Changes the value assigned to this variable.
 */
74
inline void ConfigDeclaration::set_string_value(std::string const &value);

456 13 get_num_words 0 4 800 32 ConfigDeclaration::get_num_words 0 1 33 156
/**
 * Returns the number of words in the declaration's value.  A word is defined
 * as a sequence of non-whitespace characters delimited by whitespace.
 */
64
inline std::size_t ConfigDeclaration::get_num_words(void) const;

457 15 has_string_word 0 4 800 34 ConfigDeclaration::has_string_word 0 1 34 184
/**
 * Returns true if the declaration's value has a valid string value for the
 * nth word.  This is really the same thing as asking if there are at least n
 * words in the value.
 */
68
inline bool ConfigDeclaration::has_string_word(std::size_t n) const;

458 13 has_bool_word 0 4 800 32 ConfigDeclaration::has_bool_word 0 1 35 97
/**
 * Returns true if the declaration's value has a valid boolean value for the
 * nth word.
 */
66
inline bool ConfigDeclaration::has_bool_word(std::size_t n) const;

459 12 has_int_word 0 4 800 31 ConfigDeclaration::has_int_word 0 1 36 97
/**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */
65
inline bool ConfigDeclaration::has_int_word(std::size_t n) const;

460 14 has_int64_word 0 4 800 33 ConfigDeclaration::has_int64_word 0 1 37 95
/**
 * Returns true if the declaration's value has a valid int64 value for the nth
 * word.
 */
67
inline bool ConfigDeclaration::has_int64_word(std::size_t n) const;

461 15 has_double_word 0 4 800 34 ConfigDeclaration::has_double_word 0 1 38 97
/**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */
68
inline bool ConfigDeclaration::has_double_word(std::size_t n) const;

462 15 get_string_word 0 4 800 34 ConfigDeclaration::get_string_word 0 1 39 153
/**
 * Returns the string value of the nth word of the declaration's value, or
 * empty string if there is no nth value.  See also has_string_word().
 */
75
inline std::string ConfigDeclaration::get_string_word(std::size_t n) const;

463 13 get_bool_word 0 4 800 32 ConfigDeclaration::get_bool_word 0 1 40 145
/**
 * Returns the boolean value of the nth word of the declaration's value, or
 * false if there is no nth value.  See also has_bool_word().
 */
66
inline bool ConfigDeclaration::get_bool_word(std::size_t n) const;

464 12 get_int_word 0 4 800 31 ConfigDeclaration::get_int_word 0 1 41 140
/**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_int_word().
 */
64
inline int ConfigDeclaration::get_int_word(std::size_t n) const;

465 14 get_int64_word 0 4 800 33 ConfigDeclaration::get_int64_word 0 1 42 140
/**
 * Returns the int64 value of the nth word of the declaration's value, or 0 if
 * there is no nth value.  See also has_int64_word().
 */
70
inline int64_t ConfigDeclaration::get_int64_word(std::size_t n) const;

466 15 get_double_word 0 4 800 34 ConfigDeclaration::get_double_word 0 1 43 143
/**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_double_word().
 */
70
inline double ConfigDeclaration::get_double_word(std::size_t n) const;

467 15 set_string_word 0 4 800 34 ConfigDeclaration::set_string_word 0 1 44 92
/**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */
81
void ConfigDeclaration::set_string_word(std::size_t n, std::string const &value);

468 13 set_bool_word 0 4 800 32 ConfigDeclaration::set_bool_word 0 1 45 92
/**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */
65
void ConfigDeclaration::set_bool_word(std::size_t n, bool value);

469 12 set_int_word 0 4 800 31 ConfigDeclaration::set_int_word 0 1 46 92
/**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */
63
void ConfigDeclaration::set_int_word(std::size_t n, int value);

470 14 set_int64_word 0 4 800 33 ConfigDeclaration::set_int64_word 0 1 47 92
/**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */
69
void ConfigDeclaration::set_int64_word(std::size_t n, int64_t value);

471 15 set_double_word 0 4 800 34 ConfigDeclaration::set_double_word 0 1 48 92
/**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */
69
void ConfigDeclaration::set_double_word(std::size_t n, double value);

472 18 get_filename_value 0 4 800 37 ConfigDeclaration::get_filename_value 0 1 49 100
/**
 * Interprets the string value as a filename and returns it, with any
 * variables expanded.
 */
59
Filename ConfigDeclaration::get_filename_value(void) const;

473 12 get_decl_seq 0 4 800 31 ConfigDeclaration::get_decl_seq 0 1 50 254
/**
 * Returns the sequence number of the declaration within the page.  Sequence
 * numbers are assigned as each declaration is created; each declaration is
 * given a higher sequence number than all the declarations created in the
 * page before it.
 */
55
inline int ConfigDeclaration::get_decl_seq(void) const;

474 6 output 0 4 800 25 ConfigDeclaration::output 0 1 51 10
/**
 *
 */
56
void ConfigDeclaration::output(std::ostream &out) const;

475 5 write 0 4 800 24 ConfigDeclaration::write 0 1 52 10
/**
 *
 */
55
void ConfigDeclaration::write(std::ostream &out) const;

476 6 output 0 4 793 18 ConfigPage::output 0 1 26 10
/**
 *
 */
49
void ConfigPage::output(std::ostream &out) const;

477 22 output_brief_signature 0 4 793 34 ConfigPage::output_brief_signature 0 1 27 61
/**
 * Outputs the first few hex digits of the signature.
 */
65
void ConfigPage::output_brief_signature(std::ostream &out) const;

478 5 write 0 4 793 17 ConfigPage::write 0 1 28 10
/**
 *
 */
48
void ConfigPage::write(std::ostream &out) const;

479 6 Notify 0 260 808 14 Notify::Notify 0 2 83 84 10
/**
 *
 */
70
Notify::Notify(void);
inline Notify::Notify(Notify const &) = default;

480 7 ~Notify 0 516 808 15 Notify::~Notify 0 0 10
/**
 *
 */
22
Notify::~Notify(void);

481 15 set_ostream_ptr 0 4 808 23 Notify::set_ostream_ptr 0 1 85 250
/**
 * Changes the ostream that all subsequent Notify messages will be written to.
 * If the previous ostream was set with delete_later = true, this will delete
 * the previous ostream.  If ostream_ptr is NULL, this resets the default to
 * cerr.
 */
71
void Notify::set_ostream_ptr(PyObject *ostream_ptr, bool delete_later);

482 15 get_ostream_ptr 0 4 808 23 Notify::get_ostream_ptr 0 1 86 67
/**
 * Returns the system-wide ostream for all Notify messages.
 */
50
std::ostream *Notify::get_ostream_ptr(void) const;

483 18 set_assert_handler 0 4 808 26 Notify::set_assert_handler 0 0 540
/**
 * Sets a pointer to a C function that will be called when an assertion test
 * fails.  This function may decide what to do when that happens: it may
 * choose to abort or return.  If it returns, it should return true to
 * indicate that the assertion should be respected (and the calling function
 * should return out of its block of code), or false to indicate that the
 * assertion should be completely ignored.
 *
 * If an assert handler is installed, it completely replaces the default
 * behavior of nassertr() and nassertv().
 */
71
void Notify::set_assert_handler(Notify::AssertHandler *assert_handler);

484 20 clear_assert_handler 0 4 808 28 Notify::clear_assert_handler 0 1 87 110
/**
 * Removes the installed assert handler and restores default behavior of
 * nassertr() and nassertv().
 */
40
void Notify::clear_assert_handler(void);

485 18 has_assert_handler 0 4 808 26 Notify::has_assert_handler 0 1 88 85
/**
 * Returns true if a user assert handler has been installed, false otherwise.
 */
44
bool Notify::has_assert_handler(void) const;

486 18 get_assert_handler 0 4 808 26 Notify::get_assert_handler 0 1 89 110
/**
 * Returns a pointer to the user-installed assert handler, if one was
 * installed, or NULL otherwise.
 */
62
Notify::AssertHandler *Notify::get_assert_handler(void) const;

487 17 has_assert_failed 0 4 808 25 Notify::has_assert_failed 0 1 90 637
/**
 * Returns true if an assertion test has failed (and not been ignored) since
 * the last call to clear_assert_failed().
 *
 * When an assertion test fails, the assert handler may decide either to
 * abort, return, or ignore the assertion.  Naturally, if it decides to abort,
 * this flag is irrelevant.  If it chooses to ignore the assertion, the flag
 * is not set.  However, if the assert handler chooses to return out of the
 * function (the normal case), it will also set this flag to indicate that an
 * assertion failure has occurred.
 *
 * This will also be the behavior in the absence of a user-defined assert
 * handler.
 */
50
inline bool Notify::has_assert_failed(void) const;

488 24 get_assert_error_message 0 4 808 32 Notify::get_assert_error_message 0 1 91 100
/**
 * Returns the error message that corresponds to the assertion that most
 * recently failed.
 */
71
inline std::string const &Notify::get_assert_error_message(void) const;

489 19 clear_assert_failed 0 4 808 27 Notify::clear_assert_failed 0 1 92 114
/**
 * Resets the assert_failed flag that is set whenever an assertion test fails.
 * See has_assert_failed().
 */
46
inline void Notify::clear_assert_failed(void);

490 16 get_top_category 0 4 808 24 Notify::get_top_category 0 1 93 129
/**
 * Returns the topmost Category in the hierarchy.  This may be used to
 * traverse the hierarchy of available Categories.
 */
47
NotifyCategory *Notify::get_top_category(void);

491 12 get_category 0 4 808 20 Notify::get_category 0 3 94 95 96 844
/**
 * Finds or creates a new Category given the basename of the category and its
 * parent in the category hierarchy.  The parent pointer may be NULL to
 * indicate this is a top-level Category.
 */

/**
 * Finds or creates a new Category given the basename of the category and the
 * fullname of its parent.  This is another way to create a category when you
 * don't have a pointer to its parent handy, but you know the name of its
 * parent.  If the parent Category does not already exist, it will be created.
 */

/**
 * Finds or creates a new Category given the fullname of the Category.  This
 * name should be a sequence of colon-separated names of parent Categories,
 * ending in the basename of this Category, e.g.  display:glxdisplay.  This is
 * a shorthand way to define a Category when a pointer to its parent is not
 * handy.
 */
269
NotifyCategory *Notify::get_category(std::string const &basename, NotifyCategory *parent_category);
NotifyCategory *Notify::get_category(std::string const &basename, std::string const &parent_fullname);
NotifyCategory *Notify::get_category(std::string const &fullname);

492 3 out 0 4 808 11 Notify::out 0 2 97 98 405
/**
 * A convenient way to get the ostream that should be written to for a Notify-
 * type message of a particular severity.  Also see Category::out() for a
 * message that is specific to a particular Category.
 */

/**
 * A convenient way to get the ostream that should be written to for a Notify-
 * type message.  Also see Category::out() for a message that is specific to a
 * particular Category.
 */
98
static std::ostream &Notify::out(NotifySeverity severity);
static std::ostream &Notify::out(void);

493 4 null 0 4 808 12 Notify::null 0 1 99 159
/**
 * A convenient way to get an ostream that doesn't do anything.  Returned by
 * Category::out() when a particular Category and/or Severity is disabled.
 */
40
static std::ostream &Notify::null(void);

494 12 write_string 0 4 808 20 Notify::write_string 0 1 100 209
/**
 * A convenient way for scripting languages, which may know nothing about
 * ostreams, to write to Notify.  This writes a single string, followed by an
 * implicit newline, to the Notify output stream.
 */
57
static void Notify::write_string(std::string const &str);

495 3 ptr 0 4 808 11 Notify::ptr 0 1 101 104
/**
 * Returns the pointer to the global Notify object.  There is only one of
 * these in the world.
 */
33
static Notify *Notify::ptr(void);

496 21 loaded_implicit_pages 0 4 809 40 ConfigPageManager::loaded_implicit_pages 0 1 102 157
/**
 * Returns true if the implicit `*.prc` files have already been loaded, false
 * otherwise.  Normally this will only be false briefly before startup.
 */
65
inline bool ConfigPageManager::loaded_implicit_pages(void) const;

497 19 load_implicit_pages 0 4 809 38 ConfigPageManager::load_implicit_pages 0 1 103 252
/**
 * Searches the PRC_DIR and/or PRC_PATH directories for `*.prc` files and loads
 * them in as pages.  This is normally called automatically at startup time,
 * when the first variable's value is referenced.  See also
 * reload_implicit_pages().
 */
57
inline void ConfigPageManager::load_implicit_pages(void);

498 21 reload_implicit_pages 0 4 809 40 ConfigPageManager::reload_implicit_pages 0 1 104 211
/**
 * Searches the PRC_DIR and/or PRC_PATH directories for *.prc files and loads
 * them in as pages.
 *
 * This may be called after startup, to force the system to re-read all of the
 * implicit prc files.
 */
52
void ConfigPageManager::reload_implicit_pages(void);

499 15 get_search_path 0 4 809 34 ConfigPageManager::get_search_path 0 1 105 274
/**
 * Returns the search path used to locate implicit .prc files.  This is
 * determined by the PRC_DIR and PRC_PATH environment variables.  The object
 * returned by this method may be modified to change the path at runtime, and
 * then reload_implicit_pages() called.
 */
61
inline DSearchPath &ConfigPageManager::get_search_path(void);

500 20 get_num_prc_patterns 0 4 809 39 ConfigPageManager::get_num_prc_patterns 0 1 106 270
/**
 * Returns the number of patterns, like `*.prc`, that are compiled in that
 * will be searched for as default config filenames.  Normally there is only
 * one pattern, and it is `*.prc`, but others may be specified with the
 * PRC_FILENAME variable in Config.pp.
 */
71
inline std::size_t ConfigPageManager::get_num_prc_patterns(void) const;

501 15 get_prc_pattern 0 4 809 34 ConfigPageManager::get_prc_pattern 0 1 107 131
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * config file.  See get_num_prc_patterns().
 */
75
inline std::string ConfigPageManager::get_prc_pattern(std::size_t n) const;

502 30 get_num_prc_encrypted_patterns 0 4 809 49 ConfigPageManager::get_num_prc_encrypted_patterns 0 1 108 170
/**
 * Returns the number of patterns, like `*.pre`, that are compiled in that
 * will be searched for as special config files that are understood to be
 * encrypted.
 */
81
inline std::size_t ConfigPageManager::get_num_prc_encrypted_patterns(void) const;

503 25 get_prc_encrypted_pattern 0 4 809 44 ConfigPageManager::get_prc_encrypted_pattern 0 1 109 151
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * encrypted config file.  See get_num_prc_encrypted_patterns().
 */
85
inline std::string ConfigPageManager::get_prc_encrypted_pattern(std::size_t n) const;

504 31 get_num_prc_executable_patterns 0 4 809 50 ConfigPageManager::get_num_prc_executable_patterns 0 1 110 232
/**
 * Returns the number of patterns, like `*.exe`, that are compiled in that
 * will be searched for as special config files that are to be executed as a
 * program, and their output taken to be input.  This is normally empty.
 */
82
inline std::size_t ConfigPageManager::get_num_prc_executable_patterns(void) const;

505 26 get_prc_executable_pattern 0 4 809 45 ConfigPageManager::get_prc_executable_pattern 0 1 111 159
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * executable-style config file.  See get_num_prc_executable_patterns().
 */
86
inline std::string ConfigPageManager::get_prc_executable_pattern(std::size_t n) const;

506 18 make_explicit_page 0 4 809 37 ConfigPageManager::make_explicit_page 0 1 112 206
/**
 * Creates and returns a new, empty ConfigPage.  This page will be stacked on
 * top of any pages that were created before; it may shadow variable
 * declarations that are defined in previous pages.
 */
75
ConfigPage *ConfigPageManager::make_explicit_page(std::string const &name);

507 20 delete_explicit_page 0 4 809 39 ConfigPageManager::delete_explicit_page 0 1 113 318
/**
 * Removes a previously-constructed ConfigPage from the set of active pages,
 * and deletes it.  The ConfigPage object is no longer valid after this call.
 * Returns true if the page is successfully deleted, or false if it was
 * unknown (which should never happen if the page was legitimately
 * constructed).
 */
63
bool ConfigPageManager::delete_explicit_page(ConfigPage *page);

508 22 get_num_implicit_pages 0 4 809 41 ConfigPageManager::get_num_implicit_pages 0 1 114 174
/**
 * Returns the current number of implicitly-loaded ConfigPages in the world.
 * These represent files that were automatically discovered on the disk as
 * .prc files.
 */
73
inline std::size_t ConfigPageManager::get_num_implicit_pages(void) const;

509 17 get_implicit_page 0 4 809 36 ConfigPageManager::get_implicit_page 0 1 115 94
/**
 * Returns the nth implicit ConfigPage in the world.  See
 * get_num_implicit_pages().
 */
77
inline ConfigPage *ConfigPageManager::get_implicit_page(std::size_t n) const;

510 22 get_num_explicit_pages 0 4 809 41 ConfigPageManager::get_num_explicit_pages 0 1 116 214
/**
 * Returns the current number of explicitly-loaded ConfigPages in the world.
 * These represent pages that were loaded dynamically at runtime by explicit
 * calls to ConfigPageManager::make_explicit_page().
 */
73
inline std::size_t ConfigPageManager::get_num_explicit_pages(void) const;

511 17 get_explicit_page 0 4 809 36 ConfigPageManager::get_explicit_page 0 1 117 94
/**
 * Returns the nth explicit ConfigPage in the world.  See
 * get_num_explicit_pages().
 */
77
inline ConfigPage *ConfigPageManager::get_explicit_page(std::size_t n) const;

512 6 output 0 4 809 25 ConfigPageManager::output 0 1 118 10
/**
 *
 */
56
void ConfigPageManager::output(std::ostream &out) const;

513 5 write 0 4 809 24 ConfigPageManager::write 0 1 119 10
/**
 *
 */
55
void ConfigPageManager::write(std::ostream &out) const;

514 14 get_global_ptr 0 4 809 33 ConfigPageManager::get_global_ptr 0 1 120 10
/**
 *
 */
66
static ConfigPageManager *ConfigPageManager::get_global_ptr(void);

515 13 make_variable 0 4 811 36 ConfigVariableManager::make_variable 0 1 121 181
/**
 * Creates and returns a new, undefined ConfigVariableCore with the indicated
 * name; or if a variable with this name has already been created, returns
 * that one instead.
 */
82
ConfigVariableCore *ConfigVariableManager::make_variable(std::string const &name);

516 22 make_variable_template 0 4 811 45 ConfigVariableManager::make_variable_template 0 1 122 899
/**
 * Defines a variable "template" to match against dynamically-defined
 * variables that may or may not be created in the future.
 *
 * The template consists of a glob pattern, e.g.  `notify-level-*`, which will
 * be tested against any config variable passed to a future call to
 * make_variable().  If the pattern matches, the returned ConfigVariableCore
 * is copied to define the new variable, instead of creating a default, empty
 * one.
 *
 * This is useful to pre-specify default values for a family of variables that
 * all have similar properties, and all may not be created at the same time.
 * It is especially useful to avoid cluttering up the list of available
 * variables with user-declared variables that have not been defined yet by
 * the application (e.g. `egg-object-type-*`).
 *
 * This method basically pre-defines all variables that match the specified
 * glob pattern.
 */
215
ConfigVariableCore *ConfigVariableManager::make_variable_template(std::string const &pattern, ConfigFlags::ValueType type, std::string const &default_value, std::string const &description = string(), int flags = 0);

517 17 get_num_variables 0 4 811 40 ConfigVariableManager::get_num_variables 0 1 123 81
/**
 * Returns the current number of active ConfigVariableCores in the world.
 */
72
inline std::size_t ConfigVariableManager::get_num_variables(void) const;

518 12 get_variable 0 4 811 35 ConfigVariableManager::get_variable 0 1 124 66
/**
 * Returns the nth active ConfigVariableCore in the world.
 */
84
inline ConfigVariableCore *ConfigVariableManager::get_variable(std::size_t n) const;

519 17 get_variable_name 0 4 811 40 ConfigVariableManager::get_variable_name 0 1 125 73
/**
 * Returns the name of the nth active ConfigVariable in the list.
 */
74
std::string ConfigVariableManager::get_variable_name(std::size_t n) const;

520 16 is_variable_used 0 4 811 39 ConfigVariableManager::is_variable_used 0 1 126 111
/**
 * Returns true if the nth active ConfigVariable in the list has been used by
 * code, false otherwise.
 */
66
bool ConfigVariableManager::is_variable_used(std::size_t n) const;

521 6 output 0 4 811 29 ConfigVariableManager::output 0 1 127 10
/**
 *
 */
60
void ConfigVariableManager::output(std::ostream &out) const;

522 5 write 0 4 811 28 ConfigVariableManager::write 0 1 128 10
/**
 *
 */
59
void ConfigVariableManager::write(std::ostream &out) const;

523 19 write_prc_variables 0 4 811 42 ConfigVariableManager::write_prc_variables 0 1 129 343
/**
 * Writes all of the prc-set config variables, as they appear in a prc file
 * somewhere, one per line, very concisely.  This lists the dominant value in
 * the prc file; it does not list shadowed values, and it does not list
 * locally-set values.
 *
 * This is mainly intended for generating a hash of the input config file
 * state.
 */
73
void ConfigVariableManager::write_prc_variables(std::ostream &out) const;

524 21 list_unused_variables 0 4 811 44 ConfigVariableManager::list_unused_variables 0 1 130 133
/**
 * Writes a list of all the variables that have been defined in a prc file
 * without having been declared somewhere in code.
 */
62
void ConfigVariableManager::list_unused_variables(void) const;

525 14 list_variables 0 4 811 37 ConfigVariableManager::list_variables 0 1 131 123
/**
 * Writes a list of all the variables that have been declared somewhere in
 * code, along with a brief description.
 */
55
void ConfigVariableManager::list_variables(void) const;

526 22 list_dynamic_variables 0 4 811 45 ConfigVariableManager::list_dynamic_variables 0 1 132 241
/**
 * Writes a list of all the "dynamic" variables that have been declared
 * somewhere in code, along with a brief description.  This is a (usually
 * large) list of config variables that are declared with a generated variable
 * name.
 */
63
void ConfigVariableManager::list_dynamic_variables(void) const;

527 14 get_global_ptr 0 4 811 37 ConfigVariableManager::get_global_ptr 0 1 133 10
/**
 *
 */
74
static ConfigVariableManager *ConfigVariableManager::get_global_ptr(void);

528 21 upcast_to_ConfigFlags 0 12 812 41 ConfigVariableBase::upcast_to_ConfigFlags 0 1 146 45
upcast from ConfigVariableBase to ConfigFlags
61
ConfigFlags *ConfigVariableBase::upcast_to_ConfigFlags(void);

529 30 downcast_to_ConfigVariableBase 0 12 790 43 ConfigFlags::downcast_to_ConfigVariableBase 0 0 47
downcast from ConfigFlags to ConfigVariableBase
70
ConfigVariableBase *ConfigFlags::downcast_to_ConfigVariableBase(void);

530 20 upcast_to_MemoryBase 0 12 812 40 ConfigVariableBase::upcast_to_MemoryBase 0 1 147 44
upcast from ConfigVariableBase to MemoryBase
59
MemoryBase *ConfigVariableBase::upcast_to_MemoryBase(void);

531 30 downcast_to_ConfigVariableBase 0 12 804 42 MemoryBase::downcast_to_ConfigVariableBase 0 0 46
downcast from MemoryBase to ConfigVariableBase
69
ConfigVariableBase *MemoryBase::downcast_to_ConfigVariableBase(void);

532 8 get_name 0 4 812 28 ConfigVariableBase::get_name 0 1 134 44
/**
 * Returns the name of the variable.
 */
67
inline std::string const &ConfigVariableBase::get_name(void) const;

533 14 get_value_type 0 4 812 34 ConfigVariableBase::get_value_type 0 1 135 132
/**
 * Returns the stated type of this variable.  This should be VT_list, unless a
 * later variable declaration has changed it.
 */
77
inline ConfigFlags::ValueType ConfigVariableBase::get_value_type(void) const;

534 15 get_description 0 4 812 35 ConfigVariableBase::get_description 0 1 136 82
/**
 * Returns the brief description of this variable, if it has been defined.
 */
74
inline std::string const &ConfigVariableBase::get_description(void) const;

535 9 get_flags 0 4 812 29 ConfigVariableBase::get_flags 0 1 137 250
/**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */
53
inline int ConfigVariableBase::get_flags(void) const;

536 9 is_closed 0 4 812 29 ConfigVariableBase::is_closed 0 1 138 413
/**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
54
inline bool ConfigVariableBase::is_closed(void) const;

537 15 get_trust_level 0 4 812 35 ConfigVariableBase::get_trust_level 0 1 139 479
/**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
59
inline int ConfigVariableBase::get_trust_level(void) const;

538 10 is_dynamic 0 4 812 30 ConfigVariableBase::is_dynamic 0 1 140 232
/**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */
55
inline bool ConfigVariableBase::is_dynamic(void) const;

539 17 clear_local_value 0 4 812 37 ConfigVariableBase::clear_local_value 0 1 141 240
/**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */
56
inline bool ConfigVariableBase::clear_local_value(void);

540 15 has_local_value 0 4 812 35 ConfigVariableBase::has_local_value 0 1 142 148
/**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */
60
inline bool ConfigVariableBase::has_local_value(void) const;

541 9 has_value 0 4 812 29 ConfigVariableBase::has_value 0 1 143 149
/**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */
54
inline bool ConfigVariableBase::has_value(void) const;

542 6 output 0 4 812 26 ConfigVariableBase::output 0 1 144 10
/**
 *
 */
64
inline void ConfigVariableBase::output(std::ostream &out) const;

543 5 write 0 4 812 25 ConfigVariableBase::write 0 1 145 10
/**
 *
 */
63
inline void ConfigVariableBase::write(std::ostream &out) const;

544 14 ConfigVariable 0 260 813 30 ConfigVariable::ConfigVariable 0 2 148 149 458
/**
 * This constructor is only intended to be called from a specialized
 * ConfigVariableFoo derived class.
 */

/**
 * This constructor is only intended to be called from a specialized
 * ConfigVariableFoo derived class.
 */

/**
 * Use this constructor to make a ConfigVariable of an unspecified type.
 * Usually you'd want to do this just to reference a previously-defined
 * ConfigVariable of a specific type, without having to know what type it is.
 */
145
inline explicit ConfigVariable::ConfigVariable(std::string const &name);
inline ConfigVariable::ConfigVariable(ConfigVariable const &) = default;

545 15 ~ConfigVariable 0 516 813 31 ConfigVariable::~ConfigVariable 0 0 10
/**
 *
 */
45
inline ConfigVariable::~ConfigVariable(void);

546 16 get_string_value 0 4 813 32 ConfigVariable::get_string_value 0 1 150 77
/**
 * Returns the toplevel value of the variable, formatted as a string.
 */
71
inline std::string const &ConfigVariable::get_string_value(void) const;

547 16 set_string_value 0 4 813 32 ConfigVariable::set_string_value 0 1 151 177
/**
 * Changes the value assigned to this variable.  This creates a local value
 * that shadows any values defined in the .prc files, until
 * clear_local_value() is called.
 */
71
inline void ConfigVariable::set_string_value(std::string const &value);

548 11 clear_value 0 4 813 27 ConfigVariable::clear_value 0 1 152 129
/**
 * Removes the value assigned to this variable, and lets its original value
 * (as read from the prc files) show through.
 */
46
inline void ConfigVariable::clear_value(void);

549 13 get_num_words 0 4 813 29 ConfigVariable::get_num_words 0 1 153 153
/**
 * Returns the number of words in the variable's value.  A word is defined as
 * a sequence of non-whitespace characters delimited by whitespace.
 */
61
inline std::size_t ConfigVariable::get_num_words(void) const;

550 10 __reduce__ 0 4 813 26 ConfigVariable::__reduce__ 0 1 154 0
59
PyObject *ConfigVariable::__reduce__(PyObject *self) const;

551 18 ConfigVariableBool 0 260 814 38 ConfigVariableBool::ConfigVariableBool 0 4 155 156 157 158 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
497
inline explicit ConfigVariableBool::ConfigVariableBool(std::string const &name);
inline explicit ConfigVariableBool::ConfigVariableBool(std::string const &name, bool default_value, std::string const &description = string(), int flags = 0);
inline explicit ConfigVariableBool::ConfigVariableBool(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableBool::ConfigVariableBool(ConfigVariableBool const &) = default;

552 10 operator = 0 4 814 30 ConfigVariableBool::operator = 0 1 159 0
55
inline void ConfigVariableBool::operator =(bool value);

553 22 operator typecast bool 0 132 814 42 ConfigVariableBool::operator typecast bool 0 1 167 0
34
inline operator bool (void) const;

554 4 size 0 4 814 24 ConfigVariableBool::size 0 1 160 62
/**
 * Returns the number of unique words in the variable.
 */
56
inline std::size_t ConfigVariableBool::size(void) const;

555 11 operator [] 0 4 814 31 ConfigVariableBool::operator [] 0 1 161 0
65
inline bool ConfigVariableBool::operator [](std::size_t n) const;

556 9 set_value 0 4 814 29 ConfigVariableBool::set_value 0 1 162 48
/**
 * Reassigns the variable's local value.
 */
54
inline void ConfigVariableBool::set_value(bool value);

557 9 get_value 0 4 814 29 ConfigVariableBool::get_value 0 1 163 40
/**
 * Returns the variable's value.
 */
54
inline bool ConfigVariableBool::get_value(void) const;

558 17 get_default_value 0 4 814 37 ConfigVariableBool::get_default_value 0 1 164 48
/**
 * Returns the variable's default value.
 */
62
inline bool ConfigVariableBool::get_default_value(void) const;

559 8 get_word 0 4 814 28 ConfigVariableBool::get_word 0 1 165 44
/**
 * Returns the variable's nth value.
 */
62
inline bool ConfigVariableBool::get_word(std::size_t n) const;

560 8 set_word 0 4 814 28 ConfigVariableBool::set_word 0 1 166 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
68
inline void ConfigVariableBool::set_word(std::size_t n, bool value);

561 19 ~ConfigVariableBool 0 516 814 39 ConfigVariableBool::~ConfigVariableBool 0 0 0
46
ConfigVariableBool::~ConfigVariableBool(void);

562 20 ConfigVariableDouble 0 260 815 42 ConfigVariableDouble::ConfigVariableDouble 0 4 168 169 170 171 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
517
inline explicit ConfigVariableDouble::ConfigVariableDouble(std::string const &name);
inline explicit ConfigVariableDouble::ConfigVariableDouble(std::string const &name, double default_value, std::string const &description = string(), int flags = 0);
inline explicit ConfigVariableDouble::ConfigVariableDouble(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableDouble::ConfigVariableDouble(ConfigVariableDouble const &) = default;

563 10 operator = 0 4 815 32 ConfigVariableDouble::operator = 0 1 172 0
59
inline void ConfigVariableDouble::operator =(double value);

564 24 operator typecast double 0 132 815 46 ConfigVariableDouble::operator typecast double 0 1 181 0
36
inline operator double (void) const;

565 4 size 0 4 815 26 ConfigVariableDouble::size 0 1 173 62
/**
 * Returns the number of unique words in the variable.
 */
58
inline std::size_t ConfigVariableDouble::size(void) const;

566 11 operator [] 0 4 815 33 ConfigVariableDouble::operator [] 0 1 174 0
69
inline double ConfigVariableDouble::operator [](std::size_t n) const;

567 9 set_value 0 4 815 31 ConfigVariableDouble::set_value 0 1 175 48
/**
 * Reassigns the variable's local value.
 */
58
inline void ConfigVariableDouble::set_value(double value);

568 9 get_value 0 4 815 31 ConfigVariableDouble::get_value 0 1 176 40
/**
 * Returns the variable's value.
 */
58
inline double ConfigVariableDouble::get_value(void) const;

569 17 get_default_value 0 4 815 39 ConfigVariableDouble::get_default_value 0 1 177 48
/**
 * Returns the variable's default value.
 */
66
inline double ConfigVariableDouble::get_default_value(void) const;

570 8 get_word 0 4 815 30 ConfigVariableDouble::get_word 0 1 178 44
/**
 * Returns the variable's nth value.
 */
66
inline double ConfigVariableDouble::get_word(std::size_t n) const;

571 8 set_word 0 4 815 30 ConfigVariableDouble::set_word 0 1 179 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
72
inline void ConfigVariableDouble::set_word(std::size_t n, double value);

572 8 __bool__ 0 4 815 30 ConfigVariableDouble::__bool__ 0 1 180 51
/**
 * Returns true if the variable is not 0.0.
 */
55
inline bool ConfigVariableDouble::__bool__(void) const;

573 21 ~ConfigVariableDouble 0 516 815 43 ConfigVariableDouble::~ConfigVariableDouble 0 0 0
50
ConfigVariableDouble::~ConfigVariableDouble(void);

574 22 ConfigVariableFilename 0 260 817 46 ConfigVariableFilename::ConfigVariableFilename 0 3 182 183 184 22
/**
 *
 */

/**
 *
 */
363
inline explicit ConfigVariableFilename::ConfigVariableFilename(std::string const &name);
inline explicit ConfigVariableFilename::ConfigVariableFilename(std::string const &name, Filename const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableFilename::ConfigVariableFilename(ConfigVariableFilename const &) = default;

575 10 operator = 0 4 817 34 ConfigVariableFilename::operator = 0 1 185 0
70
inline void ConfigVariableFilename::operator =(Filename const &value);

576 17 operator typecast 0 132 817 41 ConfigVariableFilename::operator typecast 0 1 206 0
45
inline operator Filename const &(void) const;

577 5 c_str 0 4 817 29 ConfigVariableFilename::c_str 0 1 186 88
// These methods help the ConfigVariableFilename act like a Filename object.

/**
 *
 */
61
inline char const *ConfigVariableFilename::c_str(void) const;

578 5 empty 0 4 817 29 ConfigVariableFilename::empty 0 1 187 10
/**
 *
 */
54
inline bool ConfigVariableFilename::empty(void) const;

579 6 length 0 4 817 30 ConfigVariableFilename::length 0 1 188 10
/**
 *
 */
62
inline std::size_t ConfigVariableFilename::length(void) const;

580 11 operator [] 0 4 817 35 ConfigVariableFilename::operator [] 0 1 189 0
69
inline char ConfigVariableFilename::operator [](std::size_t n) const;

581 12 get_fullpath 0 4 817 36 ConfigVariableFilename::get_fullpath 0 1 190 183
/**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator, so this function is a
 * little redundant.
 */
68
inline std::string ConfigVariableFilename::get_fullpath(void) const;

582 11 get_dirname 0 4 817 35 ConfigVariableFilename::get_dirname 0 1 191 139
/**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */
67
inline std::string ConfigVariableFilename::get_dirname(void) const;

583 12 get_basename 0 4 817 36 ConfigVariableFilename::get_basename 0 1 192 145
/**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */
68
inline std::string ConfigVariableFilename::get_basename(void) const;

584 25 get_fullpath_wo_extension 0 4 817 49 ConfigVariableFilename::get_fullpath_wo_extension 0 1 193 96
/**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */
81
inline std::string ConfigVariableFilename::get_fullpath_wo_extension(void) const;

585 25 get_basename_wo_extension 0 4 817 49 ConfigVariableFilename::get_basename_wo_extension 0 1 194 81
/**
 * Returns the basename part of the filename, without the file extension.
 */
81
inline std::string ConfigVariableFilename::get_basename_wo_extension(void) const;

586 13 get_extension 0 4 817 37 ConfigVariableFilename::get_extension 0 1 195 140
/**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */
69
inline std::string ConfigVariableFilename::get_extension(void) const;

587 11 operator == 0 4 817 35 ConfigVariableFilename::operator == 0 1 196 34
// Comparison operators are handy.
77
inline bool ConfigVariableFilename::operator ==(Filename const &other) const;

588 11 operator != 0 4 817 35 ConfigVariableFilename::operator != 0 1 197 0
77
inline bool ConfigVariableFilename::operator !=(Filename const &other) const;

589 10 operator < 0 4 817 34 ConfigVariableFilename::operator < 0 1 198 0
76
inline bool ConfigVariableFilename::operator <(Filename const &other) const;

590 9 set_value 0 4 817 33 ConfigVariableFilename::set_value 0 1 199 48
/**
 * Reassigns the variable's local value.
 */
69
inline void ConfigVariableFilename::set_value(Filename const &value);

591 9 get_value 0 4 817 33 ConfigVariableFilename::get_value 0 1 200 40
/**
 * Returns the variable's value.
 */
62
inline Filename ConfigVariableFilename::get_value(void) const;

592 17 get_default_value 0 4 817 41 ConfigVariableFilename::get_default_value 0 1 201 48
/**
 * Returns the variable's default value.
 */
70
inline Filename ConfigVariableFilename::get_default_value(void) const;

593 8 get_word 0 4 817 32 ConfigVariableFilename::get_word 0 1 202 44
/**
 * Returns the variable's nth value.
 */
70
inline Filename ConfigVariableFilename::get_word(std::size_t n) const;

594 8 set_word 0 4 817 32 ConfigVariableFilename::set_word 0 1 203 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
83
inline void ConfigVariableFilename::set_word(std::size_t n, Filename const &value);

595 8 __bool__ 0 4 817 32 ConfigVariableFilename::__bool__ 0 1 204 53
/**
 * Returns true if the variable is not empty.
 */
57
inline bool ConfigVariableFilename::__bool__(void) const;

596 10 __fspath__ 0 4 817 34 ConfigVariableFilename::__fspath__ 0 1 205 145
/**
 * Allows a ConfigVariableFilename object to be passed to any Python function
 * that accepts an os.PathLike object.
 *
 * @since 1.10.13
 */
67
inline std::wstring ConfigVariableFilename::__fspath__(void) const;

597 23 ~ConfigVariableFilename 0 516 817 47 ConfigVariableFilename::~ConfigVariableFilename 0 0 0
54
ConfigVariableFilename::~ConfigVariableFilename(void);

598 17 ConfigVariableInt 0 260 819 36 ConfigVariableInt::ConfigVariableInt 0 4 207 208 209 210 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
487
inline explicit ConfigVariableInt::ConfigVariableInt(std::string const &name);
inline explicit ConfigVariableInt::ConfigVariableInt(std::string const &name, int default_value, std::string const &description = string(), int flags = 0);
inline explicit ConfigVariableInt::ConfigVariableInt(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt::ConfigVariableInt(ConfigVariableInt const &) = default;

599 10 operator = 0 4 819 29 ConfigVariableInt::operator = 0 1 211 0
53
inline void ConfigVariableInt::operator =(int value);

600 21 operator typecast int 0 132 819 40 ConfigVariableInt::operator typecast int 0 1 220 0
33
inline operator int (void) const;

601 4 size 0 4 819 23 ConfigVariableInt::size 0 1 212 62
/**
 * Returns the number of unique words in the variable.
 */
55
inline std::size_t ConfigVariableInt::size(void) const;

602 11 operator [] 0 4 819 30 ConfigVariableInt::operator [] 0 1 213 0
63
inline int ConfigVariableInt::operator [](std::size_t n) const;

603 9 set_value 0 4 819 28 ConfigVariableInt::set_value 0 1 214 48
/**
 * Reassigns the variable's local value.
 */
52
inline void ConfigVariableInt::set_value(int value);

604 9 get_value 0 4 819 28 ConfigVariableInt::get_value 0 1 215 40
/**
 * Returns the variable's value.
 */
52
inline int ConfigVariableInt::get_value(void) const;

605 17 get_default_value 0 4 819 36 ConfigVariableInt::get_default_value 0 1 216 48
/**
 * Returns the variable's default value.
 */
60
inline int ConfigVariableInt::get_default_value(void) const;

606 8 get_word 0 4 819 27 ConfigVariableInt::get_word 0 1 217 44
/**
 * Returns the variable's nth value.
 */
60
inline int ConfigVariableInt::get_word(std::size_t n) const;

607 8 set_word 0 4 819 27 ConfigVariableInt::set_word 0 1 218 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
66
inline void ConfigVariableInt::set_word(std::size_t n, int value);

608 8 __bool__ 0 4 819 27 ConfigVariableInt::__bool__ 0 1 219 49
/**
 * Returns true if the variable is not 0.
 */
52
inline bool ConfigVariableInt::__bool__(void) const;

609 18 ~ConfigVariableInt 0 516 819 37 ConfigVariableInt::~ConfigVariableInt 0 0 0
44
ConfigVariableInt::~ConfigVariableInt(void);

610 19 ConfigVariableInt64 0 260 820 40 ConfigVariableInt64::ConfigVariableInt64 0 4 221 222 223 224 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
509
inline explicit ConfigVariableInt64::ConfigVariableInt64(std::string const &name);
inline explicit ConfigVariableInt64::ConfigVariableInt64(std::string const &name, int64_t default_value, std::string const &description = string(), int flags = 0);
inline explicit ConfigVariableInt64::ConfigVariableInt64(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt64::ConfigVariableInt64(ConfigVariableInt64 const &) = default;

611 10 operator = 0 4 820 31 ConfigVariableInt64::operator = 0 1 225 0
59
inline void ConfigVariableInt64::operator =(int64_t value);

612 25 operator typecast int64_t 0 132 820 46 ConfigVariableInt64::operator typecast int64_t 0 1 234 0
37
inline operator int64_t (void) const;

613 4 size 0 4 820 25 ConfigVariableInt64::size 0 1 226 62
/**
 * Returns the number of unique words in the variable.
 */
57
inline std::size_t ConfigVariableInt64::size(void) const;

614 11 operator [] 0 4 820 32 ConfigVariableInt64::operator [] 0 1 227 0
69
inline int64_t ConfigVariableInt64::operator [](std::size_t n) const;

615 9 set_value 0 4 820 30 ConfigVariableInt64::set_value 0 1 228 48
/**
 * Reassigns the variable's local value.
 */
58
inline void ConfigVariableInt64::set_value(int64_t value);

616 9 get_value 0 4 820 30 ConfigVariableInt64::get_value 0 1 229 40
/**
 * Returns the variable's value.
 */
58
inline int64_t ConfigVariableInt64::get_value(void) const;

617 17 get_default_value 0 4 820 38 ConfigVariableInt64::get_default_value 0 1 230 48
/**
 * Returns the variable's default value.
 */
66
inline int64_t ConfigVariableInt64::get_default_value(void) const;

618 8 get_word 0 4 820 29 ConfigVariableInt64::get_word 0 1 231 44
/**
 * Returns the variable's nth value.
 */
66
inline int64_t ConfigVariableInt64::get_word(std::size_t n) const;

619 8 set_word 0 4 820 29 ConfigVariableInt64::set_word 0 1 232 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
72
inline void ConfigVariableInt64::set_word(std::size_t n, int64_t value);

620 8 __bool__ 0 4 820 29 ConfigVariableInt64::__bool__ 0 1 233 53
/**
 * Returns true if the variable is not empty.
 */
54
inline bool ConfigVariableInt64::__bool__(void) const;

621 20 ~ConfigVariableInt64 0 516 820 41 ConfigVariableInt64::~ConfigVariableInt64 0 0 0
48
ConfigVariableInt64::~ConfigVariableInt64(void);

622 18 ConfigVariableList 0 260 823 38 ConfigVariableList::ConfigVariableList 0 2 235 236 10
/**
 *
 */
223
inline explicit ConfigVariableList::ConfigVariableList(std::string const &name, std::string const &description = string(), int flags = 0);
inline ConfigVariableList::ConfigVariableList(ConfigVariableList const &) = default;

623 19 ~ConfigVariableList 0 516 823 39 ConfigVariableList::~ConfigVariableList 0 0 10
/**
 *
 */
53
inline ConfigVariableList::~ConfigVariableList(void);

624 14 get_num_values 0 4 823 34 ConfigVariableList::get_num_values 0 1 237 56
/**
 * Returns the number of values in the variable.
 */
66
inline std::size_t ConfigVariableList::get_num_values(void) const;

625 16 get_string_value 0 4 823 36 ConfigVariableList::get_string_value 0 1 238 49
/**
 * Returns the nth value of the variable.
 */
77
inline std::string ConfigVariableList::get_string_value(std::size_t n) const;

626 21 get_num_unique_values 0 4 823 41 ConfigVariableList::get_num_unique_values 0 1 239 63
/**
 * Returns the number of unique values in the variable.
 */
73
inline std::size_t ConfigVariableList::get_num_unique_values(void) const;

627 16 get_unique_value 0 4 823 36 ConfigVariableList::get_unique_value 0 1 240 56
/**
 * Returns the nth unique value of the variable.
 */
77
inline std::string ConfigVariableList::get_unique_value(std::size_t n) const;

628 4 size 0 4 823 24 ConfigVariableList::size 0 1 241 63
/**
 * Returns the number of unique values of the variable.
 */
56
inline std::size_t ConfigVariableList::size(void) const;

629 11 operator [] 0 4 823 31 ConfigVariableList::operator [] 0 1 242 0
72
inline std::string ConfigVariableList::operator [](std::size_t n) const;

630 6 output 0 4 823 26 ConfigVariableList::output 0 1 243 10
/**
 *
 */
57
void ConfigVariableList::output(std::ostream &out) const;

631 5 write 0 4 823 25 ConfigVariableList::write 0 1 244 10
/**
 *
 */
56
void ConfigVariableList::write(std::ostream &out) const;

632 24 ConfigVariableSearchPath 0 260 824 50 ConfigVariableSearchPath::ConfigVariableSearchPath 0 3 245 246 247 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
498
inline explicit ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, std::string const &description = string(), int flags = 0);
inline explicit ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, DSearchPath const &default_value, std::string const &description, int flags = 0);
inline explicit ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, std::string const &default_value, std::string const &description, int flags = 0);

633 25 ~ConfigVariableSearchPath 0 516 824 51 ConfigVariableSearchPath::~ConfigVariableSearchPath 0 0 10
/**
 *
 */
65
inline ConfigVariableSearchPath::~ConfigVariableSearchPath(void);

634 29 operator typecast DSearchPath 0 132 824 55 ConfigVariableSearchPath::operator typecast DSearchPath 0 1 265 0
41
inline operator DSearchPath (void) const;

635 9 get_value 0 4 824 35 ConfigVariableSearchPath::get_value 0 1 248 10
/**
 *
 */
67
inline DSearchPath ConfigVariableSearchPath::get_value(void) const;

636 17 get_default_value 0 4 824 43 ConfigVariableSearchPath::get_default_value 0 1 249 10
/**
 *
 */
82
inline DSearchPath const &ConfigVariableSearchPath::get_default_value(void) const;

637 17 clear_local_value 0 4 824 43 ConfigVariableSearchPath::clear_local_value 0 1 250 113
/**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */
62
inline bool ConfigVariableSearchPath::clear_local_value(void);

638 5 clear 0 4 824 31 ConfigVariableSearchPath::clear 0 1 251 113
/**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */
50
inline void ConfigVariableSearchPath::clear(void);

639 16 append_directory 0 4 824 42 ConfigVariableSearchPath::append_directory 0 1 252 62
/**
 * Adds a new directory to the end of the search list.
 */
82
inline void ConfigVariableSearchPath::append_directory(Filename const &directory);

640 17 prepend_directory 0 4 824 43 ConfigVariableSearchPath::prepend_directory 0 1 253 64
/**
 * Adds a new directory to the front of the search list.
 */
83
inline void ConfigVariableSearchPath::prepend_directory(Filename const &directory);

641 11 append_path 0 4 824 37 ConfigVariableSearchPath::append_path 0 2 254 255 198
/**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */

/**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */
192
inline void ConfigVariableSearchPath::append_path(std::string const &path, std::string const &separator = string());
inline void ConfigVariableSearchPath::append_path(DSearchPath const &path);

642 12 prepend_path 0 4 824 38 ConfigVariableSearchPath::prepend_path 0 1 256 104
/**
 * Adds all of the directories listed in the search path to the beginning of
 * the search list.
 */
76
inline void ConfigVariableSearchPath::prepend_path(DSearchPath const &path);

643 8 is_empty 0 4 824 34 ConfigVariableSearchPath::is_empty 0 1 257 69
/**
 * Returns true if the search list is empty, false otherwise.
 */
59
inline bool ConfigVariableSearchPath::is_empty(void) const;

644 19 get_num_directories 0 4 824 45 ConfigVariableSearchPath::get_num_directories 0 1 258 64
/**
 * Returns the number of directories on the search list.
 */
77
inline std::size_t ConfigVariableSearchPath::get_num_directories(void) const;

645 13 get_directory 0 4 824 39 ConfigVariableSearchPath::get_directory 0 1 259 56
/**
 * Returns the nth directory on the search list.
 */
77
inline Filename ConfigVariableSearchPath::get_directory(std::size_t n) const;

646 9 find_file 0 4 824 35 ConfigVariableSearchPath::find_file 0 1 260 197
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Returns the full matching pathname of the first match if found, or
 * the empty string if not found.
 */
84
inline Filename ConfigVariableSearchPath::find_file(Filename const &filename) const;

647 14 find_all_files 0 4 824 40 ConfigVariableSearchPath::find_all_files 0 2 261 262 549
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */

/**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */
225
inline std::size_t ConfigVariableSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results ConfigVariableSearchPath::find_all_files(Filename const &filename) const;

648 6 output 0 4 824 32 ConfigVariableSearchPath::output 0 1 263 10
/**
 *
 */
70
inline void ConfigVariableSearchPath::output(std::ostream &out) const;

649 5 write 0 4 824 31 ConfigVariableSearchPath::write 0 1 264 10
/**
 *
 */
69
inline void ConfigVariableSearchPath::write(std::ostream &out) const;

650 20 ConfigVariableString 0 260 826 42 ConfigVariableString::ConfigVariableString 0 3 266 267 268 22
/**
 *
 */

/**
 *
 */
352
inline explicit ConfigVariableString::ConfigVariableString(std::string const &name);
inline explicit ConfigVariableString::ConfigVariableString(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableString::ConfigVariableString(ConfigVariableString const &) = default;

651 10 operator = 0 4 826 32 ConfigVariableString::operator = 0 1 269 0
71
inline void ConfigVariableString::operator =(std::string const &value);

652 17 operator typecast 0 132 826 39 ConfigVariableString::operator typecast 0 1 283 0
48
inline operator std::string const &(void) const;

653 5 c_str 0 4 826 27 ConfigVariableString::c_str 0 1 270 88
// These methods help the ConfigVariableString act like a C++ string object.

/**
 *
 */
59
inline char const *ConfigVariableString::c_str(void) const;

654 5 empty 0 4 826 27 ConfigVariableString::empty 0 1 271 10
/**
 *
 */
52
inline bool ConfigVariableString::empty(void) const;

655 6 length 0 4 826 28 ConfigVariableString::length 0 1 272 10
/**
 *
 */
60
inline std::size_t ConfigVariableString::length(void) const;

656 11 operator [] 0 4 826 33 ConfigVariableString::operator [] 0 1 273 0
67
inline char ConfigVariableString::operator [](std::size_t n) const;

657 11 operator == 0 4 826 33 ConfigVariableString::operator == 0 1 274 34
// Comparison operators are handy.
78
inline bool ConfigVariableString::operator ==(std::string const &other) const;

658 11 operator != 0 4 826 33 ConfigVariableString::operator != 0 1 275 0
78
inline bool ConfigVariableString::operator !=(std::string const &other) const;

659 10 operator < 0 4 826 32 ConfigVariableString::operator < 0 1 276 0
77
inline bool ConfigVariableString::operator <(std::string const &other) const;

660 9 set_value 0 4 826 31 ConfigVariableString::set_value 0 1 277 48
/**
 * Reassigns the variable's local value.
 */
70
inline void ConfigVariableString::set_value(std::string const &value);

661 9 get_value 0 4 826 31 ConfigVariableString::get_value 0 1 278 40
/**
 * Returns the variable's value.
 */
70
inline std::string const &ConfigVariableString::get_value(void) const;

662 17 get_default_value 0 4 826 39 ConfigVariableString::get_default_value 0 1 279 48
/**
 * Returns the variable's default value.
 */
71
inline std::string ConfigVariableString::get_default_value(void) const;

663 8 get_word 0 4 826 30 ConfigVariableString::get_word 0 1 280 44
/**
 * Returns the variable's nth value.
 */
71
inline std::string ConfigVariableString::get_word(std::size_t n) const;

664 8 set_word 0 4 826 30 ConfigVariableString::set_word 0 1 281 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
84
inline void ConfigVariableString::set_word(std::size_t n, std::string const &value);

665 8 __bool__ 0 4 826 30 ConfigVariableString::__bool__ 0 1 282 53
/**
 * Returns true if the variable is not empty.
 */
55
inline bool ConfigVariableString::__bool__(void) const;

666 21 ~ConfigVariableString 0 516 826 43 ConfigVariableString::~ConfigVariableString 0 0 0
50
ConfigVariableString::~ConfigVariableString(void);

667 20 upcast_to_MemoryBase 0 12 827 36 NotifyCategory::upcast_to_MemoryBase 0 1 306 40
upcast from NotifyCategory to MemoryBase
55
MemoryBase *NotifyCategory::upcast_to_MemoryBase(void);

668 26 downcast_to_NotifyCategory 0 12 804 38 MemoryBase::downcast_to_NotifyCategory 0 0 42
downcast from MemoryBase to NotifyCategory
61
NotifyCategory *MemoryBase::downcast_to_NotifyCategory(void);

669 21 upcast_to_ConfigFlags 0 12 827 37 NotifyCategory::upcast_to_ConfigFlags 0 1 307 41
upcast from NotifyCategory to ConfigFlags
57
ConfigFlags *NotifyCategory::upcast_to_ConfigFlags(void);

670 26 downcast_to_NotifyCategory 0 12 790 39 ConfigFlags::downcast_to_NotifyCategory 0 0 43
downcast from ConfigFlags to NotifyCategory
62
NotifyCategory *ConfigFlags::downcast_to_NotifyCategory(void);

671 12 get_fullname 0 4 827 28 NotifyCategory::get_fullname 0 1 285 10
/**
 *
 */
60
inline std::string NotifyCategory::get_fullname(void) const;

672 12 get_basename 0 4 827 28 NotifyCategory::get_basename 0 1 286 10
/**
 *
 */
60
inline std::string NotifyCategory::get_basename(void) const;

673 12 get_severity 0 4 827 28 NotifyCategory::get_severity 0 1 287 10
/**
 *
 */
63
inline NotifySeverity NotifyCategory::get_severity(void) const;

674 12 set_severity 0 4 827 28 NotifyCategory::set_severity 0 1 288 150
/**
 * Sets the severity level of messages that will be reported from this
 * Category.  This allows any message of this severity level or higher.
 */
66
inline void NotifyCategory::set_severity(NotifySeverity severity);

675 5 is_on 0 4 827 21 NotifyCategory::is_on 0 1 289 110
/**
 * Returns true if messages of the indicated severity level ought to be
 * reported for this Category.
 */
65
inline bool NotifyCategory::is_on(NotifySeverity severity) const;

676 7 is_spam 0 4 827 23 NotifyCategory::is_spam 0 1 290 446
// When NOTIFY_DEBUG is not defined, the categories will never be set to
// "spam" or "debug" severities, and these methods are redefined to be
// static to make it more obvious to the compiler.  However, we still want
// to present a consistent interface to our scripting language, so during
// the interrogate pass (that is, when CPPPARSER is defined), we still
// pretend they're nonstatic.

/**
 * A shorthand way to write is_on(NS_spam).
 */
48
inline bool NotifyCategory::is_spam(void) const;

677 8 is_debug 0 4 827 24 NotifyCategory::is_debug 0 1 291 52
/**
 * A shorthand way to write is_on(NS_debug).
 */
49
inline bool NotifyCategory::is_debug(void) const;

678 7 is_info 0 4 827 23 NotifyCategory::is_info 0 1 292 51
/**
 * A shorthand way to write is_on(NS_info).
 */
48
inline bool NotifyCategory::is_info(void) const;

679 10 is_warning 0 4 827 26 NotifyCategory::is_warning 0 1 293 54
/**
 * A shorthand way to write is_on(NS_warning).
 */
51
inline bool NotifyCategory::is_warning(void) const;

680 8 is_error 0 4 827 24 NotifyCategory::is_error 0 1 294 52
/**
 * A shorthand way to write is_on(NS_error).
 */
49
inline bool NotifyCategory::is_error(void) const;

681 8 is_fatal 0 4 827 24 NotifyCategory::is_fatal 0 1 295 52
/**
 * A shorthand way to write is_on(NS_fatal).
 */
49
inline bool NotifyCategory::is_fatal(void) const;

682 3 out 0 4 827 19 NotifyCategory::out 0 1 296 277
/**
 * Begins a new message to this Category at the indicated severity level.  If
 * the indicated severity level is enabled, this writes a prefixing string to
 * the Notify::out() stream and returns that.  If the severity level is
 * disabled, this returns Notify::null().
 */
85
std::ostream &NotifyCategory::out(NotifySeverity severity, bool prefix = true) const;

683 4 spam 0 4 827 20 NotifyCategory::spam 0 1 297 49
/**
 * A shorthand way to write out(NS_spam).
 */
68
inline std::ostream &NotifyCategory::spam(bool prefix = true) const;

684 5 debug 0 4 827 21 NotifyCategory::debug 0 1 298 50
/**
 * A shorthand way to write out(NS_debug).
 */
69
inline std::ostream &NotifyCategory::debug(bool prefix = true) const;

685 4 info 0 4 827 20 NotifyCategory::info 0 1 299 49
/**
 * A shorthand way to write out(NS_info).
 */
68
inline std::ostream &NotifyCategory::info(bool prefix = true) const;

686 7 warning 0 4 827 23 NotifyCategory::warning 0 1 300 52
/**
 * A shorthand way to write out(NS_warning).
 */
71
inline std::ostream &NotifyCategory::warning(bool prefix = true) const;

687 5 error 0 4 827 21 NotifyCategory::error 0 1 301 50
/**
 * A shorthand way to write out(NS_error).
 */
69
inline std::ostream &NotifyCategory::error(bool prefix = true) const;

688 5 fatal 0 4 827 21 NotifyCategory::fatal 0 1 302 50
/**
 * A shorthand way to write out(NS_fatal).
 */
69
inline std::ostream &NotifyCategory::fatal(bool prefix = true) const;

689 16 get_num_children 0 4 827 32 NotifyCategory::get_num_children 0 1 303 78
/**
 * Returns the number of child Categories of this particular Category.
 */
57
std::size_t NotifyCategory::get_num_children(void) const;

690 9 get_child 0 4 827 25 NotifyCategory::get_child 0 1 304 70
/**
 * Returns the nth child Category of this particular Category.
 */
63
NotifyCategory *NotifyCategory::get_child(std::size_t i) const;

691 16 set_server_delta 0 4 827 32 NotifyCategory::set_server_delta 0 1 305 207
/**
 * Sets a global delta (in seconds) between the local time and the server's
 * time, for the purpose of synchronizing the time stamps in the log messages
 * of the client with that of a known server.
 */
61
static void NotifyCategory::set_server_delta(long int delta);

692 14 NotifyCategory 0 260 827 30 NotifyCategory::NotifyCategory 0 1 284 10
/**
 *
 */
72
inline NotifyCategory::NotifyCategory(NotifyCategory const &) = default;

693 15 ~NotifyCategory 0 516 827 31 NotifyCategory::~NotifyCategory 0 0 0
38
NotifyCategory::~NotifyCategory(void);

694 14 IDecryptStream 0 260 829 30 IDecryptStream::IDecryptStream 0 2 308 309 22
/**
 *
 */

/**
 *
 */
161
inline IDecryptStream::IDecryptStream(void);
inline explicit IDecryptStream::IDecryptStream(std::istream *source, bool owns_source, std::string const &password);

695 4 open 0 4 829 20 IDecryptStream::open 0 1 310 10
/**
 *
 */
113
inline IDecryptStream &IDecryptStream::open(std::istream *source, bool owns_source, std::string const &password);

696 5 close 0 4 829 21 IDecryptStream::close 0 1 311 124
/**
 * Resets the EncryptStream to empty, but does not actually close the source
 * istream unless owns_source was true.
 */
51
inline IDecryptStream &IDecryptStream::close(void);

697 13 get_algorithm 0 4 829 29 IDecryptStream::get_algorithm 0 1 312 74
/**
 * Returns the encryption algorithm that was read from the stream.
 */
68
inline std::string const &IDecryptStream::get_algorithm(void) const;

698 14 get_key_length 0 4 829 30 IDecryptStream::get_key_length 0 1 313 85
/**
 * Returns the encryption key length, in bits, that was read from the stream.
 */
54
inline int IDecryptStream::get_key_length(void) const;

699 19 get_iteration_count 0 4 829 35 IDecryptStream::get_iteration_count 0 1 314 63
/**
 * Returns the value that was was read from the stream.
 */
59
inline int IDecryptStream::get_iteration_count(void) const;

700 15 ~IDecryptStream 0 516 829 31 IDecryptStream::~IDecryptStream 0 0 0
38
IDecryptStream::~IDecryptStream(void);

701 14 OEncryptStream 0 260 831 30 OEncryptStream::OEncryptStream 0 2 315 316 22
/**
 *
 */

/**
 *
 */
157
inline OEncryptStream::OEncryptStream(void);
inline explicit OEncryptStream::OEncryptStream(std::ostream *dest, bool owns_dest, std::string const &password);

702 4 open 0 4 831 20 OEncryptStream::open 0 1 317 10
/**
 *
 */
109
inline OEncryptStream &OEncryptStream::open(std::ostream *dest, bool owns_dest, std::string const &password);

703 5 close 0 4 831 21 OEncryptStream::close 0 1 318 120
/**
 * Resets the EncryptStream to empty, but does not actually close the dest
 * ostream unless owns_dest was true.
 */
51
inline OEncryptStream &OEncryptStream::close(void);

704 13 set_algorithm 0 4 831 29 OEncryptStream::set_algorithm 0 1 319 383
/**
 * Specifies the encryption algorithm that should be used for future calls to
 * open().  The default is whatever is specified by the encryption-algorithm
 * config variable.  The complete set of available algorithms is defined by
 * the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but open() will fail.
 */
72
inline void OEncryptStream::set_algorithm(std::string const &algorithm);

705 14 set_key_length 0 4 831 30 OEncryptStream::set_key_length 0 1 320 347
/**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to open().  The default is whatever is specified
 * by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but open() will fail.
 */
59
inline void OEncryptStream::set_key_length(int key_length);

706 19 set_iteration_count 0 4 831 35 OEncryptStream::set_iteration_count 0 1 321 495
/**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to open().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the encryption-iteration-count
 * config variable.
 */
69
inline void OEncryptStream::set_iteration_count(int iteration_count);

707 13 get_algorithm 0 4 831 29 OEncryptStream::get_algorithm 0 0 74
/**
 * Returns the encryption algorithm that was read from the stream.
 */
68
inline std::string const &OEncryptStream::get_algorithm(void) const;

708 14 get_key_length 0 4 831 30 OEncryptStream::get_key_length 0 0 85
/**
 * Returns the encryption key length, in bits, that was read from the stream.
 */
54
inline int OEncryptStream::get_key_length(void) const;

709 19 get_iteration_count 0 4 831 35 OEncryptStream::get_iteration_count 0 0 63
/**
 * Returns the value that was was read from the stream.
 */
59
inline int OEncryptStream::get_iteration_count(void) const;

710 15 ~OEncryptStream 0 516 831 31 OEncryptStream::~OEncryptStream 0 0 0
38
OEncryptStream::~OEncryptStream(void);

711 12 StreamReader 0 260 833 26 StreamReader::StreamReader 0 2 322 323 254
/**
 *
 */

/**
 * If owns_stream is true, the stream pointer will be deleted when the
 * StreamReader destructs.
 */

/**
 * The copy constructor does not copy ownership of the stream.
 */

/**
 * The move constructor steals ownership of the stream.
 */
140
inline explicit StreamReader::StreamReader(std::istream *in, bool owns_stream);
inline StreamReader::StreamReader(StreamReader const &copy);

712 10 operator = 0 4 833 24 StreamReader::operator = 0 1 324 0
63
inline void StreamReader::operator =(StreamReader const &copy);

713 13 ~StreamReader 0 516 833 27 StreamReader::~StreamReader 0 0 10
/**
 *
 */
41
inline StreamReader::~StreamReader(void);

714 11 get_istream 0 4 833 25 StreamReader::get_istream 0 1 325 37
/**
 * Returns the stream in use.
 */
59
inline std::istream *StreamReader::get_istream(void) const;

715 8 get_bool 0 4 833 22 StreamReader::get_bool 0 1 326 36
/**
 * Extracts a boolean value.
 */
41
inline bool StreamReader::get_bool(void);

716 8 get_int8 0 4 833 22 StreamReader::get_int8 0 1 327 43
/**
 * Extracts a signed 8-bit integer.
 */
43
inline int8_t StreamReader::get_int8(void);

717 9 get_uint8 0 4 833 23 StreamReader::get_uint8 0 1 328 46
/**
 * Extracts an unsigned 8-bit integer.
 */
45
inline uint8_t StreamReader::get_uint8(void);

718 9 get_int16 0 4 833 23 StreamReader::get_int16 0 1 329 44
/**
 * Extracts a signed 16-bit integer.
 */
45
inline int16_t StreamReader::get_int16(void);

719 9 get_int32 0 4 833 23 StreamReader::get_int32 0 1 330 44
/**
 * Extracts a signed 32-bit integer.
 */
45
inline int32_t StreamReader::get_int32(void);

720 9 get_int64 0 4 833 23 StreamReader::get_int64 0 1 331 44
/**
 * Extracts a signed 64-bit integer.
 */
45
inline int64_t StreamReader::get_int64(void);

721 10 get_uint16 0 4 833 24 StreamReader::get_uint16 0 1 332 47
/**
 * Extracts an unsigned 16-bit integer.
 */
47
inline uint16_t StreamReader::get_uint16(void);

722 10 get_uint32 0 4 833 24 StreamReader::get_uint32 0 1 333 47
/**
 * Extracts an unsigned 32-bit integer.
 */
47
inline uint32_t StreamReader::get_uint32(void);

723 10 get_uint64 0 4 833 24 StreamReader::get_uint64 0 1 334 47
/**
 * Extracts an unsigned 64-bit integer.
 */
47
inline uint64_t StreamReader::get_uint64(void);

724 11 get_float32 0 4 833 25 StreamReader::get_float32 0 1 335 186
/**
 * Extracts a 32-bit single-precision floating-point number.  Since this kind
 * of float is not necessarily portable across different architectures,
 * special care is required.
 */
45
inline float StreamReader::get_float32(void);

725 11 get_float64 0 4 833 25 StreamReader::get_float64 0 1 336 51
/**
 * Extracts a 64-bit floating-point number.
 */
50
inline PN_float64 StreamReader::get_float64(void);

726 12 get_be_int16 0 4 833 26 StreamReader::get_be_int16 0 1 337 55
/**
 * Extracts a signed big-endian 16-bit integer.
 */
48
inline int16_t StreamReader::get_be_int16(void);

727 12 get_be_int32 0 4 833 26 StreamReader::get_be_int32 0 1 338 55
/**
 * Extracts a signed big-endian 32-bit integer.
 */
48
inline int32_t StreamReader::get_be_int32(void);

728 12 get_be_int64 0 4 833 26 StreamReader::get_be_int64 0 1 339 55
/**
 * Extracts a signed big-endian 64-bit integer.
 */
48
inline int64_t StreamReader::get_be_int64(void);

729 13 get_be_uint16 0 4 833 27 StreamReader::get_be_uint16 0 1 340 58
/**
 * Extracts an unsigned big-endian 16-bit integer.
 */
50
inline uint16_t StreamReader::get_be_uint16(void);

730 13 get_be_uint32 0 4 833 27 StreamReader::get_be_uint32 0 1 341 58
/**
 * Extracts an unsigned big-endian 32-bit integer.
 */
50
inline uint32_t StreamReader::get_be_uint32(void);

731 13 get_be_uint64 0 4 833 27 StreamReader::get_be_uint64 0 1 342 58
/**
 * Extracts an unsigned big-endian 64-bit integer.
 */
50
inline uint64_t StreamReader::get_be_uint64(void);

732 14 get_be_float32 0 4 833 28 StreamReader::get_be_float32 0 1 343 197
/**
 * Extracts a 32-bit single-precision big-endian floating-point number.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
48
inline float StreamReader::get_be_float32(void);

733 14 get_be_float64 0 4 833 28 StreamReader::get_be_float64 0 1 344 62
/**
 * Extracts a 64-bit big-endian floating-point number.
 */
53
inline PN_float64 StreamReader::get_be_float64(void);

734 10 get_string 0 4 833 24 StreamReader::get_string 0 1 345 45
/**
 * Extracts a variable-length string.
 */
43
std::string StreamReader::get_string(void);

735 12 get_string32 0 4 833 26 StreamReader::get_string32 0 1 346 72
/**
 * Extracts a variable-length string with a 32-bit length field.
 */
45
std::string StreamReader::get_string32(void);

736 12 get_z_string 0 4 833 26 StreamReader::get_z_string 0 1 347 74
/**
 * Extracts a variable-length string, as a NULL-terminated string.
 */
45
std::string StreamReader::get_z_string(void);

737 16 get_fixed_string 0 4 833 30 StreamReader::get_fixed_string 0 1 348 128
/**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */
61
std::string StreamReader::get_fixed_string(std::size_t size);

738 10 skip_bytes 0 4 833 24 StreamReader::skip_bytes 0 1 349 66
/**
 * Skips over the indicated number of bytes in the stream.
 */
48
void StreamReader::skip_bytes(std::size_t size);

739 13 extract_bytes 0 4 833 27 StreamReader::extract_bytes 0 1 350 380
/**
 * Extracts the indicated number of bytes in the stream into the given
 * character buffer.  Assumes that the buffer is big enough to hold the
 * requested number of bytes.  Returns the number of bytes that were
 * successfully written.
 */

/**
 * Extracts the indicated number of bytes in the stream and returns them as a
 * string.  Returns empty string at end-of-file.
 */
136
std::size_t StreamReader::extract_bytes(unsigned char *into, std::size_t size);
PyObject *StreamReader::extract_bytes(std::size_t size);

740 8 readline 0 4 833 22 StreamReader::readline 0 1 351 303
/**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's File.readline() function.
 */
39
PyObject *StreamReader::readline(void);

741 9 readlines 0 4 833 23 StreamReader::readlines 0 1 352 0
40
PyObject *StreamReader::readlines(void);

742 12 StreamWriter 0 260 835 26 StreamWriter::StreamWriter 0 2 353 354 159
/**
 *
 */

/**
 *
 */

/**
 * The copy constructor does not copy ownership of the stream.
 */

/**
 * The move constructor steals ownership of the stream.
 */
141
inline explicit StreamWriter::StreamWriter(std::ostream *out, bool owns_stream);
inline StreamWriter::StreamWriter(StreamWriter const &copy);

743 10 operator = 0 4 835 24 StreamWriter::operator = 0 1 355 0
63
inline void StreamWriter::operator =(StreamWriter const &copy);

744 13 ~StreamWriter 0 516 835 27 StreamWriter::~StreamWriter 0 0 10
/**
 *
 */
41
inline StreamWriter::~StreamWriter(void);

745 11 get_ostream 0 4 835 25 StreamWriter::get_ostream 0 1 356 37
/**
 * Returns the stream in use.
 */
59
inline std::ostream *StreamWriter::get_ostream(void) const;

746 8 add_bool 0 4 835 22 StreamWriter::add_bool 0 1 357 46
/**
 * Adds a boolean value to the stream.
 */
47
inline void StreamWriter::add_bool(bool value);

747 8 add_int8 0 4 835 22 StreamWriter::add_int8 0 1 358 53
/**
 * Adds a signed 8-bit integer to the stream.
 */
49
inline void StreamWriter::add_int8(int8_t value);

748 9 add_uint8 0 4 835 23 StreamWriter::add_uint8 0 1 359 56
/**
 * Adds an unsigned 8-bit integer to the stream.
 */
51
inline void StreamWriter::add_uint8(uint8_t value);

749 9 add_int16 0 4 835 23 StreamWriter::add_int16 0 1 360 104
// The default numeric packing is little-endian.

/**
 * Adds a signed 16-bit integer to the stream.
 */
51
inline void StreamWriter::add_int16(int16_t value);

750 9 add_int32 0 4 835 23 StreamWriter::add_int32 0 1 361 54
/**
 * Adds a signed 32-bit integer to the stream.
 */
51
inline void StreamWriter::add_int32(int32_t value);

751 9 add_int64 0 4 835 23 StreamWriter::add_int64 0 1 362 54
/**
 * Adds a signed 64-bit integer to the stream.
 */
51
inline void StreamWriter::add_int64(int64_t value);

752 10 add_uint16 0 4 835 24 StreamWriter::add_uint16 0 1 363 57
/**
 * Adds an unsigned 16-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint16(uint16_t value);

753 10 add_uint32 0 4 835 24 StreamWriter::add_uint32 0 1 364 57
/**
 * Adds an unsigned 32-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint32(uint32_t value);

754 10 add_uint64 0 4 835 24 StreamWriter::add_uint64 0 1 365 57
/**
 * Adds an unsigned 64-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint64(uint64_t value);

755 11 add_float32 0 4 835 25 StreamWriter::add_float32 0 1 366 196
/**
 * Adds a 32-bit single-precision floating-point number to the stream.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
51
inline void StreamWriter::add_float32(float value);

756 11 add_float64 0 4 835 25 StreamWriter::add_float64 0 1 367 61
/**
 * Adds a 64-bit floating-point number to the stream.
 */
56
inline void StreamWriter::add_float64(PN_float64 value);

757 12 add_be_int16 0 4 835 26 StreamWriter::add_be_int16 0 1 368 140
// These functions pack numbers big-endian, in case that's desired.

/**
 * Adds a signed 16-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int16(int16_t value);

758 12 add_be_int32 0 4 835 26 StreamWriter::add_be_int32 0 1 369 71
/**
 * Adds a signed 32-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int32(int32_t value);

759 12 add_be_int64 0 4 835 26 StreamWriter::add_be_int64 0 1 370 71
/**
 * Adds a signed 64-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int64(int64_t value);

760 13 add_be_uint16 0 4 835 27 StreamWriter::add_be_uint16 0 1 371 74
/**
 * Adds an unsigned 16-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint16(uint16_t value);

761 13 add_be_uint32 0 4 835 27 StreamWriter::add_be_uint32 0 1 372 74
/**
 * Adds an unsigned 32-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint32(uint32_t value);

762 13 add_be_uint64 0 4 835 27 StreamWriter::add_be_uint64 0 1 373 74
/**
 * Adds an unsigned 64-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint64(uint64_t value);

763 14 add_be_float32 0 4 835 28 StreamWriter::add_be_float32 0 1 374 207
/**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * stream.  Since this kind of float is not necessarily portable across
 * different architectures, special care is required.
 */
54
inline void StreamWriter::add_be_float32(float value);

764 14 add_be_float64 0 4 835 28 StreamWriter::add_be_float64 0 1 375 78
/**
 * Adds a 64-bit big-endian floating-point number to the streamWriter.
 */
59
inline void StreamWriter::add_be_float64(PN_float64 value);

765 10 add_string 0 4 835 24 StreamWriter::add_string 0 1 376 107
/**
 * Adds a variable-length string to the stream.  This actually adds a count
 * followed by n bytes.
 */
61
inline void StreamWriter::add_string(std::string const &str);

766 12 add_string32 0 4 835 26 StreamWriter::add_string32 0 1 377 84
/**
 * Adds a variable-length string to the stream, using a 32-bit length field.
 */
63
inline void StreamWriter::add_string32(std::string const &str);

767 12 add_z_string 0 4 835 26 StreamWriter::add_z_string 0 1 378 84
/**
 * Adds a variable-length string to the stream, as a NULL-terminated string.
 */
56
inline void StreamWriter::add_z_string(std::string str);

768 16 add_fixed_string 0 4 835 30 StreamWriter::add_fixed_string 0 1 379 236
/**
 * Adds a fixed-length string to the stream.  If the string given is less than
 * the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */
85
inline void StreamWriter::add_fixed_string(std::string const &str, std::size_t size);

769 9 pad_bytes 0 4 835 23 StreamWriter::pad_bytes 0 1 380 65
/**
 * Adds the indicated number of zero bytes to the stream.
 */
47
void StreamWriter::pad_bytes(std::size_t size);

770 11 append_data 0 4 835 25 StreamWriter::append_data 0 1 381 140
/**
 * Appends some more raw data to the end of the streamWriter.
 */

/**
 * Appends some more raw data to the end of the streamWriter.
 */
47
void StreamWriter::append_data(PyObject *data);

771 5 flush 0 4 835 19 StreamWriter::flush 0 1 382 50
/**
 * Calls flush() on the underlying stream.
 */
38
inline void StreamWriter::flush(void);

772 5 write 0 4 835 19 StreamWriter::write 0 1 383 132
/**
 * A synonym of append_data().  This is useful when assigning the StreamWriter
 * to sys.stderr and/or sys.stdout in Python.
 */
56
inline void StreamWriter::write(std::string const &str);

773 7 acquire 0 4 837 26 StreamWrapperBase::acquire 0 1 384 572
/**
 * Acquires the internal lock.
 *
 * User code should call this to take temporary possession of the stream and
 * perform direct I/O operations on it, for instance to make several
 * sequential atomic reads.  You may not call any of the StreamWrapper methods
 * while the lock is held, other than release().
 *
 * Use with extreme caution!  This is a very low-level, non-recursive lock.
 * You must call acquire() only once, and you must later call release()
 * exactly once.  Failing to do so may result in a hard deadlock with no
 * available debugging features.
 */
45
inline void StreamWrapperBase::acquire(void);

774 7 release 0 4 837 26 StreamWrapperBase::release 0 1 385 135
/**
 * Releases the internal lock.  Must be called exactly once following a call
 * to acquire().  See the cautions with acquire().
 */
45
inline void StreamWrapperBase::release(void);

775 27 upcast_to_StreamWrapperBase 0 12 838 43 IStreamWrapper::upcast_to_StreamWrapperBase 0 1 388 47
upcast from IStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *IStreamWrapper::upcast_to_StreamWrapperBase(void);

776 14 IStreamWrapper 0 260 838 30 IStreamWrapper::IStreamWrapper 0 1 386 22
/**
 *
 */

/**
 *
 */
69
inline explicit IStreamWrapper::IStreamWrapper(std::istream &stream);

777 15 ~IStreamWrapper 0 518 838 31 IStreamWrapper::~IStreamWrapper 0 0 10
/**
 *
 */
46
virtual IStreamWrapper::~IStreamWrapper(void);

778 11 get_istream 0 4 838 27 IStreamWrapper::get_istream 0 1 387 55
/**
 * Returns the istream this object is wrapping.
 */
61
inline std::istream *IStreamWrapper::get_istream(void) const;

779 27 upcast_to_StreamWrapperBase 0 12 839 43 OStreamWrapper::upcast_to_StreamWrapperBase 0 1 391 47
upcast from OStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *OStreamWrapper::upcast_to_StreamWrapperBase(void);

780 14 OStreamWrapper 0 260 839 30 OStreamWrapper::OStreamWrapper 0 1 389 22
/**
 *
 */

/**
 *
 */
69
inline explicit OStreamWrapper::OStreamWrapper(std::ostream &stream);

781 15 ~OStreamWrapper 0 518 839 31 OStreamWrapper::~OStreamWrapper 0 0 10
/**
 *
 */
46
virtual OStreamWrapper::~OStreamWrapper(void);

782 11 get_ostream 0 4 839 27 OStreamWrapper::get_ostream 0 1 390 55
/**
 * Returns the ostream this object is wrapping.
 */
61
inline std::ostream *OStreamWrapper::get_ostream(void) const;

783 24 upcast_to_IStreamWrapper 0 12 840 39 StreamWrapper::upcast_to_IStreamWrapper 0 1 394 43
upcast from StreamWrapper to IStreamWrapper
62
IStreamWrapper *StreamWrapper::upcast_to_IStreamWrapper(void);

784 25 downcast_to_StreamWrapper 0 12 838 41 IStreamWrapper::downcast_to_StreamWrapper 0 0 45
downcast from IStreamWrapper to StreamWrapper
63
StreamWrapper *IStreamWrapper::downcast_to_StreamWrapper(void);

785 24 upcast_to_OStreamWrapper 0 12 840 39 StreamWrapper::upcast_to_OStreamWrapper 0 1 395 43
upcast from StreamWrapper to OStreamWrapper
62
OStreamWrapper *StreamWrapper::upcast_to_OStreamWrapper(void);

786 25 downcast_to_StreamWrapper 0 12 839 41 OStreamWrapper::downcast_to_StreamWrapper 0 0 45
downcast from OStreamWrapper to StreamWrapper
63
StreamWrapper *OStreamWrapper::downcast_to_StreamWrapper(void);

787 13 StreamWrapper 0 260 840 28 StreamWrapper::StreamWrapper 0 1 392 22
/**
 *
 */

/**
 *
 */
68
inline explicit StreamWrapper::StreamWrapper(std::iostream &stream);

788 14 ~StreamWrapper 0 518 840 29 StreamWrapper::~StreamWrapper 0 0 10
/**
 *
 */
44
virtual StreamWrapper::~StreamWrapper(void);

789 12 get_iostream 0 4 840 27 StreamWrapper::get_iostream 0 1 393 56
/**
 * Returns the iostream this object is wrapping.
 */
62
inline std::iostream *StreamWrapper::get_iostream(void) const;

395
1 0 0 7 4 843 397 0 0 0 
2 0 0 15 4 843 397 0 0 1 6 param0 0 844  
3 0 0 6 7 801 0 0 136 /**
 * Returns a pointer to the global "default page".  This is the ConfigPage
 * that lists all variables' original default values.
 */ 0 
4 0 0 6 8 801 0 0 191 /**
 * Returns a pointer to the global "local page".  This is the ConfigPage that
 * lists the locally-assigned values for any variables in the world that have
 * such a local assignment.
 */ 0 
5 0 0 6 9 848 0 0 115 /**
 * Returns the name of the page.  If the page was loaded from a .prc file,
 * this is usually the filename.
 */ 1 4 this 3 846  
6 0 0 6 14 797 0 0 248 /**
 * Returns true if this is the special "default" or "local" page, or false if
 * it is an ordinary page, e.g.  an implicit page loaded from a prc file at
 * startup, or an explicit page created by
 * ConfigPageManager::make_explicit_page().
 */ 1 4 this 3 846  
7 0 0 6 15 797 0 0 180 /**
 * Returns true if the page was loaded by implicitly searching the config path
 * on startup, or false if it was explicitly loaded by dynamic code after
 * initial startup.
 */ 1 4 this 3 846  
8 0 0 4 19 849 0 0 363 /**
 * Changes the explicit sort order of this particular ConfigPage.  Lower-
 * numbered pages supercede higher-numbered pages.  Initially, all explicitly-
 * loaded pages have sort value 0, and implicitly-loaded pages (found on disk)
 * have sort value 10; you may set an individual page higher or lower to
 * influence its priority relative to other pages.
 */ 2 4 this 3 801  4 sort 1 798  
9 0 0 6 20 798 0 0 93 /**
 * Returns the explicit sort order of this particular ConfigPage.  See
 * set_sort().
 */ 1 4 this 3 846  
10 0 0 6 23 798 0 0 413 /**
 * Returns the sequence number of the page.
 *
 * Sequence numbers for a particular class (implicit vs.  explicit) of pages
 * are assigned as each page is loaded; each page is given a higher sequence
 * number than all the pages loaded before it.
 *
 * The implicit_load pages, which are discovered in the file system
 * automatically, have a different set of sequence numbers than the explicit
 * pages.
 */ 1 4 this 3 846  
11 0 0 6 24 798 0 0 302 /**
 * Returns the trust level associated with this page.  An untrusted page is
 * trust level 0; if the page was loaded from a signed .prc file, its trust
 * level is the index number of the certificate that signed it.  Generally, a
 * higher trust level value represents a greater level of trust.
 */ 1 4 this 3 846  
12 0 0 4 25 849 0 0 195 /**
 * Explicitly sets the trust level on this particular page.  Note that any
 * subsequent changes to the page, or to any variable declarations on it, will
 * reset the trust level to zero.
 */ 2 4 this 3 801  11 trust_level 1 798  
13 0 0 6 26 848 0 0 153 /**
 * Returns the raw binary signature that was found in the prc file, if any.
 * This method is probably not terribly useful for most applications.
 */ 1 4 this 3 846  
14 0 0 4 30 849 0 0 57 /**
 * Removes all of the declarations from the page.
 */ 1 4 this 3 801  
15 0 0 6 31 797 0 0 392 /**
 * Reads the contents of a complete prc file, as returned by the indicated
 * istream, into the current page file.  Returns true on success, or false on
 * some I/O error.
 *
 * This is a low-level interface.  Normally you do not need to call it
 * directly.  See the global functions load_prc_file() and unload_prc_file(),
 * defined in panda/src/putil, for a higher-level interface.
 */ 2 4 this 3 801  2 in 1 834  
16 0 0 6 32 797 0 0 155 /**
 * Automatically decrypts and reads the stream, given the indicated password.
 * Note that if the password is incorrect, the result may be garbage.
 */ 3 4 this 3 801  2 in 1 834  8 password 1 848  
17 0 0 6 33 799 0 0 83 /**
 * Adds the indicated variable/value pair as a new declaration on the page.
 */ 3 4 this 3 801  8 variable 1 802  5 value 1 848  
18 0 0 6 33 799 0 0 83 /**
 * Adds the indicated variable/value pair as a new declaration on the page.
 */ 3 4 this 3 801  8 variable 1 848  5 value 1 848  
19 0 0 6 34 797 0 0 171 /**
 * Removes the indicated declaration from the page and deletes it.  Returns
 * true if the declaration is successfully removed, false if it was not on the
 * page.
 */ 2 4 this 3 801  4 decl 1 799  
20 0 0 6 35 850 0 0 58 /**
 * Returns the number of declarations on the page.
 */ 1 4 this 3 846  
21 0 0 6 36 805 0 0 51 /**
 * Returns the nth declaration on the page.
 */ 2 4 this 3 846  1 n 1 850  
22 0 0 6 37 799 0 0 180 /**
 * Returns a modifiable pointer to the nth declaration on the page.  Any
 * modifications will appear in the output, if the page is written out with
 * ConfigPage::write().
 */ 2 4 this 3 801  1 n 1 850  
23 0 0 6 38 848 0 0 73 /**
 * Returns the variable named by the nth declaration on the page.
 */ 2 4 this 3 846  1 n 1 850  
24 0 0 6 39 848 0 0 73 /**
 * Returns the value assigned by the nth declaration on the page.
 */ 2 4 this 3 846  1 n 1 850  
25 0 0 6 40 797 0 0 105 /**
 * Returns true if the nth active variable on the page has been used by code,
 * false otherwise.
 */ 2 4 this 3 846  1 n 1 850  
26 0 0 4 124 849 0 0 10 /**
 *
 */ 2 4 this 3 846  3 out 1 836  
27 0 0 4 125 849 0 0 61 /**
 * Outputs the first few hex digits of the signature.
 */ 2 4 this 3 846  3 out 1 836  
28 0 0 4 126 849 0 0 10 /**
 *
 */ 2 4 this 3 846  3 out 1 836  
29 0 0 6 44 801 0 0 67 /**
 * Returns the page on which this declaration can be found.
 */ 1 4 this 3 805  
30 0 0 6 45 802 0 0 148 /**
 * Returns the variable that this declaration names.  This variable may or may
 * not have been defined by the time the declaration is read.
 */ 1 4 this 3 805  
31 0 0 6 102 848 0 0 186 /**
 * Returns the value assigned to this variable.  This is the original one-line
 * text defined for the variable in the .prc file (or passed to
 * ConfigPage::make_declaration()).
 */ 1 4 this 3 805  
32 0 0 4 103 849 0 0 55 /**
 * Changes the value assigned to this variable.
 */ 2 4 this 3 799  5 value 1 848  
33 0 0 6 104 850 0 0 156 /**
 * Returns the number of words in the declaration's value.  A word is defined
 * as a sequence of non-whitespace characters delimited by whitespace.
 */ 1 4 this 3 805  
34 0 0 6 105 797 0 0 184 /**
 * Returns true if the declaration's value has a valid string value for the
 * nth word.  This is really the same thing as asking if there are at least n
 * words in the value.
 */ 2 4 this 3 805  1 n 1 850  
35 0 0 6 106 797 0 0 97 /**
 * Returns true if the declaration's value has a valid boolean value for the
 * nth word.
 */ 2 4 this 3 805  1 n 1 850  
36 0 0 6 107 797 0 0 97 /**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */ 2 4 this 3 805  1 n 1 850  
37 0 0 6 108 797 0 0 95 /**
 * Returns true if the declaration's value has a valid int64 value for the nth
 * word.
 */ 2 4 this 3 805  1 n 1 850  
38 0 0 6 109 797 0 0 97 /**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */ 2 4 this 3 805  1 n 1 850  
39 0 0 6 110 848 0 0 153 /**
 * Returns the string value of the nth word of the declaration's value, or
 * empty string if there is no nth value.  See also has_string_word().
 */ 2 4 this 3 805  1 n 1 850  
40 0 0 6 111 797 0 0 145 /**
 * Returns the boolean value of the nth word of the declaration's value, or
 * false if there is no nth value.  See also has_bool_word().
 */ 2 4 this 3 805  1 n 1 850  
41 0 0 6 112 798 0 0 140 /**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_int_word().
 */ 2 4 this 3 805  1 n 1 850  
42 0 0 6 113 821 0 0 140 /**
 * Returns the int64 value of the nth word of the declaration's value, or 0 if
 * there is no nth value.  See also has_int64_word().
 */ 2 4 this 3 805  1 n 1 850  
43 0 0 6 114 816 0 0 143 /**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_double_word().
 */ 2 4 this 3 805  1 n 1 850  
44 0 0 4 115 849 0 0 92 /**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */ 3 4 this 3 799  1 n 1 850  5 value 1 848  
45 0 0 4 116 849 0 0 92 /**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */ 3 4 this 3 799  1 n 1 850  5 value 1 797  
46 0 0 4 117 849 0 0 92 /**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */ 3 4 this 3 799  1 n 1 850  5 value 1 798  
47 0 0 4 118 849 0 0 92 /**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */ 3 4 this 3 799  1 n 1 850  5 value 1 821  
48 0 0 4 119 849 0 0 92 /**
 * Changes the nth word to the indicated value without affecting the other
 * words.
 */ 3 4 this 3 799  1 n 1 850  5 value 1 816  
49 0 0 7 120 852 0 0 100 /**
 * Interprets the string value as a filename and returns it, with any
 * variables expanded.
 */ 1 4 this 3 805  
50 0 0 6 121 798 0 0 254 /**
 * Returns the sequence number of the declaration within the page.  Sequence
 * numbers are assigned as each declaration is created; each declaration is
 * given a higher sequence number than all the declarations created in the
 * page before it.
 */ 1 4 this 3 805  
51 0 0 4 122 849 0 0 10 /**
 *
 */ 2 4 this 3 805  3 out 1 836  
52 0 0 4 123 849 0 0 10 /**
 *
 */ 2 4 this 3 805  3 out 1 836  
53 0 0 6 56 848 0 0 44 /**
 * Returns the name of the variable.
 */ 1 4 this 3 853  
54 0 0 6 57 797 0 0 118 /**
 * Returns true if the variable has been referenced by a ConfigVariable
 * somewhere in code, false otherwise.
 */ 1 4 this 3 853  
55 0 0 6 58 791 0 0 125 /**
 * Returns the stated type of this variable.  If the variable has not yet been
 * defined, this will be VT_undefined.
 */ 1 4 this 3 853  
56 0 0 6 59 848 0 0 82 /**
 * Returns the brief description of this variable, if it has been defined.
 */ 1 4 this 3 853  
57 0 0 6 60 798 0 0 250 /**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */ 1 4 this 3 853  
58 0 0 6 61 797 0 0 413 /**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 853  
59 0 0 6 62 798 0 0 479 /**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 853  
60 0 0 6 63 797 0 0 232 /**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */ 1 4 this 3 853  
61 0 0 6 64 805 0 0 137 /**
 * Returns the default variable specified for this variable.  If the variable
 * has not yet been defined, this will return NULL.
 */ 1 4 this 3 853  
62 0 0 4 65 849 0 0 212 /**
 * Specifies the type of this variable.  See get_value_type().  It is not an
 * error to call this multiple times, but if the value changes once
 * get_declaration() has been called, a warning is printed.
 */ 2 4 this 3 802  10 value_type 1 791  
63 0 0 4 66 849 0 0 214 /**
 * Specifies the trust level of this variable.  See get_flags().  It is not an
 * error to call this multiple times, but if the value changes once
 * get_declaration() has been called, a warning is printed.
 */ 2 4 this 3 802  5 flags 1 798  
64 0 0 4 67 849 0 0 232 /**
 * Specifies the one-line description of this variable.  See
 * get_description().  It is not an error to call this multiple times, but if
 * the value changes once get_declaration() has been called, a warning is
 * printed.
 */ 2 4 this 3 802  11 description 1 848  
65 0 0 4 68 849 0 0 97 /**
 * Specifies the default value for this variable if it is not defined in any
 * prc file.
 */ 2 4 this 3 802  13 default_value 1 848  
66 0 0 4 69 849 0 0 75 /**
 * Marks that the variable has been "declared" by a ConfigVariable.
 */ 1 4 this 3 802  
67 0 0 6 70 799 0 0 324 /**
 * Creates a new local value for this variable, if there is not already one
 * specified.  This will shadow any values defined in the various .prc files.
 *
 * If there is already a local value defined for this variable, simply returns
 * that one.
 *
 * Use clear_local_value() to remove the local value definition.
 */ 1 4 this 3 802  
68 0 0 6 71 797 0 0 240 /**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */ 1 4 this 3 802  
69 0 0 6 72 797 0 0 148 /**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */ 1 4 this 3 853  
70 0 0 6 73 797 0 0 149 /**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */ 1 4 this 3 853  
71 0 0 6 74 850 0 0 194 /**
 * Returns the number of declarations that contribute to this variable's
 * value.  If the variable has been defined, this will always be at least 1
 * (for the default value, at least).
 */ 1 4 this 3 853  
72 0 0 6 75 805 0 0 285 /**
 * Returns the nth declarations that contributes to this variable's value.
 * The declarations are arranged in order such that earlier declarations
 * shadow later declarations; thus, get_declaration(0) is always defined and
 * always returns the current value of the variable.
 */ 2 4 this 3 853  1 n 1 850  
73 0 0 6 77 850 0 0 157 /**
 * Returns the number of prc files that reference this variable.  This is not
 * exactly the same as the number of declarations; see get_reference().
 */ 1 4 this 3 853  
74 0 0 6 78 805 0 0 335 /**
 * Returns the nth declaration in a prc file that references this variable.
 * This is similar, but not identical to, get_declaration().  The difference
 * is that this will list *only* true references in a prc file, and will not
 * list default values or locally-assigned values; it also will list even the
 * untrusted files.
 */ 2 4 this 3 853  1 n 1 850  
75 0 0 6 80 850 0 0 115 /**
 * Returns the number of trusted prc files that reference this variable.  See
 * also get_num_references().
 */ 1 4 this 3 853  
76 0 0 6 81 805 0 0 428 /**
 * Returns the nth declaration in a trusted prc file that references this
 * variable.  This is similar, but not identical to, get_declaration().  The
 * difference is that this will list *only* true references in a prc file, and
 * will not list default values or locally-assigned values.
 *
 * This is also similar to get_reference(), except that it only lists the
 * trusted declarations, omitting the untrusted ones.
 */ 2 4 this 3 853  1 n 1 850  
77 0 0 6 83 850 0 0 107 /**
 * Returns the number of trusted, unique (by string value) values there exist
 * for this variable.
 */ 1 4 this 3 853  
78 0 0 6 84 805 0 0 157 /**
 * Returns the nth trusted, unique value for this variable.  This is similar
 * to get_trusted_reference(), except that duplicate values are removed.
 */ 2 4 this 3 853  1 n 1 850  
79 0 0 4 89 849 0 0 10 /**
 *
 */ 2 4 this 3 853  3 out 1 836  
80 0 0 4 90 849 0 0 10 /**
 *
 */ 2 4 this 3 853  3 out 1 836  
81 0 0 6 51 843 0 0 0 1 4 this 3 802  
82 0 0 6 54 855 0 0 0 1 4 this 3 802  
83 0 0 7 129 856 480 0 10 /**
 *
 */ 0 
84 0 0 15 129 856 480 0 0 1 6 param0 0 857  
85 0 0 36 131 849 0 0 0 3 4 this 3 856  11 ostream_ptr 1 859  12 delete_later 1 797  
86 0 0 6 132 836 0 0 67 /**
 * Returns the system-wide ostream for all Notify messages.
 */ 1 4 this 3 857  
87 0 0 4 134 849 0 0 110 /**
 * Removes the installed assert handler and restores default behavior of
 * nassertr() and nassertv().
 */ 1 4 this 3 856  
88 0 0 6 135 797 0 0 85 /**
 * Returns true if a user assert handler has been installed, false otherwise.
 */ 1 4 this 3 857  
89 0 0 4 136 849 0 0 110 /**
 * Returns a pointer to the user-installed assert handler, if one was
 * installed, or NULL otherwise.
 */ 1 4 this 3 857  
90 0 0 6 137 797 0 0 637 /**
 * Returns true if an assertion test has failed (and not been ignored) since
 * the last call to clear_assert_failed().
 *
 * When an assertion test fails, the assert handler may decide either to
 * abort, return, or ignore the assertion.  Naturally, if it decides to abort,
 * this flag is irrelevant.  If it chooses to ignore the assertion, the flag
 * is not set.  However, if the assert handler chooses to return out of the
 * function (the normal case), it will also set this flag to indicate that an
 * assertion failure has occurred.
 *
 * This will also be the behavior in the absence of a user-defined assert
 * handler.
 */ 1 4 this 3 857  
91 0 0 6 138 848 0 0 100 /**
 * Returns the error message that corresponds to the assertion that most
 * recently failed.
 */ 1 4 this 3 857  
92 0 0 4 139 849 0 0 114 /**
 * Resets the assert_failed flag that is set whenever an assertion test fails.
 * See has_assert_failed().
 */ 1 4 this 3 856  
93 0 0 6 140 828 0 0 129 /**
 * Returns the topmost Category in the hierarchy.  This may be used to
 * traverse the hierarchy of available Categories.
 */ 1 4 this 3 856  
94 0 0 6 141 828 0 0 325 /**
 * Finds or creates a new Category given the fullname of the Category.  This
 * name should be a sequence of colon-separated names of parent Categories,
 * ending in the basename of this Category, e.g.  display:glxdisplay.  This is
 * a shorthand way to define a Category when a pointer to its parent is not
 * handy.
 */ 2 4 this 3 856  8 fullname 1 848  
95 0 0 6 141 828 0 0 199 /**
 * Finds or creates a new Category given the basename of the category and its
 * parent in the category hierarchy.  The parent pointer may be NULL to
 * indicate this is a top-level Category.
 */ 3 4 this 3 856  8 basename 1 848  15 parent_category 1 828  
96 0 0 6 141 828 0 0 316 /**
 * Finds or creates a new Category given the basename of the category and the
 * fullname of its parent.  This is another way to create a category when you
 * don't have a pointer to its parent handy, but you know the name of its
 * parent.  If the parent Category does not already exist, it will be created.
 */ 3 4 this 3 856  8 basename 1 848  15 parent_fullname 1 848  
97 0 0 6 142 836 0 0 189 /**
 * A convenient way to get the ostream that should be written to for a Notify-
 * type message.  Also see Category::out() for a message that is specific to a
 * particular Category.
 */ 0 
98 0 0 6 142 836 0 0 214 /**
 * A convenient way to get the ostream that should be written to for a Notify-
 * type message of a particular severity.  Also see Category::out() for a
 * message that is specific to a particular Category.
 */ 1 8 severity 1 807  
99 0 0 6 143 836 0 0 159 /**
 * A convenient way to get an ostream that doesn't do anything.  Returned by
 * Category::out() when a particular Category and/or Severity is disabled.
 */ 0 
100 0 0 4 144 849 0 0 209 /**
 * A convenient way for scripting languages, which may know nothing about
 * ostreams, to write to Notify.  This writes a single string, followed by an
 * implicit newline, to the Notify output stream.
 */ 1 3 str 1 848  
101 0 0 6 145 856 0 0 104 /**
 * Returns the pointer to the global Notify object.  There is only one of
 * these in the world.
 */ 0 
102 0 0 6 147 797 0 0 157 /**
 * Returns true if the implicit `*.prc` files have already been loaded, false
 * otherwise.  Normally this will only be false briefly before startup.
 */ 1 4 this 3 862  
103 0 0 4 148 849 0 0 252 /**
 * Searches the PRC_DIR and/or PRC_PATH directories for `*.prc` files and loads
 * them in as pages.  This is normally called automatically at startup time,
 * when the first variable's value is referenced.  See also
 * reload_implicit_pages().
 */ 1 4 this 3 864  
104 0 0 4 149 849 0 0 211 /**
 * Searches the PRC_DIR and/or PRC_PATH directories for *.prc files and loads
 * them in as pages.
 *
 * This may be called after startup, to force the system to re-read all of the
 * implicit prc files.
 */ 1 4 this 3 864  
105 0 0 6 150 865 0 0 274 /**
 * Returns the search path used to locate implicit .prc files.  This is
 * determined by the PRC_DIR and PRC_PATH environment variables.  The object
 * returned by this method may be modified to change the path at runtime, and
 * then reload_implicit_pages() called.
 */ 1 4 this 3 864  
106 0 0 6 151 850 0 0 270 /**
 * Returns the number of patterns, like `*.prc`, that are compiled in that
 * will be searched for as default config filenames.  Normally there is only
 * one pattern, and it is `*.prc`, but others may be specified with the
 * PRC_FILENAME variable in Config.pp.
 */ 1 4 this 3 862  
107 0 0 6 152 848 0 0 131 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * config file.  See get_num_prc_patterns().
 */ 2 4 this 3 862  1 n 1 850  
108 0 0 6 153 850 0 0 170 /**
 * Returns the number of patterns, like `*.pre`, that are compiled in that
 * will be searched for as special config files that are understood to be
 * encrypted.
 */ 1 4 this 3 862  
109 0 0 6 154 848 0 0 151 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * encrypted config file.  See get_num_prc_encrypted_patterns().
 */ 2 4 this 3 862  1 n 1 850  
110 0 0 6 155 850 0 0 232 /**
 * Returns the number of patterns, like `*.exe`, that are compiled in that
 * will be searched for as special config files that are to be executed as a
 * program, and their output taken to be input.  This is normally empty.
 */ 1 4 this 3 862  
111 0 0 6 156 848 0 0 159 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * executable-style config file.  See get_num_prc_executable_patterns().
 */ 2 4 this 3 862  1 n 1 850  
112 0 0 6 157 801 0 0 206 /**
 * Creates and returns a new, empty ConfigPage.  This page will be stacked on
 * top of any pages that were created before; it may shadow variable
 * declarations that are defined in previous pages.
 */ 2 4 this 3 864  4 name 1 848  
113 0 0 6 158 797 0 0 318 /**
 * Removes a previously-constructed ConfigPage from the set of active pages,
 * and deletes it.  The ConfigPage object is no longer valid after this call.
 * Returns true if the page is successfully deleted, or false if it was
 * unknown (which should never happen if the page was legitimately
 * constructed).
 */ 2 4 this 3 864  4 page 1 801  
114 0 0 6 159 850 0 0 174 /**
 * Returns the current number of implicitly-loaded ConfigPages in the world.
 * These represent files that were automatically discovered on the disk as
 * .prc files.
 */ 1 4 this 3 862  
115 0 0 6 160 801 0 0 94 /**
 * Returns the nth implicit ConfigPage in the world.  See
 * get_num_implicit_pages().
 */ 2 4 this 3 862  1 n 1 850  
116 0 0 6 161 850 0 0 214 /**
 * Returns the current number of explicitly-loaded ConfigPages in the world.
 * These represent pages that were loaded dynamically at runtime by explicit
 * calls to ConfigPageManager::make_explicit_page().
 */ 1 4 this 3 862  
117 0 0 6 162 801 0 0 94 /**
 * Returns the nth explicit ConfigPage in the world.  See
 * get_num_explicit_pages().
 */ 2 4 this 3 862  1 n 1 850  
118 0 0 4 163 849 0 0 10 /**
 *
 */ 2 4 this 3 862  3 out 1 836  
119 0 0 4 164 849 0 0 10 /**
 *
 */ 2 4 this 3 862  3 out 1 836  
120 0 0 6 165 864 0 0 10 /**
 *
 */ 0 
121 0 0 6 174 802 0 0 181 /**
 * Creates and returns a new, undefined ConfigVariableCore with the indicated
 * name; or if a variable with this name has already been created, returns
 * that one instead.
 */ 2 4 this 3 866  4 name 1 848  
122 0 0 6 175 802 0 0 899 /**
 * Defines a variable "template" to match against dynamically-defined
 * variables that may or may not be created in the future.
 *
 * The template consists of a glob pattern, e.g.  `notify-level-*`, which will
 * be tested against any config variable passed to a future call to
 * make_variable().  If the pattern matches, the returned ConfigVariableCore
 * is copied to define the new variable, instead of creating a default, empty
 * one.
 *
 * This is useful to pre-specify default values for a family of variables that
 * all have similar properties, and all may not be created at the same time.
 * It is especially useful to avoid cluttering up the list of available
 * variables with user-declared variables that have not been defined yet by
 * the application (e.g. `egg-object-type-*`).
 *
 * This method basically pre-defines all variables that match the specified
 * glob pattern.
 */ 6 4 this 3 866  7 pattern 1 848  4 type 1 791  13 default_value 1 848  11 description 5 848  5 flags 5 798  
123 0 0 6 176 850 0 0 81 /**
 * Returns the current number of active ConfigVariableCores in the world.
 */ 1 4 this 3 867  
124 0 0 6 177 802 0 0 66 /**
 * Returns the nth active ConfigVariableCore in the world.
 */ 2 4 this 3 867  1 n 1 850  
125 0 0 6 179 848 0 0 73 /**
 * Returns the name of the nth active ConfigVariable in the list.
 */ 2 4 this 3 867  1 n 1 850  
126 0 0 6 180 797 0 0 111 /**
 * Returns true if the nth active ConfigVariable in the list has been used by
 * code, false otherwise.
 */ 2 4 this 3 867  1 n 1 850  
127 0 0 4 182 849 0 0 10 /**
 *
 */ 2 4 this 3 867  3 out 1 836  
128 0 0 4 183 849 0 0 10 /**
 *
 */ 2 4 this 3 867  3 out 1 836  
129 0 0 4 184 849 0 0 343 /**
 * Writes all of the prc-set config variables, as they appear in a prc file
 * somewhere, one per line, very concisely.  This lists the dominant value in
 * the prc file; it does not list shadowed values, and it does not list
 * locally-set values.
 *
 * This is mainly intended for generating a hash of the input config file
 * state.
 */ 2 4 this 3 867  3 out 1 836  
130 0 0 4 185 849 0 0 133 /**
 * Writes a list of all the variables that have been defined in a prc file
 * without having been declared somewhere in code.
 */ 1 4 this 3 867  
131 0 0 4 186 849 0 0 123 /**
 * Writes a list of all the variables that have been declared somewhere in
 * code, along with a brief description.
 */ 1 4 this 3 867  
132 0 0 4 187 849 0 0 241 /**
 * Writes a list of all the "dynamic" variables that have been declared
 * somewhere in code, along with a brief description.  This is a (usually
 * large) list of config variables that are declared with a generated variable
 * name.
 */ 1 4 this 3 867  
133 0 0 6 188 866 0 0 10 /**
 *
 */ 0 
134 0 0 6 194 848 0 0 44 /**
 * Returns the name of the variable.
 */ 1 4 this 3 869  
135 0 0 6 195 791 0 0 132 /**
 * Returns the stated type of this variable.  This should be VT_list, unless a
 * later variable declaration has changed it.
 */ 1 4 this 3 869  
136 0 0 6 196 848 0 0 82 /**
 * Returns the brief description of this variable, if it has been defined.
 */ 1 4 this 3 869  
137 0 0 6 197 798 0 0 250 /**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */ 1 4 this 3 869  
138 0 0 6 198 797 0 0 413 /**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 869  
139 0 0 6 199 798 0 0 479 /**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 869  
140 0 0 6 200 797 0 0 232 /**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */ 1 4 this 3 869  
141 0 0 6 207 797 0 0 240 /**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */ 1 4 this 3 871  
142 0 0 6 208 797 0 0 148 /**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */ 1 4 this 3 869  
143 0 0 6 209 797 0 0 149 /**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */ 1 4 this 3 869  
144 0 0 4 210 849 0 0 10 /**
 *
 */ 2 4 this 3 869  3 out 1 836  
145 0 0 4 211 849 0 0 10 /**
 *
 */ 2 4 this 3 869  3 out 1 836  
146 0 0 6 190 843 0 0 0 1 4 this 3 871  
147 0 0 6 192 855 0 0 0 1 4 this 3 871  
148 0 0 15 213 874 545 0 0 1 6 param0 0 872  
149 0 0 7 213 874 545 0 230 /**
 * Use this constructor to make a ConfigVariable of an unspecified type.
 * Usually you'd want to do this just to reference a previously-defined
 * ConfigVariable of a specific type, without having to know what type it is.
 */ 1 4 name 1 848  
150 0 0 6 215 848 0 0 77 /**
 * Returns the toplevel value of the variable, formatted as a string.
 */ 1 4 this 3 872  
151 0 0 4 216 849 0 0 177 /**
 * Changes the value assigned to this variable.  This creates a local value
 * that shadows any values defined in the .prc files, until
 * clear_local_value() is called.
 */ 2 4 this 3 874  5 value 1 848  
152 0 0 4 217 849 0 0 129 /**
 * Removes the value assigned to this variable, and lets its original value
 * (as read from the prc files) show through.
 */ 1 4 this 3 874  
153 0 0 6 218 850 0 0 153 /**
 * Returns the number of words in the variable's value.  A word is defined as
 * a sequence of non-whitespace characters delimited by whitespace.
 */ 1 4 this 3 872  
154 0 0 38 219 859 0 0 0 1 4 this 3 872  
155 0 0 15 221 877 561 0 0 1 6 param0 0 875  
156 0 0 7 221 877 561 0 10 /**
 *
 */ 1 4 name 1 848  
157 0 0 7 221 877 561 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 797  11 description 5 848  5 flags 5 798  
158 0 0 7 221 877 561 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 848  11 description 5 848  5 flags 5 798  
159 0 0 6 222 877 0 0 0 2 4 this 3 877  5 value 1 797  
160 0 0 6 224 850 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 875  
161 0 0 6 225 797 0 0 0 2 4 this 3 875  1 n 1 850  
162 0 0 4 226 849 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 877  5 value 1 797  
163 0 0 6 227 797 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 875  
164 0 0 6 228 797 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 875  
165 0 0 6 231 797 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 875  1 n 1 850  
166 0 0 4 232 849 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 877  1 n 1 850  5 value 1 797  
167 0 0 6 223 797 0 0 0 1 4 this 3 875  
168 0 0 15 235 880 573 0 0 1 6 param0 0 878  
169 0 0 7 235 880 573 0 10 /**
 *
 */ 1 4 name 1 848  
170 0 0 7 235 880 573 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 816  11 description 5 848  5 flags 5 798  
171 0 0 7 235 880 573 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 848  11 description 5 848  5 flags 5 798  
172 0 0 6 236 880 0 0 0 2 4 this 3 880  5 value 1 816  
173 0 0 6 238 850 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 878  
174 0 0 6 239 816 0 0 0 2 4 this 3 878  1 n 1 850  
175 0 0 4 240 849 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 880  5 value 1 816  
176 0 0 6 241 816 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 878  
177 0 0 6 242 816 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 878  
178 0 0 6 246 816 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 878  1 n 1 850  
179 0 0 4 247 849 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 880  1 n 1 850  5 value 1 816  
180 0 0 6 248 797 0 0 51 /**
 * Returns true if the variable is not 0.0.
 */ 1 4 this 3 878  
181 0 0 6 237 816 0 0 0 1 4 this 3 878  
182 0 0 15 251 883 597 0 0 1 6 param0 0 881  
183 0 0 7 251 883 597 0 10 /**
 *
 */ 1 4 name 1 848  
184 0 0 7 251 883 597 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 884  11 description 5 848  5 flags 5 798  
185 0 0 6 252 883 0 0 0 2 4 this 3 883  5 value 1 884  
186 0 0 6 254 848 0 0 76 // These methods help the ConfigVariableFilename act like a Filename object. 1 4 this 3 881  
187 0 0 6 255 797 0 0 10 /**
 *
 */ 1 4 this 3 881  
188 0 0 6 256 850 0 0 10 /**
 *
 */ 1 4 this 3 881  
189 0 0 6 257 886 0 0 0 2 4 this 3 881  1 n 1 850  
190 0 0 6 258 848 0 0 183 /**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator, so this function is a
 * little redundant.
 */ 1 4 this 3 881  
191 0 0 6 259 848 0 0 139 /**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */ 1 4 this 3 881  
192 0 0 6 260 848 0 0 145 /**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */ 1 4 this 3 881  
193 0 0 6 261 848 0 0 96 /**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */ 1 4 this 3 881  
194 0 0 6 262 848 0 0 81 /**
 * Returns the basename part of the filename, without the file extension.
 */ 1 4 this 3 881  
195 0 0 6 263 848 0 0 140 /**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */ 1 4 this 3 881  
196 0 0 6 264 797 0 0 34 // Comparison operators are handy. 2 4 this 3 881  5 other 1 884  
197 0 0 6 265 797 0 0 0 2 4 this 3 881  5 other 1 884  
198 0 0 6 266 797 0 0 0 2 4 this 3 881  5 other 1 884  
199 0 0 4 267 849 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 883  5 value 1 884  
200 0 0 7 268 852 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 881  
201 0 0 7 269 852 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 881  
202 0 0 7 273 852 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 881  1 n 1 850  
203 0 0 4 274 849 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 883  1 n 1 850  5 value 1 884  
204 0 0 6 275 797 0 0 53 /**
 * Returns true if the variable is not empty.
 */ 1 4 this 3 881  
205 0 0 6 276 848 0 0 145 /**
 * Allows a ConfigVariableFilename object to be passed to any Python function
 * that accepts an os.PathLike object.
 *
 * @since 1.10.13
 */ 1 4 this 3 881  
206 0 0 6 253 884 0 0 0 1 4 this 3 881  
207 0 0 15 279 889 609 0 0 1 6 param0 0 887  
208 0 0 7 279 889 609 0 10 /**
 *
 */ 1 4 name 1 848  
209 0 0 7 279 889 609 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 798  11 description 5 848  5 flags 5 798  
210 0 0 7 279 889 609 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 848  11 description 5 848  5 flags 5 798  
211 0 0 6 280 889 0 0 0 2 4 this 3 889  5 value 1 798  
212 0 0 6 282 850 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 887  
213 0 0 6 283 798 0 0 0 2 4 this 3 887  1 n 1 850  
214 0 0 4 284 849 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 889  5 value 1 798  
215 0 0 6 285 798 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 887  
216 0 0 6 286 798 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 887  
217 0 0 6 289 798 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 887  1 n 1 850  
218 0 0 4 290 849 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 889  1 n 1 850  5 value 1 798  
219 0 0 6 291 797 0 0 49 /**
 * Returns true if the variable is not 0.
 */ 1 4 this 3 887  
220 0 0 6 281 798 0 0 0 1 4 this 3 887  
221 0 0 15 294 892 621 0 0 1 6 param0 0 890  
222 0 0 7 294 892 621 0 10 /**
 *
 */ 1 4 name 1 848  
223 0 0 7 294 892 621 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 821  11 description 5 848  5 flags 5 798  
224 0 0 7 294 892 621 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 848  11 description 5 848  5 flags 5 798  
225 0 0 6 295 892 0 0 0 2 4 this 3 892  5 value 1 821  
226 0 0 6 297 850 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 890  
227 0 0 6 298 821 0 0 0 2 4 this 3 890  1 n 1 850  
228 0 0 4 299 849 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 892  5 value 1 821  
229 0 0 6 300 821 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 890  
230 0 0 6 301 821 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 890  
231 0 0 6 306 821 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 890  1 n 1 850  
232 0 0 4 307 849 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 892  1 n 1 850  5 value 1 821  
233 0 0 6 308 797 0 0 53 /**
 * Returns true if the variable is not empty.
 */ 1 4 this 3 890  
234 0 0 6 296 821 0 0 0 1 4 this 3 890  
235 0 0 15 311 895 623 0 0 1 6 param0 0 893  
236 0 0 7 311 895 623 0 10 /**
 *
 */ 3 4 name 1 848  11 description 5 848  5 flags 5 798  
237 0 0 6 313 850 0 0 56 /**
 * Returns the number of values in the variable.
 */ 1 4 this 3 893  
238 0 0 6 314 848 0 0 49 /**
 * Returns the nth value of the variable.
 */ 2 4 this 3 893  1 n 1 850  
239 0 0 6 315 850 0 0 63 /**
 * Returns the number of unique values in the variable.
 */ 1 4 this 3 893  
240 0 0 6 316 848 0 0 56 /**
 * Returns the nth unique value of the variable.
 */ 2 4 this 3 893  1 n 1 850  
241 0 0 6 317 850 0 0 63 /**
 * Returns the number of unique values of the variable.
 */ 1 4 this 3 893  
242 0 0 6 318 848 0 0 0 2 4 this 3 893  1 n 1 850  
243 0 0 4 319 849 0 0 10 /**
 *
 */ 2 4 this 3 893  3 out 1 836  
244 0 0 4 320 849 0 0 10 /**
 *
 */ 2 4 this 3 893  3 out 1 836  
245 0 0 7 322 897 633 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 896  11 description 1 848  5 flags 5 798  
246 0 0 7 322 897 633 0 10 /**
 *
 */ 3 4 name 1 848  11 description 5 848  5 flags 5 798  
247 0 0 7 322 897 633 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 848  11 description 1 848  5 flags 5 798  
248 0 0 7 325 865 0 0 10 /**
 *
 */ 1 4 this 3 898  
249 0 0 6 326 896 0 0 10 /**
 *
 */ 1 4 this 3 898  
250 0 0 6 330 797 0 0 113 /**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */ 1 4 this 3 897  
251 0 0 4 331 849 0 0 113 /**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */ 1 4 this 3 897  
252 0 0 4 332 849 0 0 62 /**
 * Adds a new directory to the end of the search list.
 */ 2 4 this 3 897  9 directory 1 884  
253 0 0 4 333 849 0 0 64 /**
 * Adds a new directory to the front of the search list.
 */ 2 4 this 3 897  9 directory 1 884  
254 0 0 4 334 849 0 0 98 /**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */ 2 4 this 3 897  4 path 1 896  
255 0 0 4 334 849 0 0 98 /**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */ 3 4 this 3 897  4 path 1 848  9 separator 5 848  
256 0 0 4 335 849 0 0 104 /**
 * Adds all of the directories listed in the search path to the beginning of
 * the search list.
 */ 2 4 this 3 897  4 path 1 896  
257 0 0 6 336 797 0 0 69 /**
 * Returns true if the search list is empty, false otherwise.
 */ 1 4 this 3 898  
258 0 0 6 337 850 0 0 64 /**
 * Returns the number of directories on the search list.
 */ 1 4 this 3 898  
259 0 0 7 338 852 0 0 56 /**
 * Returns the nth directory on the search list.
 */ 2 4 this 3 898  1 n 1 850  
260 0 0 7 341 852 0 0 197 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Returns the full matching pathname of the first match if found, or
 * the empty string if not found.
 */ 2 4 this 3 898  8 filename 1 884  
261 0 0 7 342 901 0 0 184 /**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */ 2 4 this 3 898  8 filename 1 884  
262 0 0 6 342 850 0 0 363 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */ 3 4 this 3 898  8 filename 1 884  7 results 1 901  
263 0 0 4 343 849 0 0 10 /**
 *
 */ 2 4 this 3 898  3 out 1 836  
264 0 0 4 344 849 0 0 10 /**
 *
 */ 2 4 this 3 898  3 out 1 836  
265 0 0 7 324 865 0 0 0 1 4 this 3 898  
266 0 0 15 346 904 666 0 0 1 6 param0 0 902  
267 0 0 7 346 904 666 0 10 /**
 *
 */ 1 4 name 1 848  
268 0 0 7 346 904 666 0 10 /**
 *
 */ 4 4 name 1 848  13 default_value 1 848  11 description 5 848  5 flags 5 798  
269 0 0 6 347 904 0 0 0 2 4 this 3 904  5 value 1 848  
270 0 0 6 349 848 0 0 76 // These methods help the ConfigVariableString act like a C++ string object. 1 4 this 3 902  
271 0 0 6 350 797 0 0 10 /**
 *
 */ 1 4 this 3 902  
272 0 0 6 351 850 0 0 10 /**
 *
 */ 1 4 this 3 902  
273 0 0 6 352 886 0 0 0 2 4 this 3 902  1 n 1 850  
274 0 0 6 353 797 0 0 34 // Comparison operators are handy. 2 4 this 3 902  5 other 1 848  
275 0 0 6 354 797 0 0 0 2 4 this 3 902  5 other 1 848  
276 0 0 6 355 797 0 0 0 2 4 this 3 902  5 other 1 848  
277 0 0 4 356 849 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 904  5 value 1 848  
278 0 0 6 357 848 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 902  
279 0 0 6 358 848 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 902  
280 0 0 6 361 848 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 902  1 n 1 850  
281 0 0 4 362 849 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 904  1 n 1 850  5 value 1 848  
282 0 0 6 363 797 0 0 53 /**
 * Returns true if the variable is not empty.
 */ 1 4 this 3 902  
283 0 0 6 348 848 0 0 0 1 4 this 3 902  
284 0 0 15 397 828 693 0 0 1 6 param0 0 905  
285 0 0 6 370 848 0 0 10 /**
 *
 */ 1 4 this 3 905  
286 0 0 6 371 848 0 0 10 /**
 *
 */ 1 4 this 3 905  
287 0 0 6 372 807 0 0 10 /**
 *
 */ 1 4 this 3 905  
288 0 0 4 373 849 0 0 150 /**
 * Sets the severity level of messages that will be reported from this
 * Category.  This allows any message of this severity level or higher.
 */ 2 4 this 3 828  8 severity 1 807  
289 0 0 6 377 797 0 0 110 /**
 * Returns true if messages of the indicated severity level ought to be
 * reported for this Category.
 */ 2 4 this 3 905  8 severity 1 807  
290 0 0 6 378 797 0 0 393 // When NOTIFY_DEBUG is not defined, the categories will never be set to
// "spam" or "debug" severities, and these methods are redefined to be
// static to make it more obvious to the compiler.  However, we still want
// to present a consistent interface to our scripting language, so during
// the interrogate pass (that is, when CPPPARSER is defined), we still
// pretend they're nonstatic. 1 4 this 3 905  
291 0 0 6 379 797 0 0 52 /**
 * A shorthand way to write is_on(NS_debug).
 */ 1 4 this 3 905  
292 0 0 6 380 797 0 0 51 /**
 * A shorthand way to write is_on(NS_info).
 */ 1 4 this 3 905  
293 0 0 6 381 797 0 0 54 /**
 * A shorthand way to write is_on(NS_warning).
 */ 1 4 this 3 905  
294 0 0 6 382 797 0 0 52 /**
 * A shorthand way to write is_on(NS_error).
 */ 1 4 this 3 905  
295 0 0 6 383 797 0 0 52 /**
 * A shorthand way to write is_on(NS_fatal).
 */ 1 4 this 3 905  
296 0 0 6 384 836 0 0 277 /**
 * Begins a new message to this Category at the indicated severity level.  If
 * the indicated severity level is enabled, this writes a prefixing string to
 * the Notify::out() stream and returns that.  If the severity level is
 * disabled, this returns Notify::null().
 */ 3 4 this 3 905  8 severity 1 807  6 prefix 5 797  
297 0 0 6 385 836 0 0 49 /**
 * A shorthand way to write out(NS_spam).
 */ 2 4 this 3 905  6 prefix 5 797  
298 0 0 6 386 836 0 0 50 /**
 * A shorthand way to write out(NS_debug).
 */ 2 4 this 3 905  6 prefix 5 797  
299 0 0 6 387 836 0 0 49 /**
 * A shorthand way to write out(NS_info).
 */ 2 4 this 3 905  6 prefix 5 797  
300 0 0 6 388 836 0 0 52 /**
 * A shorthand way to write out(NS_warning).
 */ 2 4 this 3 905  6 prefix 5 797  
301 0 0 6 389 836 0 0 50 /**
 * A shorthand way to write out(NS_error).
 */ 2 4 this 3 905  6 prefix 5 797  
302 0 0 6 390 836 0 0 50 /**
 * A shorthand way to write out(NS_fatal).
 */ 2 4 this 3 905  6 prefix 5 797  
303 0 0 6 391 850 0 0 78 /**
 * Returns the number of child Categories of this particular Category.
 */ 1 4 this 3 905  
304 0 0 6 392 828 0 0 70 /**
 * Returns the nth child Category of this particular Category.
 */ 2 4 this 3 905  1 i 1 850  
305 0 0 4 396 849 0 0 207 /**
 * Sets a global delta (in seconds) between the local time and the server's
 * time, for the purpose of synchronizing the time stamps in the log messages
 * of the client with that of a known server.
 */ 1 5 delta 1 907  
306 0 0 6 366 855 0 0 0 1 4 this 3 828  
307 0 0 6 368 843 0 0 0 1 4 this 3 828  
308 0 0 7 401 908 700 0 10 /**
 *
 */ 0 
309 0 0 7 401 908 700 0 10 /**
 *
 */ 3 6 source 1 834  11 owns_source 1 797  8 password 1 848  
310 0 0 6 402 908 0 0 10 /**
 *
 */ 4 4 this 3 908  6 source 1 834  11 owns_source 1 797  8 password 1 848  
311 0 0 6 403 908 0 0 124 /**
 * Resets the EncryptStream to empty, but does not actually close the source
 * istream unless owns_source was true.
 */ 1 4 this 3 908  
312 0 0 6 404 848 0 0 74 /**
 * Returns the encryption algorithm that was read from the stream.
 */ 1 4 this 3 909  
313 0 0 6 405 798 0 0 85 /**
 * Returns the encryption key length, in bits, that was read from the stream.
 */ 1 4 this 3 909  
314 0 0 6 406 798 0 0 63 /**
 * Returns the value that was was read from the stream.
 */ 1 4 this 3 909  
315 0 0 7 413 911 710 0 10 /**
 *
 */ 0 
316 0 0 7 413 911 710 0 10 /**
 *
 */ 3 4 dest 1 836  9 owns_dest 1 797  8 password 1 848  
317 0 0 6 414 911 0 0 10 /**
 *
 */ 4 4 this 3 911  4 dest 1 836  9 owns_dest 1 797  8 password 1 848  
318 0 0 6 415 911 0 0 120 /**
 * Resets the EncryptStream to empty, but does not actually close the dest
 * ostream unless owns_dest was true.
 */ 1 4 this 3 911  
319 0 0 4 416 849 0 0 383 /**
 * Specifies the encryption algorithm that should be used for future calls to
 * open().  The default is whatever is specified by the encryption-algorithm
 * config variable.  The complete set of available algorithms is defined by
 * the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but open() will fail.
 */ 2 4 this 3 911  9 algorithm 1 848  
320 0 0 4 417 849 0 0 347 /**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to open().  The default is whatever is specified
 * by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but open() will fail.
 */ 2 4 this 3 911  10 key_length 1 798  
321 0 0 4 418 849 0 0 495 /**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to open().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the encryption-iteration-count
 * config variable.
 */ 2 4 this 3 911  15 iteration_count 1 798  
322 0 0 15 427 914 713 0 70 /**
 * The copy constructor does not copy ownership of the stream.
 */ 1 4 copy 1 912  
323 0 0 7 427 914 713 0 105 /**
 * If owns_stream is true, the stream pointer will be deleted when the
 * StreamReader destructs.
 */ 2 2 in 1 834  11 owns_stream 1 797  
324 0 0 6 428 914 0 0 0 2 4 this 3 914  4 copy 1 912  
325 0 0 6 430 834 0 0 37 /**
 * Returns the stream in use.
 */ 1 4 this 3 912  
326 0 0 6 433 797 0 0 36 /**
 * Extracts a boolean value.
 */ 1 4 this 3 914  
327 0 0 6 434 915 0 0 43 /**
 * Extracts a signed 8-bit integer.
 */ 1 4 this 3 914  
328 0 0 6 435 917 0 0 46 /**
 * Extracts an unsigned 8-bit integer.
 */ 1 4 this 3 914  
329 0 0 6 436 919 0 0 44 /**
 * Extracts a signed 16-bit integer.
 */ 1 4 this 3 914  
330 0 0 6 437 921 0 0 44 /**
 * Extracts a signed 32-bit integer.
 */ 1 4 this 3 914  
331 0 0 6 438 821 0 0 44 /**
 * Extracts a signed 64-bit integer.
 */ 1 4 this 3 914  
332 0 0 6 439 922 0 0 47 /**
 * Extracts an unsigned 16-bit integer.
 */ 1 4 this 3 914  
333 0 0 6 440 924 0 0 47 /**
 * Extracts an unsigned 32-bit integer.
 */ 1 4 this 3 914  
334 0 0 6 441 926 0 0 47 /**
 * Extracts an unsigned 64-bit integer.
 */ 1 4 this 3 914  
335 0 0 6 442 927 0 0 186 /**
 * Extracts a 32-bit single-precision floating-point number.  Since this kind
 * of float is not necessarily portable across different architectures,
 * special care is required.
 */ 1 4 this 3 914  
336 0 0 6 443 928 0 0 51 /**
 * Extracts a 64-bit floating-point number.
 */ 1 4 this 3 914  
337 0 0 6 444 919 0 0 55 /**
 * Extracts a signed big-endian 16-bit integer.
 */ 1 4 this 3 914  
338 0 0 6 445 921 0 0 55 /**
 * Extracts a signed big-endian 32-bit integer.
 */ 1 4 this 3 914  
339 0 0 6 446 821 0 0 55 /**
 * Extracts a signed big-endian 64-bit integer.
 */ 1 4 this 3 914  
340 0 0 6 447 922 0 0 58 /**
 * Extracts an unsigned big-endian 16-bit integer.
 */ 1 4 this 3 914  
341 0 0 6 448 924 0 0 58 /**
 * Extracts an unsigned big-endian 32-bit integer.
 */ 1 4 this 3 914  
342 0 0 6 449 926 0 0 58 /**
 * Extracts an unsigned big-endian 64-bit integer.
 */ 1 4 this 3 914  
343 0 0 6 450 927 0 0 197 /**
 * Extracts a 32-bit single-precision big-endian floating-point number.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 1 4 this 3 914  
344 0 0 6 451 928 0 0 62 /**
 * Extracts a 64-bit big-endian floating-point number.
 */ 1 4 this 3 914  
345 0 0 6 452 848 0 0 45 /**
 * Extracts a variable-length string.
 */ 1 4 this 3 914  
346 0 0 6 453 848 0 0 72 /**
 * Extracts a variable-length string with a 32-bit length field.
 */ 1 4 this 3 914  
347 0 0 6 454 848 0 0 74 /**
 * Extracts a variable-length string, as a NULL-terminated string.
 */ 1 4 this 3 914  
348 0 0 6 455 848 0 0 128 /**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */ 2 4 this 3 914  4 size 1 850  
349 0 0 4 456 849 0 0 66 /**
 * Skips over the indicated number of bytes in the stream.
 */ 2 4 this 3 914  4 size 1 850  
350 0 0 38 457 859 0 0 134 /**
 * Extracts the indicated number of bytes in the stream and returns them as a
 * string.  Returns empty string at end-of-file.
 */ 2 4 this 3 914  4 size 1 850  
351 0 0 38 458 859 0 0 303 /**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's File.readline() function.
 */ 1 4 this 3 914  
352 0 0 38 459 859 0 0 0 1 4 this 3 914  
353 0 0 15 461 931 744 0 70 /**
 * The copy constructor does not copy ownership of the stream.
 */ 1 4 copy 1 929  
354 0 0 7 461 931 744 0 10 /**
 *
 */ 2 3 out 1 836  11 owns_stream 1 797  
355 0 0 6 462 931 0 0 0 2 4 this 3 931  4 copy 1 929  
356 0 0 6 464 836 0 0 37 /**
 * Returns the stream in use.
 */ 1 4 this 3 929  
357 0 0 4 467 849 0 0 46 /**
 * Adds a boolean value to the stream.
 */ 2 4 this 3 931  5 value 1 797  
358 0 0 4 468 849 0 0 53 /**
 * Adds a signed 8-bit integer to the stream.
 */ 2 4 this 3 931  5 value 1 915  
359 0 0 4 469 849 0 0 56 /**
 * Adds an unsigned 8-bit integer to the stream.
 */ 2 4 this 3 931  5 value 1 917  
360 0 0 4 470 849 0 0 54 /**
 * Adds a signed 16-bit integer to the stream.
 */ 2 4 this 3 931  5 value 1 919  
361 0 0 4 471 849 0 0 54 /**
 * Adds a signed 32-bit integer to the stream.
 */ 2 4 this 3 931  5 value 1 921  
362 0 0 4 472 849 0 0 54 /**
 * Adds a signed 64-bit integer to the stream.
 */ 2 4 this 3 931  5 value 1 821  
363 0 0 4 473 849 0 0 57 /**
 * Adds an unsigned 16-bit integer to the stream.
 */ 2 4 this 3 931  5 value 1 922  
364 0 0 4 474 849 0 0 57 /**
 * Adds an unsigned 32-bit integer to the stream.
 */ 2 4 this 3 931  5 value 1 924  
365 0 0 4 475 849 0 0 57 /**
 * Adds an unsigned 64-bit integer to the stream.
 */ 2 4 this 3 931  5 value 1 926  
366 0 0 4 476 849 0 0 196 /**
 * Adds a 32-bit single-precision floating-point number to the stream.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 2 4 this 3 931  5 value 1 927  
367 0 0 4 477 849 0 0 61 /**
 * Adds a 64-bit floating-point number to the stream.
 */ 2 4 this 3 931  5 value 1 928  
368 0 0 4 478 849 0 0 71 /**
 * Adds a signed 16-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 931  5 value 1 919  
369 0 0 4 479 849 0 0 71 /**
 * Adds a signed 32-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 931  5 value 1 921  
370 0 0 4 480 849 0 0 71 /**
 * Adds a signed 64-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 931  5 value 1 821  
371 0 0 4 481 849 0 0 74 /**
 * Adds an unsigned 16-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 931  5 value 1 922  
372 0 0 4 482 849 0 0 74 /**
 * Adds an unsigned 32-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 931  5 value 1 924  
373 0 0 4 483 849 0 0 74 /**
 * Adds an unsigned 64-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 931  5 value 1 926  
374 0 0 4 484 849 0 0 207 /**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * stream.  Since this kind of float is not necessarily portable across
 * different architectures, special care is required.
 */ 2 4 this 3 931  5 value 1 927  
375 0 0 4 485 849 0 0 78 /**
 * Adds a 64-bit big-endian floating-point number to the streamWriter.
 */ 2 4 this 3 931  5 value 1 928  
376 0 0 4 486 849 0 0 107 /**
 * Adds a variable-length string to the stream.  This actually adds a count
 * followed by n bytes.
 */ 2 4 this 3 931  3 str 1 848  
377 0 0 4 487 849 0 0 84 /**
 * Adds a variable-length string to the stream, using a 32-bit length field.
 */ 2 4 this 3 931  3 str 1 848  
378 0 0 4 488 849 0 0 84 /**
 * Adds a variable-length string to the stream, as a NULL-terminated string.
 */ 2 4 this 3 931  3 str 1 848  
379 0 0 4 489 849 0 0 236 /**
 * Adds a fixed-length string to the stream.  If the string given is less than
 * the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */ 3 4 this 3 931  3 str 1 848  4 size 1 850  
380 0 0 4 490 849 0 0 65 /**
 * Adds the indicated number of zero bytes to the stream.
 */ 2 4 this 3 931  4 size 1 850  
381 0 0 36 491 849 0 0 0 2 4 this 3 931  4 data 1 859  
382 0 0 4 492 849 0 0 50 /**
 * Calls flush() on the underlying stream.
 */ 1 4 this 3 931  
383 0 0 4 493 849 0 0 132 /**
 * A synonym of append_data().  This is useful when assigning the StreamWriter
 * to sys.stderr and/or sys.stdout in Python.
 */ 2 4 this 3 931  3 str 1 848  
384 0 0 4 495 849 0 0 572 /**
 * Acquires the internal lock.
 *
 * User code should call this to take temporary possession of the stream and
 * perform direct I/O operations on it, for instance to make several
 * sequential atomic reads.  You may not call any of the StreamWrapper methods
 * while the lock is held, other than release().
 *
 * Use with extreme caution!  This is a very low-level, non-recursive lock.
 * You must call acquire() only once, and you must later call release()
 * exactly once.  Failing to do so may result in a hard deadlock with no
 * available debugging features.
 */ 1 4 this 3 932  
385 0 0 4 496 849 0 0 135 /**
 * Releases the internal lock.  Must be called exactly once following a call
 * to acquire().  See the cautions with acquire().
 */ 1 4 this 3 932  
386 0 0 7 499 933 777 0 10 /**
 *
 */ 1 6 stream 1 834  
387 0 0 6 501 834 0 0 55 /**
 * Returns the istream this object is wrapping.
 */ 1 4 this 3 934  
388 0 0 6 498 932 0 0 0 1 4 this 3 933  
389 0 0 7 505 936 781 0 10 /**
 *
 */ 1 6 stream 1 836  
390 0 0 6 507 836 0 0 55 /**
 * Returns the ostream this object is wrapping.
 */ 1 4 this 3 937  
391 0 0 6 504 932 0 0 0 1 4 this 3 936  
392 0 0 7 514 939 788 0 10 /**
 *
 */ 1 6 stream 1 841  
393 0 0 6 516 841 0 0 56 /**
 * Returns the iostream this object is wrapping.
 */ 1 4 this 3 940  
394 0 0 6 510 933 0 0 0 1 4 this 3 939  
395 0 0 6 512 936 0 0 0 1 4 this 3 939  
152
790 11 ConfigFlags 0 141313 11 ConfigFlags 11 ConfigFlags 0 0 0 1 396 397 0 0 0 0 0 0 2 791 792 195
/**
 * This class is the base class of both ConfigVariable and ConfigVariableCore.
 * It exists only to provide a convenient name scoping for some enumerated
 * values common to both classes.
 */

791 9 ValueType 0 794624 22 ConfigFlags::ValueType 22 ConfigFlags::ValueType 790 0 0 0 0 0 0 0 0 0 11 12 VT_undefined 25 ConfigFlags::VT_undefined 0
0 7 VT_list 20 ConfigFlags::VT_list 0
1 9 VT_string 22 ConfigFlags::VT_string 0
2 11 VT_filename 24 ConfigFlags::VT_filename 0
3 7 VT_bool 20 ConfigFlags::VT_bool 0
4 6 VT_int 19 ConfigFlags::VT_int 0
5 9 VT_double 22 ConfigFlags::VT_double 0
6 7 VT_enum 20 ConfigFlags::VT_enum 0
7 14 VT_search_path 27 ConfigFlags::VT_search_path 0
8 8 VT_int64 21 ConfigFlags::VT_int64 0
9 8 VT_color 21 ConfigFlags::VT_color 0
10 0 0

792 13 VariableFlags 0 794624 26 ConfigFlags::VariableFlags 26 ConfigFlags::VariableFlags 790 0 0 0 0 0 0 0 0 0 5 18 F_trust_level_mask 31 ConfigFlags::F_trust_level_mask 138
// Trust level.  We have the bottom twelve bits reserved for a trust level
// indicator; then the open and closed bits are a special case.
4095 6 F_open 19 ConfigFlags::F_open 0
4096 8 F_closed 21 ConfigFlags::F_closed 0
8192 9 F_dynamic 22 ConfigFlags::F_dynamic 171
// F_dynamic means that the variable name is generated dynamically
// (possibly from a very large pool) and should not be included in the
// normal list of variable names.
16384 9 F_dconfig 22 ConfigFlags::F_dconfig 162
// F_dconfig means that the variable was constructed from the legacy
// DConfig system, rather than directly by the user.  You shouldn't pass
// this in directly.
32768 0 0

793 10 ConfigPage 0 43009 10 ConfigPage 10 ConfigPage 0 0 0 0 0 8 942 943 944 945 946 947 948 949 25 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 476 477 478 0 0 0 0 0 262
/**
 * A page of ConfigDeclarations that may be loaded or unloaded.  Typically
 * this represents a single .prc file that is read from disk at runtime, but
 * it may also represent a list of declarations built up by application code
 * and explicitly loaded.
 */

794 12 string const 0 8832 17 std::string const 17 std::string const 0 0 795 0 0 0 0 0 0 0 0 0 0

795 6 string 0 2105344 11 std::string 11 std::string 0 0 796 0 0 0 0 0 0 0 0 0 0

796 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

797 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

798 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

799 19 ConfigDeclaration * 0 8576 19 ConfigDeclaration * 19 ConfigDeclaration * 0 0 800 0 0 0 0 0 0 0 0 0 0

800 17 ConfigDeclaration 0 43009 17 ConfigDeclaration 17 ConfigDeclaration 0 0 0 0 0 2 950 951 24 420 421 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 0 0 1 0 790 0 0 0 0 249
/**
 * A single declaration of a config variable, typically defined as one line in
 * a .prc file, e.g.  "show-frame-rate-meter 1".  This is really just a
 * pairing of a string name (actually, a ConfigVariableCore pointer) to a
 * string value.
 */

801 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 793 0 0 0 0 0 0 0 0 0 0

802 20 ConfigVariableCore * 0 8576 20 ConfigVariableCore * 20 ConfigVariableCore * 0 0 803 0 0 0 0 0 0 0 0 0 0

803 18 ConfigVariableCore 0 43009 18 ConfigVariableCore 18 ConfigVariableCore 0 0 0 0 0 12 952 953 954 955 956 957 958 959 960 961 962 963 28 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 4 1007 1008 1009 1010 0 2 3 790 422 423 3 804 424 425 0 0 345
/**
 * The internal definition of a ConfigVariable.  This object is shared between
 * all instances of a ConfigVariable that use the same variable name.
 *
 * You cannot create a ConfigVariableCore instance directly; instead, use the
 * make() method, which may return a shared instance.  Once created, these
 * objects are never destructed.
 */

804 10 MemoryBase 0 2048 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 428
/**
 * This class is intended to be the base class of all objects in Panda that
 * might be allocated and deleted via the new and delete operators.  It
 * redefines these operators to provide some memory tracking support.
 *
 * We used to try to override the global operator new and delete methods, but
 * that seems to cause problems when including header files for C++-based
 * system libraries (such as are found on OSX).
 */

805 25 ConfigDeclaration const * 0 8576 25 ConfigDeclaration const * 25 ConfigDeclaration const * 0 0 806 0 0 0 0 0 0 0 0 0 0

806 23 ConfigDeclaration const 0 8832 23 ConfigDeclaration const 23 ConfigDeclaration const 0 0 800 0 0 0 0 0 0 0 0 0 0

807 14 NotifySeverity 0 532481 14 NotifySeverity 14 NotifySeverity 0 0 0 0 0 0 0 0 0 0 7 14 NS_unspecified 14 NS_unspecified 41
// Never used, a special case internally.
0 7 NS_spam 7 NS_spam 0
1 8 NS_debug 8 NS_debug 0
2 7 NS_info 7 NS_info 0
3 10 NS_warning 10 NS_warning 0
4 8 NS_error 8 NS_error 37
// Specifically, a recoverable error.
5 8 NS_fatal 8 NS_fatal 55
// A nonrecoverable error--expect abort() or core dump.
6 0 0

808 6 Notify 0 26625 6 Notify 6 Notify 0 0 0 1 479 480 0 15 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 0 0 0 0 0 529
/**
 * An object that handles general error reporting to the user.  It contains a
 * pointer to an ostream, initially cerr, which can be reset at will to point
 * to different output devices, according to the needs of the application.
 * All output generated within Panda should vector through the Notify ostream.
 *
 * This also includes a collection of Categories and Severities, which may be
 * independently enabled or disabled, so that error messages may be squelched
 * or respected according to the wishes of the user.
 */

809 17 ConfigPageManager 0 43009 17 ConfigPageManager 17 ConfigPageManager 0 0 0 0 0 6 964 965 966 967 968 969 19 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 0 0 1 0 790 0 0 0 0 124
/**
 * A global object that maintains the set of ConfigPages everywhere in the
 * world, and keeps them in sorted order.
 */

810 11 DSearchPath 0 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 304
/**
 * This class stores a list of directories that can be searched, in order, to
 * locate a particular file.  It is normally constructed by passing it a
 * traditional searchpath-style string, e.g.  a list of directory names
 * delimited by spaces or colons, but it can also be built up explicitly.
 */

811 21 ConfigVariableManager 0 43009 21 ConfigVariableManager 21 ConfigVariableManager 0 0 0 0 0 1 970 13 515 516 517 518 519 520 521 522 523 524 525 526 527 1 1011 0 0 0 0 163
/**
 * A global object that maintains the set of ConfigVariables (actually,
 * ConfigVariableCores) everywhere in the world, and keeps them in sorted
 * order.
 */

812 18 ConfigVariableBase 0 43009 18 ConfigVariableBase 18 ConfigVariableBase 0 0 0 0 0 6 971 972 973 974 975 976 12 532 533 534 535 536 537 538 539 540 541 542 543 0 0 2 3 790 528 529 3 804 530 531 0 0 417
/**
 * This class is the base class for both ConfigVariableList and ConfigVariable
 * (and hence for all of the ConfigVariableBool, ConfigVaribleString, etc.
 * classes).  It collects together the common interface for all generic
 * ConfigVariables.
 *
 * Mostly, this class serves as a thin wrapper around ConfigVariableCore
 * and/or ConfigDeclaration, more or less duplicating the interface presented
 * there.
 */

813 14 ConfigVariable 0 26625 14 ConfigVariable 14 ConfigVariable 0 0 0 1 544 545 0 5 546 547 548 549 550 0 0 1 0 812 0 0 0 0 415
/**
 * This is a generic, untyped ConfigVariable.  It is also the base class for
 * the typed ConfigVariables, and contains all of the code common to
 * ConfigVariables of all types (except ConfigVariableList, which is a bit of
 * a special case).
 *
 * Mostly, this class serves as a thin wrapper around ConfigVariableCore
 * and/or ConfigDeclaration, more or less duplicating the interface presented
 * there.
 */

814 18 ConfigVariableBool 0 141313 18 ConfigVariableBool 18 ConfigVariableBool 0 0 0 1 551 561 2 977 978 8 552 554 555 556 557 558 559 560 0 1 553 1 0 813 0 0 0 0 86
/**
 * This is a convenience class to specialize ConfigVariable as a boolean type.
 */

815 20 ConfigVariableDouble 0 141313 20 ConfigVariableDouble 20 ConfigVariableDouble 0 0 0 1 562 573 2 979 980 9 563 565 566 567 568 569 570 571 572 0 1 564 1 0 813 0 0 0 0 97
/**
 * This is a convenience class to specialize ConfigVariable as a floating-
 * point type.
 */

816 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

817 22 ConfigVariableFilename 0 141313 22 ConfigVariableFilename 22 ConfigVariableFilename 0 0 0 1 574 597 2 981 982 21 575 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 0 1 576 1 0 813 0 0 0 0 327
/**
 * This is a convenience class to specialize ConfigVariable as a Filename
 * type.  It is almost the same thing as ConfigVariableString, except it
 * handles an implicit Filename::expand_from() operation so that the user may
 * put OS-specific filenames, or filenames based on environment variables, in
 * the prc file.
 */

818 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 839
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 *
 * Note that the methods of Filename that interact with the filesystem (such
 * as exists(), open_read(), etc.) directly interface with the operating system
 * and are not aware of Panda's virtual file system.  To interact with the VFS,
 * use the methods on VirtualFileSystem instead.
 */

819 17 ConfigVariableInt 0 141313 17 ConfigVariableInt 17 ConfigVariableInt 0 0 0 1 598 609 2 983 984 9 599 601 602 603 604 605 606 607 608 0 1 600 1 0 813 0 0 0 0 90
/**
 * This is a convenience class to specialize ConfigVariable as an integer
 * type.
 */

820 19 ConfigVariableInt64 0 141313 19 ConfigVariableInt64 19 ConfigVariableInt64 0 0 0 1 610 621 2 985 986 9 611 613 614 615 616 617 618 619 620 0 1 612 1 0 813 0 0 0 0 96
/**
 * This is a convenience class to specialize ConfigVariable as a 64-bit
 * integer type.
 */

821 7 int64_t 0 2105344 7 int64_t 7 int64_t 0 0 822 0 0 0 0 0 0 0 0 0 0

822 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

823 18 ConfigVariableList 0 26625 18 ConfigVariableList 18 ConfigVariableList 0 0 0 1 622 623 0 8 624 625 626 627 628 629 630 631 0 0 1 0 812 0 0 0 0 481
/**
 * This class is similar to ConfigVariable, but it reports its value as a list
 * of strings.  In this special case, all of the declarations of the variable
 * are returned as the elements of this list, in order.
 *
 * Note that this is different from a normal ConfigVariableString, which just
 * returns its topmost value, which can optionally be treated as a number of
 * discrete words by dividing it at the spaces.
 *
 * A ConfigVariableList cannot be modified locally.
 */

824 24 ConfigVariableSearchPath 0 26625 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 1 632 633 3 987 988 989 15 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 1 1012 1 634 1 0 812 0 0 0 0 731
/**
 * This is similar to a ConfigVariableList, but it returns its list as a
 * DSearchPath, as a list of directories.
 *
 * You may locally append directories to the end of the search path with the
 * methods here, or prepend them to the beginning.  Use these methods to make
 * adjustments to the path; do not attempt to directly modify the const
 * DSearchPath object returned by get_value().
 *
 * Unlike other ConfigVariable types, local changes (made by calling
 * append_directory() and prepend_directory()) are specific to this particular
 * instance of the ConfigVariableSearchPath.  A separate instance of the same
 * variable, created by using the same name to the constructor, will not
 * reflect the local changes.
 */

825 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 810 0 0 0 0 0 0 0 0 0 0

826 20 ConfigVariableString 0 141313 20 ConfigVariableString 20 ConfigVariableString 0 0 0 1 650 666 2 990 991 14 651 653 654 655 656 657 658 659 660 661 662 663 664 665 0 1 652 1 0 813 0 0 0 0 85
/**
 * This is a convenience class to specialize ConfigVariable as a string type.
 */

827 14 NotifyCategory 0 141313 14 NotifyCategory 14 NotifyCategory 0 0 0 1 692 693 4 992 993 994 995 21 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 1 1013 0 2 3 804 667 668 3 790 669 670 0 0 284
/**
 * A particular category of error messages.  Typically there will be one of
 * these per package, so that we can turn on or off error messages at least at
 * a package level; further nested categories can be created within a package
 * if a finer grain of control is required.
 */

828 16 NotifyCategory * 0 8576 16 NotifyCategory * 16 NotifyCategory * 0 0 827 0 0 0 0 0 0 0 0 0 0

829 14 IDecryptStream 0 141313 14 IDecryptStream 14 IDecryptStream 0 0 0 1 694 700 3 996 997 998 5 695 696 697 698 699 0 0 1 0 830 0 0 0 0 340
/**
 * An input stream object that uses OpenSSL to decrypt the input from another
 * source stream on-the-fly.
 *
 * Attach an IDecryptStream to an existing istream that provides encrypted
 * data, as generated by an OEncryptStream, and read the corresponding
 * unencrypted data from the IDecryptStream.
 *
 * Seeking is not supported.
 */

830 7 istream 0 2048 12 std::istream 12 std::istream 0 0 0 0 0 0 0 0 0 0 0 0 0

831 14 OEncryptStream 0 141313 14 OEncryptStream 14 OEncryptStream 0 0 0 1 701 710 3 999 1000 1001 5 702 703 704 705 706 0 0 1 0 832 0 0 0 0 296
/**
 * An input stream object that uses OpenSSL to encrypt data to another
 * destination stream on-the-fly.
 *
 * Attach an OEncryptStream to an existing ostream that will accept encrypted
 * data, and write your unencrypted source data to the OEncryptStream.
 *
 * Seeking is not supported.
 */

832 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

833 12 StreamReader 0 26625 12 StreamReader 12 StreamReader 0 0 0 1 711 713 1 1002 29 712 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 0 0 0 0 0 158
/**
 * A class to read sequential binary data directly from an istream.  Its
 * interface is similar to DatagramIterator by design; see also StreamWriter.
 */

834 9 istream * 0 8576 14 std::istream * 14 std::istream * 0 0 830 0 0 0 0 0 0 0 0 0 0

835 12 StreamWriter 0 26625 12 StreamWriter 12 StreamWriter 0 0 0 1 742 744 1 1003 29 743 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 0 0 0 0 0 300
/**
 * A StreamWriter object is used to write sequential binary data directly to
 * an ostream.  Its interface is very similar to Datagram by design; it's
 * primarily intended as a convenience to eliminate the overhead of writing
 * bytes to a Datagram and then writing the Datagram to a stream.
 */

836 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 832 0 0 0 0 0 0 0 0 0 0

837 17 StreamWrapperBase 0 43009 17 StreamWrapperBase 17 StreamWrapperBase 0 0 0 0 0 0 2 773 774 0 0 0 0 0 116
/**
 * The base class for both IStreamWrapper and OStreamWrapper, this provides
 * the common locking interface.
 */

838 14 IStreamWrapper 0 26625 14 IStreamWrapper 14 IStreamWrapper 0 0 0 1 776 777 1 1004 1 778 0 0 1 5 837 775 0 0 0 168
/**
 * This class provides a locking wrapper around an arbitrary istream pointer.
 * A thread may use this class to perform an atomic seek/read/gcount
 * operation.
 */

839 14 OStreamWrapper 0 26625 14 OStreamWrapper 14 OStreamWrapper 0 0 0 1 780 781 1 1005 1 782 0 0 1 5 837 779 0 0 0 159
/**
 * This class provides a locking wrapper around an arbitrary ostream pointer.
 * A thread may use this class to perform an atomic seek/write operation.
 */

840 13 StreamWrapper 0 26625 13 StreamWrapper 13 StreamWrapper 0 0 0 1 787 788 1 1006 1 789 0 0 2 3 838 783 784 3 839 785 786 0 0 97
/**
 * This class provides a locking wrapper around a combination ostream/istream
 * pointer.
 */

841 10 iostream * 0 8576 15 std::iostream * 15 std::iostream * 0 0 842 0 0 0 0 0 0 0 0 0 0

842 8 iostream 0 2048 13 std::iostream 13 std::iostream 0 0 0 0 0 0 0 0 0 0 0 0 0

843 13 ConfigFlags * 0 8576 13 ConfigFlags * 13 ConfigFlags * 0 0 790 0 0 0 0 0 0 0 0 0 0

844 19 ConfigFlags const * 0 8576 19 ConfigFlags const * 19 ConfigFlags const * 0 0 845 0 0 0 0 0 0 0 0 0 0

845 17 ConfigFlags const 0 8832 17 ConfigFlags const 17 ConfigFlags const 0 0 790 0 0 0 0 0 0 0 0 0 0

846 18 ConfigPage const * 0 8576 18 ConfigPage const * 18 ConfigPage const * 0 0 847 0 0 0 0 0 0 0 0 0 0

847 16 ConfigPage const 0 8832 16 ConfigPage const 16 ConfigPage const 0 0 793 0 0 0 0 0 0 0 0 0 0

848 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

849 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

850 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 851 0 0 0 0 0 0 0 0 0 0

851 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

852 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 818 0 0 0 0 0 0 0 0 0 0

853 26 ConfigVariableCore const * 0 8576 26 ConfigVariableCore const * 26 ConfigVariableCore const * 0 0 854 0 0 0 0 0 0 0 0 0 0

854 24 ConfigVariableCore const 0 8832 24 ConfigVariableCore const 24 ConfigVariableCore const 0 0 803 0 0 0 0 0 0 0 0 0 0

855 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 804 0 0 0 0 0 0 0 0 0 0

856 8 Notify * 0 8576 8 Notify * 8 Notify * 0 0 808 0 0 0 0 0 0 0 0 0 0

857 14 Notify const * 0 8576 14 Notify const * 14 Notify const * 0 0 858 0 0 0 0 0 0 0 0 0 0

858 12 Notify const 0 8832 12 Notify const 12 Notify const 0 0 808 0 0 0 0 0 0 0 0 0 0

859 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 860 0 0 0 0 0 0 0 0 0 0

860 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 861 0 0 0 0 0 0 0 0 0 0

861 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

862 25 ConfigPageManager const * 0 8576 25 ConfigPageManager const * 25 ConfigPageManager const * 0 0 863 0 0 0 0 0 0 0 0 0 0

863 23 ConfigPageManager const 0 8832 23 ConfigPageManager const 23 ConfigPageManager const 0 0 809 0 0 0 0 0 0 0 0 0 0

864 19 ConfigPageManager * 0 8576 19 ConfigPageManager * 19 ConfigPageManager * 0 0 809 0 0 0 0 0 0 0 0 0 0

865 13 DSearchPath * 0 8576 13 DSearchPath * 13 DSearchPath * 0 0 810 0 0 0 0 0 0 0 0 0 0

866 23 ConfigVariableManager * 0 8576 23 ConfigVariableManager * 23 ConfigVariableManager * 0 0 811 0 0 0 0 0 0 0 0 0 0

867 29 ConfigVariableManager const * 0 8576 29 ConfigVariableManager const * 29 ConfigVariableManager const * 0 0 868 0 0 0 0 0 0 0 0 0 0

868 27 ConfigVariableManager const 0 8832 27 ConfigVariableManager const 27 ConfigVariableManager const 0 0 811 0 0 0 0 0 0 0 0 0 0

869 26 ConfigVariableBase const * 0 8576 26 ConfigVariableBase const * 26 ConfigVariableBase const * 0 0 870 0 0 0 0 0 0 0 0 0 0

870 24 ConfigVariableBase const 0 8832 24 ConfigVariableBase const 24 ConfigVariableBase const 0 0 812 0 0 0 0 0 0 0 0 0 0

871 20 ConfigVariableBase * 0 8576 20 ConfigVariableBase * 20 ConfigVariableBase * 0 0 812 0 0 0 0 0 0 0 0 0 0

872 22 ConfigVariable const * 0 8576 22 ConfigVariable const * 22 ConfigVariable const * 0 0 873 0 0 0 0 0 0 0 0 0 0

873 20 ConfigVariable const 0 8832 20 ConfigVariable const 20 ConfigVariable const 0 0 813 0 0 0 0 0 0 0 0 0 0

874 16 ConfigVariable * 0 8576 16 ConfigVariable * 16 ConfigVariable * 0 0 813 0 0 0 0 0 0 0 0 0 0

875 26 ConfigVariableBool const * 0 8576 26 ConfigVariableBool const * 26 ConfigVariableBool const * 0 0 876 0 0 0 0 0 0 0 0 0 0

876 24 ConfigVariableBool const 0 8832 24 ConfigVariableBool const 24 ConfigVariableBool const 0 0 814 0 0 0 0 0 0 0 0 0 0

877 20 ConfigVariableBool * 0 8576 20 ConfigVariableBool * 20 ConfigVariableBool * 0 0 814 0 0 0 0 0 0 0 0 0 0

878 28 ConfigVariableDouble const * 0 8576 28 ConfigVariableDouble const * 28 ConfigVariableDouble const * 0 0 879 0 0 0 0 0 0 0 0 0 0

879 26 ConfigVariableDouble const 0 8832 26 ConfigVariableDouble const 26 ConfigVariableDouble const 0 0 815 0 0 0 0 0 0 0 0 0 0

880 22 ConfigVariableDouble * 0 8576 22 ConfigVariableDouble * 22 ConfigVariableDouble * 0 0 815 0 0 0 0 0 0 0 0 0 0

881 30 ConfigVariableFilename const * 0 8576 30 ConfigVariableFilename const * 30 ConfigVariableFilename const * 0 0 882 0 0 0 0 0 0 0 0 0 0

882 28 ConfigVariableFilename const 0 8832 28 ConfigVariableFilename const 28 ConfigVariableFilename const 0 0 817 0 0 0 0 0 0 0 0 0 0

883 24 ConfigVariableFilename * 0 8576 24 ConfigVariableFilename * 24 ConfigVariableFilename * 0 0 817 0 0 0 0 0 0 0 0 0 0

884 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 885 0 0 0 0 0 0 0 0 0 0

885 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 818 0 0 0 0 0 0 0 0 0 0

886 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

887 25 ConfigVariableInt const * 0 8576 25 ConfigVariableInt const * 25 ConfigVariableInt const * 0 0 888 0 0 0 0 0 0 0 0 0 0

888 23 ConfigVariableInt const 0 8832 23 ConfigVariableInt const 23 ConfigVariableInt const 0 0 819 0 0 0 0 0 0 0 0 0 0

889 19 ConfigVariableInt * 0 8576 19 ConfigVariableInt * 19 ConfigVariableInt * 0 0 819 0 0 0 0 0 0 0 0 0 0

890 27 ConfigVariableInt64 const * 0 8576 27 ConfigVariableInt64 const * 27 ConfigVariableInt64 const * 0 0 891 0 0 0 0 0 0 0 0 0 0

891 25 ConfigVariableInt64 const 0 8832 25 ConfigVariableInt64 const 25 ConfigVariableInt64 const 0 0 820 0 0 0 0 0 0 0 0 0 0

892 21 ConfigVariableInt64 * 0 8576 21 ConfigVariableInt64 * 21 ConfigVariableInt64 * 0 0 820 0 0 0 0 0 0 0 0 0 0

893 26 ConfigVariableList const * 0 8576 26 ConfigVariableList const * 26 ConfigVariableList const * 0 0 894 0 0 0 0 0 0 0 0 0 0

894 24 ConfigVariableList const 0 8832 24 ConfigVariableList const 24 ConfigVariableList const 0 0 823 0 0 0 0 0 0 0 0 0 0

895 20 ConfigVariableList * 0 8576 20 ConfigVariableList * 20 ConfigVariableList * 0 0 823 0 0 0 0 0 0 0 0 0 0

896 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 825 0 0 0 0 0 0 0 0 0 0

897 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 824 0 0 0 0 0 0 0 0 0 0

898 32 ConfigVariableSearchPath const * 0 8576 32 ConfigVariableSearchPath const * 32 ConfigVariableSearchPath const * 0 0 899 0 0 0 0 0 0 0 0 0 0

899 30 ConfigVariableSearchPath const 0 8832 30 ConfigVariableSearchPath const 30 ConfigVariableSearchPath const 0 0 824 0 0 0 0 0 0 0 0 0 0

900 7 Results 0 264192 20 DSearchPath::Results 20 DSearchPath::Results 810 0 0 0 0 0 0 0 0 0 0 0 0

901 9 Results * 0 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 900 0 0 0 0 0 0 0 0 0 0

902 28 ConfigVariableString const * 0 8576 28 ConfigVariableString const * 28 ConfigVariableString const * 0 0 903 0 0 0 0 0 0 0 0 0 0

903 26 ConfigVariableString const 0 8832 26 ConfigVariableString const 26 ConfigVariableString const 0 0 826 0 0 0 0 0 0 0 0 0 0

904 22 ConfigVariableString * 0 8576 22 ConfigVariableString * 22 ConfigVariableString * 0 0 826 0 0 0 0 0 0 0 0 0 0

905 22 NotifyCategory const * 0 8576 22 NotifyCategory const * 22 NotifyCategory const * 0 0 906 0 0 0 0 0 0 0 0 0 0

906 20 NotifyCategory const 0 8832 20 NotifyCategory const 20 NotifyCategory const 0 0 827 0 0 0 0 0 0 0 0 0 0

907 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

908 16 IDecryptStream * 0 8576 16 IDecryptStream * 16 IDecryptStream * 0 0 829 0 0 0 0 0 0 0 0 0 0

909 22 IDecryptStream const * 0 8576 22 IDecryptStream const * 22 IDecryptStream const * 0 0 910 0 0 0 0 0 0 0 0 0 0

910 20 IDecryptStream const 0 8832 20 IDecryptStream const 20 IDecryptStream const 0 0 829 0 0 0 0 0 0 0 0 0 0

911 16 OEncryptStream * 0 8576 16 OEncryptStream * 16 OEncryptStream * 0 0 831 0 0 0 0 0 0 0 0 0 0

912 20 StreamReader const * 0 8576 20 StreamReader const * 20 StreamReader const * 0 0 913 0 0 0 0 0 0 0 0 0 0

913 18 StreamReader const 0 8832 18 StreamReader const 18 StreamReader const 0 0 833 0 0 0 0 0 0 0 0 0 0

914 14 StreamReader * 0 8576 14 StreamReader * 14 StreamReader * 0 0 833 0 0 0 0 0 0 0 0 0 0

915 6 int8_t 0 2105344 6 int8_t 6 int8_t 0 0 916 0 0 0 0 0 0 0 0 0 0

916 11 signed char 0 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0 0

917 7 uint8_t 0 2105344 7 uint8_t 7 uint8_t 0 0 918 0 0 0 0 0 0 0 0 0 0

918 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

919 7 int16_t 0 2105344 7 int16_t 7 int16_t 0 0 920 0 0 0 0 0 0 0 0 0 0

920 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

921 7 int32_t 0 2105344 7 int32_t 7 int32_t 0 0 798 0 0 0 0 0 0 0 0 0 0

922 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 923 0 0 0 0 0 0 0 0 0 0

923 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

924 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 925 0 0 0 0 0 0 0 0 0 0

925 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

926 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 851 0 0 0 0 0 0 0 0 0 0

927 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

928 10 PN_float64 0 2105344 10 PN_float64 10 PN_float64 0 0 816 0 0 0 0 0 0 0 0 0 0

929 20 StreamWriter const * 0 8576 20 StreamWriter const * 20 StreamWriter const * 0 0 930 0 0 0 0 0 0 0 0 0 0

930 18 StreamWriter const 0 8832 18 StreamWriter const 18 StreamWriter const 0 0 835 0 0 0 0 0 0 0 0 0 0

931 14 StreamWriter * 0 8576 14 StreamWriter * 14 StreamWriter * 0 0 835 0 0 0 0 0 0 0 0 0 0

932 19 StreamWrapperBase * 0 8576 19 StreamWrapperBase * 19 StreamWrapperBase * 0 0 837 0 0 0 0 0 0 0 0 0 0

933 16 IStreamWrapper * 0 8576 16 IStreamWrapper * 16 IStreamWrapper * 0 0 838 0 0 0 0 0 0 0 0 0 0

934 22 IStreamWrapper const * 0 8576 22 IStreamWrapper const * 22 IStreamWrapper const * 0 0 935 0 0 0 0 0 0 0 0 0 0

935 20 IStreamWrapper const 0 8832 20 IStreamWrapper const 20 IStreamWrapper const 0 0 838 0 0 0 0 0 0 0 0 0 0

936 16 OStreamWrapper * 0 8576 16 OStreamWrapper * 16 OStreamWrapper * 0 0 839 0 0 0 0 0 0 0 0 0 0

937 22 OStreamWrapper const * 0 8576 22 OStreamWrapper const * 22 OStreamWrapper const * 0 0 938 0 0 0 0 0 0 0 0 0 0

938 20 OStreamWrapper const 0 8832 20 OStreamWrapper const 20 OStreamWrapper const 0 0 839 0 0 0 0 0 0 0 0 0 0

939 15 StreamWrapper * 0 8576 15 StreamWrapper * 15 StreamWrapper * 0 0 840 0 0 0 0 0 0 0 0 0 0

940 21 StreamWrapper const * 0 8576 21 StreamWrapper const * 21 StreamWrapper const * 0 0 941 0 0 0 0 0 0 0 0 0 0

941 19 StreamWrapper const 0 8832 19 StreamWrapper const 19 StreamWrapper const 0 0 840 0 0 0 0 0 0 0 0 0 0

0
65
942 4 name 0 2 794 400 0 0 0 0 0 0 0 16 ConfigPage::name 0

943 7 special 0 2 797 401 0 0 0 0 0 0 0 19 ConfigPage::special 0

944 8 implicit 0 2 797 402 0 0 0 0 0 0 0 20 ConfigPage::implicit 0

945 4 sort 0 6 798 404 403 0 0 0 0 0 0 16 ConfigPage::sort 0

946 8 page_seq 0 2 798 405 0 0 0 0 0 0 0 20 ConfigPage::page_seq 0

947 11 trust_level 0 6 798 406 407 0 0 0 0 0 0 23 ConfigPage::trust_level 0

948 9 signature 0 2 794 408 0 0 0 0 0 0 0 21 ConfigPage::signature 0

949 12 declarations 0 66 799 416 0 0 0 0 414 0 0 24 ConfigPage::declarations 0

950 4 page 0 2 801 420 0 0 0 0 0 0 0 23 ConfigDeclaration::page 0

951 8 variable 0 2 802 421 0 0 0 0 0 0 0 27 ConfigDeclaration::variable 0

952 12 declarations 0 66 805 445 0 0 0 0 444 0 0 32 ConfigVariableCore::declarations 0

953 4 name 0 2 794 426 0 0 0 0 0 0 0 24 ConfigVariableCore::name 0

954 4 used 0 2 797 427 0 0 0 0 0 0 0 24 ConfigVariableCore::used 0

955 6 closed 0 2 797 431 0 0 0 0 0 0 0 26 ConfigVariableCore::closed 0

956 11 trust_level 0 2 798 432 0 0 0 0 0 0 0 31 ConfigVariableCore::trust_level 0

957 7 dynamic 0 2 797 433 0 0 0 0 0 0 0 27 ConfigVariableCore::dynamic 0

958 10 value_type 0 6 791 428 435 0 0 0 0 0 0 30 ConfigVariableCore::value_type 0

959 11 description 0 6 794 429 437 0 0 0 0 0 0 31 ConfigVariableCore::description 0

960 13 default_value 0 6 805 434 438 0 0 0 0 0 0 33 ConfigVariableCore::default_value 0

961 10 references 0 66 805 447 0 0 0 0 446 0 0 30 ConfigVariableCore::references 0

962 18 trusted_references 0 66 805 449 0 0 0 0 448 0 0 38 ConfigVariableCore::trusted_references 0

963 17 unique_references 0 66 805 451 0 0 0 0 450 0 0 37 ConfigVariableCore::unique_references 0

964 11 search_path 0 2 810 499 0 0 0 0 0 0 0 30 ConfigPageManager::search_path 0

965 12 prc_patterns 0 66 795 501 0 0 0 0 500 0 0 31 ConfigPageManager::prc_patterns 0

966 22 prc_encrypted_patterns 0 66 795 503 0 0 0 0 502 0 0 41 ConfigPageManager::prc_encrypted_patterns 0

967 23 prc_executable_patterns 0 66 795 505 0 0 0 0 504 0 0 42 ConfigPageManager::prc_executable_patterns 0

968 14 implicit_pages 0 66 801 509 0 0 0 0 508 0 0 33 ConfigPageManager::implicit_pages 0

969 14 explicit_pages 0 66 801 511 0 0 0 0 510 0 0 33 ConfigPageManager::explicit_pages 0

970 9 variables 0 66 802 518 0 0 0 0 517 0 0 32 ConfigVariableManager::variables 0

971 4 name 0 2 794 532 0 0 0 0 0 0 0 24 ConfigVariableBase::name 0

972 10 value_type 0 2 791 533 0 0 0 0 0 0 0 30 ConfigVariableBase::value_type 0

973 11 description 0 2 794 534 0 0 0 0 0 0 0 31 ConfigVariableBase::description 0

974 6 closed 0 2 797 536 0 0 0 0 0 0 0 26 ConfigVariableBase::closed 0

975 11 trust_level 0 2 798 537 0 0 0 0 0 0 0 31 ConfigVariableBase::trust_level 0

976 7 dynamic 0 2 797 538 0 0 0 0 0 0 0 27 ConfigVariableBase::dynamic 0

977 5 value 0 6 797 557 556 0 0 0 0 0 0 25 ConfigVariableBool::value 0

978 13 default_value 0 2 797 558 0 0 0 0 0 0 0 33 ConfigVariableBool::default_value 0

979 5 value 0 6 816 568 567 0 0 0 0 0 0 27 ConfigVariableDouble::value 0

980 13 default_value 0 2 816 569 0 0 0 0 0 0 0 35 ConfigVariableDouble::default_value 0

981 5 value 0 6 818 591 590 0 0 0 0 0 0 29 ConfigVariableFilename::value 0

982 13 default_value 0 2 818 592 0 0 0 0 0 0 0 37 ConfigVariableFilename::default_value 0

983 5 value 0 6 798 604 603 0 0 0 0 0 0 24 ConfigVariableInt::value 0

984 13 default_value 0 2 798 605 0 0 0 0 0 0 0 32 ConfigVariableInt::default_value 0

985 5 value 0 6 821 616 615 0 0 0 0 0 0 26 ConfigVariableInt64::value 0

986 13 default_value 0 2 821 617 0 0 0 0 0 0 0 34 ConfigVariableInt64::default_value 0

987 5 value 0 2 810 635 0 0 0 0 0 0 0 31 ConfigVariableSearchPath::value 0

988 13 default_value 0 2 825 636 0 0 0 0 0 0 0 39 ConfigVariableSearchPath::default_value 0

989 11 directories 0 66 818 645 0 0 0 0 644 0 0 37 ConfigVariableSearchPath::directories 0

990 5 value 0 6 794 661 660 0 0 0 0 0 0 27 ConfigVariableString::value 0

991 13 default_value 0 2 795 662 0 0 0 0 0 0 0 35 ConfigVariableString::default_value 0

992 8 fullname 0 2 795 671 0 0 0 0 0 0 0 24 NotifyCategory::fullname 0

993 8 basename 0 2 795 672 0 0 0 0 0 0 0 24 NotifyCategory::basename 0

994 8 severity 0 6 807 673 674 0 0 0 0 0 0 24 NotifyCategory::severity 0

995 8 children 0 66 828 690 0 0 0 0 689 0 0 24 NotifyCategory::children 0

996 9 algorithm 0 2 794 697 0 0 0 0 0 0 0 25 IDecryptStream::algorithm 0

997 10 key_length 0 2 798 698 0 0 0 0 0 0 0 26 IDecryptStream::key_length 0

998 15 iteration_count 0 2 798 699 0 0 0 0 0 0 0 31 IDecryptStream::iteration_count 0

999 9 algorithm 0 6 794 707 704 0 0 0 0 0 0 25 OEncryptStream::algorithm 0

1000 10 key_length 0 6 798 708 705 0 0 0 0 0 0 26 OEncryptStream::key_length 0

1001 15 iteration_count 0 6 798 709 706 0 0 0 0 0 0 31 OEncryptStream::iteration_count 0

1002 7 istream 0 2 834 714 0 0 0 0 0 0 0 12 std::istream 0

1003 7 ostream 0 2 836 745 0 0 0 0 0 0 0 12 std::ostream 0

1004 7 istream 0 2 834 778 0 0 0 0 0 0 0 23 IStreamWrapper::istream 0

1005 7 ostream 0 2 836 782 0 0 0 0 0 0 0 23 OStreamWrapper::ostream 0

1006 8 iostream 0 2 841 789 0 0 0 0 0 0 0 23 StreamWrapper::iostream 0

7
1007 16 get_declarations 0 444 445 36 ConfigVariableCore::get_declarations 0

1008 14 get_references 0 446 447 34 ConfigVariableCore::get_references 0

1009 22 get_trusted_references 0 448 449 42 ConfigVariableCore::get_trusted_references 0

1010 21 get_unique_references 0 450 451 41 ConfigVariableCore::get_unique_references 0

1011 13 get_variables 0 517 518 36 ConfigVariableManager::get_variables 0

1012 15 get_directories 0 644 645 41 ConfigVariableSearchPath::get_directories 0

1013 12 get_children 0 689 690 28 NotifyCategory::get_children 0

